//START AjaxControlToolkit.Common.Common.js
// (c) Copyright Microsoft Corporation.
// This source is subject to the Microsoft Permissive License.
// See http://www.microsoft.com/resources/sharedsource/licensingbasics/sharedsourcelicenses.mspx.
// All other rights reserved.


/// <reference name="MicrosoftAjax.debug.js" />
/// <reference name="MicrosoftAjaxTimer.debug.js" />
/// <reference name="MicrosoftAjaxWebForms.debug.js" />


// Add common toolkit scripts here.  To consume the scripts on a control add
// 
//      [RequiredScript(typeof(CommonToolkitScripts))] 
//      public class SomeExtender : ...
// 
// to the controls extender class declaration.


Type.registerNamespace('AjaxControlToolkit');


AjaxControlToolkit.BoxSide = function() {
    /// <summary>
    /// The BoxSide enumeration describes the sides of a DOM element
    /// </summary>
    /// <field name="Top" type="Number" integer="true" static="true" />
    /// <field name="Right" type="Number" integer="true" static="true" />
    /// <field name="Bottom" type="Number" integer="true" static="true" />
    /// <field name="Left" type="Number" integer="true" static="true" />
}
AjaxControlToolkit.BoxSide.prototype = {
    Top : 0,
    Right : 1,
    Bottom : 2,
    Left : 3
}
AjaxControlToolkit.BoxSide.registerEnum("AjaxControlToolkit.BoxSide", false);


AjaxControlToolkit._CommonToolkitScripts = function() {
    /// <summary>
    /// The _CommonToolkitScripts class contains functionality utilized across a number
    /// of controls (but not universally)
    /// </summary>
    /// <remarks>
    /// You should not create new instances of _CommonToolkitScripts.  Instead you should use the shared instance CommonToolkitScripts (or AjaxControlToolkit.CommonToolkitScripts).
    /// </remarks>
}
AjaxControlToolkit._CommonToolkitScripts.prototype = {
    // The order of these lookup tables is directly linked to the BoxSide enum defined above
    _borderStyleNames : ["borderTopStyle","borderRightStyle","borderBottomStyle","borderLeftStyle"],
    _borderWidthNames : ["borderTopWidth", "borderRightWidth", "borderBottomWidth", "borderLeftWidth"],
    _paddingWidthNames : ["paddingTop", "paddingRight", "paddingBottom", "paddingLeft"],
    _marginWidthNames : ["marginTop", "marginRight", "marginBottom", "marginLeft"],

    getCurrentStyle : function(element, attribute, defaultValue) {
        /// <summary>
        /// CommonToolkitScripts.getCurrentStyle is used to compute the value of a style attribute on an
        /// element that is currently being displayed.  This is especially useful for scenarios where
        /// several CSS classes and style attributes are merged, or when you need information about the
        /// size of an element (such as its padding or margins) that is not exposed in any other fashion.
        /// </summary>
        /// <param name="element" type="Sys.UI.DomElement" domElement="true">
        /// Live DOM element to check style of
        /// </param>
        /// <param name="attribute" type="String">
        /// The style attribute's name is expected to be in a camel-cased form that you would use when
        /// accessing a JavaScript property instead of the hyphenated form you would use in a CSS
        /// stylesheet (i.e. it should be "backgroundColor" and not "background-color").
        /// </param>
        /// <param name="defaultValue" type="Object" mayBeNull="true" optional="true">
        /// In the event of a problem (i.e. a null element or an attribute that cannot be found) we
        /// return this object (or null if none if not specified).
        /// </param>
        /// <returns type="Object">
        /// Current style of the element's attribute
        /// </returns>

        var currentValue = null;
        if (element) {
            if (element.currentStyle) {
                currentValue = element.currentStyle[attribute];
            } else if (document.defaultView && document.defaultView.getComputedStyle) {
                var style = document.defaultView.getComputedStyle(element, null);
                if (style) {
                    currentValue = style[attribute];
                }
            }
            
            if (!currentValue && element.style.getPropertyValue) {
                currentValue = element.style.getPropertyValue(attribute);
            }
            else if (!currentValue && element.style.getAttribute) {
                currentValue = element.style.getAttribute(attribute);
            }       
        }
        
        if ((!currentValue || currentValue == "" || typeof(currentValue) === 'undefined')) {
            if (typeof(defaultValue) != 'undefined') {
                currentValue = defaultValue;
            }
            else {
                currentValue = null;
            }
        }   
        return currentValue;  
    },

    getInheritedBackgroundColor : function(element) {
        /// <summary>
        /// CommonToolkitScripts.getInheritedBackgroundColor provides the ability to get the displayed
        /// background-color of an element.  In most cases calling CommonToolkitScripts.getCurrentStyle
        /// won't do the job because it will return "transparent" unless the element has been given a
        /// specific background color.  This function will walk up the element's parents until it finds
        /// a non-transparent color.  If we get all the way to the top of the document or have any other
        /// problem finding a color, we will return the default value '#FFFFFF'.  This function is
        /// especially important when we're using opacity in IE (because ClearType will make text look
        /// horrendous if you fade it with a transparent background color).
        /// </summary>
        /// <param name="element" type="Sys.UI.DomElement" domElement="true">
        /// Live DOM element to get the background color of
        /// </param>
        /// <returns type="String">
        /// Background color of the element
        /// </returns>
        
        if (!element) return '#FFFFFF';
        var background = this.getCurrentStyle(element, 'backgroundColor');
        try {
            while (!background || background == '' || background == 'transparent' || background == 'rgba(0, 0, 0, 0)') {
                element = element.parentNode;
                if (!element) {
                    background = '#FFFFFF';
                } else {
                    background = this.getCurrentStyle(element, 'backgroundColor');
                }
            }
        } catch(ex) {
            background = '#FFFFFF';
        }
        return background;
    },

    getLocation : function(element) {
    /// <summary>Gets the coordinates of a DOM element.</summary>
    /// <param name="element" domElement="true"/>
    /// <returns type="Sys.UI.Point">
    ///   A Point object with two fields, x and y, which contain the pixel coordinates of the element.
    /// </returns>

    // workaround for an issue in getLocation where it will compute the location of the document element.
    // this will return an offset if scrolled.
    //
    if (element === document.documentElement) {
        return new Sys.UI.Point(0,0);
    }

    // Workaround for IE6 bug in getLocation (also required patching getBounds - remove that fix when this is removed)
    if (Sys.Browser.agent == Sys.Browser.InternetExplorer && Sys.Browser.version < 7) {
        if (element.window === element || element.nodeType === 9 || !element.getClientRects || !element.getBoundingClientRect) return new Sys.UI.Point(0,0);

        // Get the first bounding rectangle in screen coordinates
        var screenRects = element.getClientRects();
        if (!screenRects || !screenRects.length) {
            return new Sys.UI.Point(0,0);
        }
        var first = screenRects[0];

        // Delta between client coords and screen coords
        var dLeft = 0;
        var dTop = 0;

        var inFrame = false;
        try {
            inFrame = element.ownerDocument.parentWindow.frameElement;
        } catch(ex) {
            // If accessing the frameElement fails, a frame is probably in a different
            // domain than its parent - and we still want to do the calculation below
            inFrame = true;
        }

        // If we're in a frame, get client coordinates too so we can compute the delta
        if (inFrame) {
            // Get the bounding rectangle in client coords
            var clientRect = element.getBoundingClientRect();
            if (!clientRect) {
                return new Sys.UI.Point(0,0);
            }

            // Find the minima in screen coords
            var minLeft = first.left;
            var minTop = first.top;
            for (var i = 1; i < screenRects.length; i++) {
                var r = screenRects[i];
                if (r.left < minLeft) {
                    minLeft = r.left;
                }
                if (r.top < minTop) {
                    minTop = r.top;
                }
            }

            // Compute the delta between screen and client coords
            dLeft = minLeft - clientRect.left;
            dTop = minTop - clientRect.top;
        }

        // Subtract 2px, the border of the viewport (It can be changed in IE6 by applying a border style to the HTML element,
        // but this is not supported by ASP.NET AJAX, and it cannot be changed in IE7.), and also subtract the delta between
        // screen coords and client coords
        var ownerDocument = element.document.documentElement;
        return new Sys.UI.Point(first.left - 2 - dLeft + ownerDocument.scrollLeft, first.top - 2 - dTop + ownerDocument.scrollTop);
    }

    return Sys.UI.DomElement.getLocation(element);
},

    setLocation : function(element, point) {
        /// <summary>
        /// Sets the current location for an element.
        /// </summary>
        /// <param name="element" type="Sys.UI.DomElement" domElement="true">
        /// DOM element
        /// </param>
        /// <param name="point" type="Object">
        /// Point object (of the form {x,y})
        /// </param>
        /// <remarks>
        /// This method does not attempt to set the positioning mode of an element.
        /// The position is relative from the elements nearest position:relative or
        /// position:absolute element.
        /// </remarks>
        Sys.UI.DomElement.setLocation(element, point.x, point.y);
    },
    
    getContentSize : function(element) {
        /// <summary>
        /// Gets the "content-box" size of an element.
        /// </summary>
        /// <param name="element" type="Sys.UI.DomElement" domElement="true">
        /// DOM element
        /// </param>
        /// <returns type="Object">
        /// Size of the element (in the form {width,height})
        /// </returns>
        /// <remarks>
        /// The "content-box" is the size of the content area *inside* of the borders and
        /// padding of an element. The "content-box" size does not include the margins around
        /// the element.
        /// </remarks>
        
        if (!element) {
            throw Error.argumentNull('element');
        }
        var size = this.getSize(element);
        var borderBox = this.getBorderBox(element);
        var paddingBox = this.getPaddingBox(element);
        return {
            width :  size.width - borderBox.horizontal - paddingBox.horizontal,
            height : size.height - borderBox.vertical - paddingBox.vertical
        }
    },

    getSize : function(element) {
        /// <summary>
        /// Gets the "border-box" size of an element.
        /// </summary>
        /// <param name="element" type="Sys.UI.DomElement" domElement="true">
        /// DOM element
        /// </param>
        /// <returns type="Object">
        /// Size of the element (in the form {width,height})
        /// </returns>
        /// <remarks>
        /// The "border-box" is the size of the content area *outside* of the borders and
        /// padding of an element.  The "border-box" size does not include the margins around
        /// the element.
        /// </remarks>
        
        if (!element) {
            throw Error.argumentNull('element');
        }
        return {
            width:  element.offsetWidth,
            height: element.offsetHeight
        };
    },
    
    setContentSize : function(element, size) {
        /// <summary>
        /// Sets the "content-box" size of an element.
        /// </summary>
        /// <param name="element" type="Sys.UI.DomElement" domElement="true">
        /// DOM element
        /// </param>
        /// <param name="size" type="Object">
        /// Size of the element (in the form {width,height})
        /// </param>
        /// <remarks>
        /// The "content-box" is the size of the content area *inside* of the borders and
        /// padding of an element. The "content-box" size does not include the margins around
        /// the element.
        /// </remarks>
        
        if (!element) {
            throw Error.argumentNull('element');
        }
        if (!size) {
            throw Error.argumentNull('size');
        }
        // FF respects -moz-box-sizing css extension, so adjust the box size for the border-box
        if(this.getCurrentStyle(element, 'MozBoxSizing') == 'border-box' || this.getCurrentStyle(element, 'BoxSizing') == 'border-box') {
            var borderBox = this.getBorderBox(element);
            var paddingBox = this.getPaddingBox(element);
            size = {
                width: size.width + borderBox.horizontal + paddingBox.horizontal,
                height: size.height + borderBox.vertical + paddingBox.vertical
            };
        }
        element.style.width = size.width.toString() + 'px';
        element.style.height = size.height.toString() + 'px';
    },
    
    setSize : function(element, size) {
        /// <summary>
        /// Sets the "border-box" size of an element.
        /// </summary>
        /// <remarks>
        /// The "border-box" is the size of the content area *outside* of the borders and 
        /// padding of an element.  The "border-box" size does not include the margins around
        /// the element.
        /// </remarks>
        /// <param name="element" type="Sys.UI.DomElement">DOM element</param>
        /// <param name="size" type="Object">Size of the element (in the form {width,height})</param>
        /// <returns />
        
        if (!element) {
            throw Error.argumentNull('element');
        }
        if (!size) {
            throw Error.argumentNull('size');
        }
        var borderBox = this.getBorderBox(element);
        var paddingBox = this.getPaddingBox(element);
        var contentSize = {
            width:  size.width - borderBox.horizontal - paddingBox.horizontal,
            height: size.height - borderBox.vertical - paddingBox.vertical
        };
        this.setContentSize(element, contentSize);
    },
    
    getBounds : function(element) {
        /// <summary>Gets the coordinates, width and height of an element.</summary>
        /// <param name="element" domElement="true"/>
        /// <returns type="Sys.UI.Bounds">
        ///   A Bounds object with four fields, x, y, width and height, which contain the pixel coordinates,
        ///   width and height of the element.
        /// </returns>
        /// <remarks>
        ///   Use the CommonToolkitScripts version of getLocation to handle the workaround for IE6.  We can
        ///   remove the below implementation and just call Sys.UI.DomElement.getBounds when the other bug
        ///   is fixed.
        /// </remarks>
        
        var offset = $common.getLocation(element);
        return new Sys.UI.Bounds(offset.x, offset.y, element.offsetWidth || 0, element.offsetHeight || 0);
    }, 
    
    setBounds : function(element, bounds) {
        /// <summary>
        /// Sets the "border-box" bounds of an element
        /// </summary>
        /// <param name="element" type="Sys.UI.DomElement" domElement="true">
        /// DOM element
        /// </param>
        /// <param name="bounds" type="Object">
        /// Bounds of the element (of the form {x,y,width,height})
        /// </param>
        /// <remarks>
        /// The "border-box" is the size of the content area *outside* of the borders and
        /// padding of an element.  The "border-box" size does not include the margins around
        /// the element.
        /// </remarks>
        
        if (!element) {
            throw Error.argumentNull('element');
        }
        if (!bounds) {
            throw Error.argumentNull('bounds');
        }
        this.setSize(element, bounds);
        $common.setLocation(element, bounds);
    },
    
    getClientBounds : function() {
        /// <summary>
        /// Gets the width and height of the browser client window (excluding scrollbars)
        /// </summary>
        /// <returns type="Sys.UI.Bounds">
        /// Browser's client width and height
        /// </returns>

        var clientWidth;
        var clientHeight;
        switch(Sys.Browser.agent) {
            case Sys.Browser.InternetExplorer:
                clientWidth = document.documentElement.clientWidth;
                clientHeight = document.documentElement.clientHeight;
                break;
            case Sys.Browser.Safari:
                clientWidth = window.innerWidth;
                clientHeight = window.innerHeight;
                break;
            case Sys.Browser.Opera:
                clientWidth = Math.min(window.innerWidth, document.body.clientWidth);
                clientHeight = Math.min(window.innerHeight, document.body.clientHeight);
                break;
            default:  // Sys.Browser.Firefox, etc.
                clientWidth = Math.min(window.innerWidth, document.documentElement.clientWidth);
                clientHeight = Math.min(window.innerHeight, document.documentElement.clientHeight);
                break;
        }
        return new Sys.UI.Bounds(0, 0, clientWidth, clientHeight);
    },
   
    getMarginBox : function(element) {
        /// <summary>
        /// Gets the entire margin box sizes.
        /// </summary>
        /// <param name="element" type="Sys.UI.DomElement" domElement="true">
        /// DOM element
        /// </param>
        /// <returns type="Object">
        /// Element's margin box sizes (of the form {top,left,bottom,right,horizontal,vertical})
        /// </returns>
        
        if (!element) {
            throw Error.argumentNull('element');
        }
        var box = {
            top: this.getMargin(element, AjaxControlToolkit.BoxSide.Top),
            right: this.getMargin(element, AjaxControlToolkit.BoxSide.Right),
            bottom: this.getMargin(element, AjaxControlToolkit.BoxSide.Bottom),
            left: this.getMargin(element, AjaxControlToolkit.BoxSide.Left)
        };
        box.horizontal = box.left + box.right;
        box.vertical = box.top + box.bottom;
        return box;
    },
    
    getBorderBox : function(element) {
        /// <summary>
        /// Gets the entire border box sizes.
        /// </summary>
        /// <param name="element" type="Sys.UI.DomElement" domElement="true">
        /// DOM element
        /// </param>
        /// <returns type="Object">
        /// Element's border box sizes (of the form {top,left,bottom,right,horizontal,vertical})
        /// </returns>
        
        if (!element) {
            throw Error.argumentNull('element');
        }
        var box = {
            top: this.getBorderWidth(element, AjaxControlToolkit.BoxSide.Top),
            right: this.getBorderWidth(element, AjaxControlToolkit.BoxSide.Right),
            bottom: this.getBorderWidth(element, AjaxControlToolkit.BoxSide.Bottom),
            left: this.getBorderWidth(element, AjaxControlToolkit.BoxSide.Left)
        };
        box.horizontal = box.left + box.right;
        box.vertical = box.top + box.bottom;
        return box;
    },
    
    getPaddingBox : function(element) {
        /// <summary>
        /// Gets the entire padding box sizes.
        /// </summary>
        /// <param name="element" type="Sys.UI.DomElement" domElement="true">
        /// DOM element
        /// </param>
        /// <returns type="Object">
        /// Element's padding box sizes (of the form {top,left,bottom,right,horizontal,vertical})
        /// </returns>
        
        if (!element) {
            throw Error.argumentNull('element');
        }
        var box = {
            top: this.getPadding(element, AjaxControlToolkit.BoxSide.Top),
            right: this.getPadding(element, AjaxControlToolkit.BoxSide.Right),
            bottom: this.getPadding(element, AjaxControlToolkit.BoxSide.Bottom),
            left: this.getPadding(element, AjaxControlToolkit.BoxSide.Left)
        };
        box.horizontal = box.left + box.right;
        box.vertical = box.top + box.bottom;
        return box;
    },
    
    isBorderVisible : function(element, boxSide) {
        /// <summary>
        /// Gets whether the current border style for an element on a specific boxSide is not 'none'.
        /// </summary>
        /// <param name="element" type="Sys.UI.DomElement" domElement="true">
        /// DOM element
        /// </param>
        /// <param name="boxSide" type="AjaxControlToolkit.BoxSide">
        /// Side of the element
        /// </param>
        /// <returns type="Boolean">
        /// Whether the current border style for an element on a specific boxSide is not 'none'.
        /// </returns>
        
        if (!element) {
            throw Error.argumentNull('element');
        }
        if(boxSide < AjaxControlToolkit.BoxSide.Top || boxSide > AjaxControlToolkit.BoxSide.Left) {
            throw Error.argumentOutOfRange(String.format(Sys.Res.enumInvalidValue, boxSide, 'AjaxControlToolkit.BoxSide'));
        }
        var styleName = this._borderStyleNames[boxSide];
        var styleValue = this.getCurrentStyle(element, styleName);
        return styleValue != "none";
    },
    
    getMargin : function(element, boxSide) {
        /// <summary>
        /// Gets the margin thickness of an element on a specific boxSide.
        /// </summary>
        /// <param name="element" type="Sys.UI.DomElement" domElement="true">
        /// DOM element
        /// </param>
        /// <param name="boxSide" type="AjaxControlToolkit.BoxSide">
        /// Side of the element
        /// </param>
        /// <returns type="Number" integer="true">
        /// Margin thickness on the element's specified side
        /// </returns>
        
        if (!element) {
            throw Error.argumentNull('element');
        }
        if(boxSide < AjaxControlToolkit.BoxSide.Top || boxSide > AjaxControlToolkit.BoxSide.Left) {
            throw Error.argumentOutOfRange(String.format(Sys.Res.enumInvalidValue, boxSide, 'AjaxControlToolkit.BoxSide'));
        }
        var styleName = this._marginWidthNames[boxSide];
        var styleValue = this.getCurrentStyle(element, styleName);
        try { return this.parsePadding(styleValue); } catch(ex) { return 0; }
    },

    getBorderWidth : function(element, boxSide) {
        /// <summary>
        /// Gets the border thickness of an element on a specific boxSide.
        /// </summary>
        /// <param name="element" type="Sys.UI.DomElement" domElement="true">
        /// DOM element
        /// </param>
        /// <param name="boxSide" type="AjaxControlToolkit.BoxSide">
        /// Side of the element
        /// </param>
        /// <returns type="Number" integer="true">
        /// Border thickness on the element's specified side
        /// </returns>
        
        if (!element) {
            throw Error.argumentNull('element');
        }
        if(boxSide < AjaxControlToolkit.BoxSide.Top || boxSide > AjaxControlToolkit.BoxSide.Left) {
            throw Error.argumentOutOfRange(String.format(Sys.Res.enumInvalidValue, boxSide, 'AjaxControlToolkit.BoxSide'));
        }
        if(!this.isBorderVisible(element, boxSide)) {
            return 0;
        }        
        var styleName = this._borderWidthNames[boxSide];    
        var styleValue = this.getCurrentStyle(element, styleName);
        return this.parseBorderWidth(styleValue);
    },
    
    getPadding : function(element, boxSide) {
        /// <summary>
        /// Gets the padding thickness of an element on a specific boxSide.
        /// </summary>
        /// <param name="element" type="Sys.UI.DomElement" domElement="true">
        /// DOM element
        /// </param>
        /// <param name="boxSide" type="AjaxControlToolkit.BoxSide">
        /// Side of the element
        /// </param>
        /// <returns type="Number" integer="true">
        /// Padding on the element's specified side
        /// </returns>
        
        if (!element) {
            throw Error.argumentNull('element');
        }
        if(boxSide < AjaxControlToolkit.BoxSide.Top || boxSide > AjaxControlToolkit.BoxSide.Left) {
            throw Error.argumentOutOfRange(String.format(Sys.Res.enumInvalidValue, boxSide, 'AjaxControlToolkit.BoxSide'));
        }
        var styleName = this._paddingWidthNames[boxSide];
        var styleValue = this.getCurrentStyle(element, styleName);
        return this.parsePadding(styleValue);
    },
    
    parseBorderWidth : function(borderWidth) {
        /// <summary>
        /// Parses a border-width string into a pixel size
        /// </summary>
        /// <param name="borderWidth" type="String" mayBeNull="true">
        /// Type of border ('thin','medium','thick','inherit',px unit,null,'')
        /// </param>
        /// <returns type="Number" integer="true">
        /// Number of pixels in the border-width
        /// </returns>
        if (!this._borderThicknesses) {
            
            // Populate the borderThicknesses lookup table
            var borderThicknesses = { };
            var div0 = document.createElement('div');
            div0.style.visibility = 'hidden';
            div0.style.position = 'absolute';
            div0.style.fontSize = '1px';
            document.body.appendChild(div0)
            var div1 = document.createElement('div');
            div1.style.height = '0px';
            div1.style.overflow = 'hidden';
            div0.appendChild(div1);
            var base = div0.offsetHeight;
            div1.style.borderTop = 'solid black';
            div1.style.borderTopWidth = 'thin';
            borderThicknesses['thin'] = div0.offsetHeight - base;
            div1.style.borderTopWidth = 'medium';
            borderThicknesses['medium'] = div0.offsetHeight - base;
            div1.style.borderTopWidth = 'thick';
            borderThicknesses['thick'] = div0.offsetHeight - base;
            div0.removeChild(div1);
            document.body.removeChild(div0);
            this._borderThicknesses = borderThicknesses;
        }
        
        if (borderWidth) {
            switch(borderWidth) {
                case 'thin':
                case 'medium':
                case 'thick':
                    return this._borderThicknesses[borderWidth];
                case 'inherit':
                    return 0;
            }
            var unit = this.parseUnit(borderWidth);
            Sys.Debug.assert(unit.type == 'px', String.format(AjaxControlToolkit.Resources.Common_InvalidBorderWidthUnit, unit.type));
            return unit.size;
        }
        return 0;
    },
    
    parsePadding : function(padding) {
        /// <summary>
        /// Parses a padding string into a pixel size
        /// </summary>
        /// <param name="padding" type="String" mayBeNull="true">
        /// Padding to parse ('inherit',px unit,null,'')
        /// </param>
        /// <returns type="Number" integer="true">
        /// Number of pixels in the padding
        /// </returns>
        
        if(padding) {
            if(padding == 'inherit') {
                return 0;
            }
            var unit = this.parseUnit(padding);
            Sys.Debug.assert(unit.type == 'px', String.format(AjaxControlToolkit.Resources.Common_InvalidPaddingUnit, unit.type));
            return unit.size;
        }
        return 0;
    },
    
    parseUnit : function(value) {
        /// <summary>
        /// Parses a unit string into a unit object
        /// </summary>
        /// <param name="value" type="String" mayBeNull="true">
        /// Value to parse (of the form px unit,% unit,em unit,...)
        /// </param>
        /// <returns type="Object">
        /// Parsed unit (of the form {size,type})
        /// </returns>
        
        if (!value) {
            throw Error.argumentNull('value');
        }
        
        value = value.trim().toLowerCase();
        var l = value.length;
        var s = -1;
        for(var i = 0; i < l; i++) {
            var ch = value.substr(i, 1);
            if((ch < '0' || ch > '9') && ch != '-' && ch != '.' && ch != ',') {
                break;
            }
            s = i;
        }
        if(s == -1) {
            throw Error.create(AjaxControlToolkit.Resources.Common_UnitHasNoDigits);
        }
        var type;
        var size;
        if(s < (l - 1)) {
            type = value.substring(s + 1).trim();
        } else {
            type = 'px';
        }
        size = parseFloat(value.substr(0, s + 1));
        if(type == 'px') {
            size = Math.floor(size);
        }
        return { 
            size: size,
            type: type
        };
    },
    
    getElementOpacity : function(element) {
        /// <summary>
        /// Get the element's opacity
        /// </summary>
        /// <param name="element" type="Sys.UI.DomElement" domElement="true">
        /// Element
        /// </param>
        /// <returns type="Number">
        /// Opacity of the element
        /// </returns>
        
        if (!element) {
            throw Error.argumentNull('element');
        }
        
        var hasOpacity = false;
        var opacity;
        
        if (element.filters) {
            var filters = element.filters;
            if (filters.length !== 0) {
                var alphaFilter = filters['DXImageTransform.Microsoft.Alpha'];
                if (alphaFilter) {
                    opacity = alphaFilter.opacity / 100.0;
                    hasOpacity = true;
                }
            }
        }
        else {
            opacity = this.getCurrentStyle(element, 'opacity', 1);
            hasOpacity = true;
        }
        
        if (hasOpacity === false) {
            return 1.0;
        }
        return parseFloat(opacity);
    },

    setElementOpacity : function(element, value) {
        /// <summary>
        /// Set the element's opacity
        /// </summary>
        /// <param name="element" type="Sys.UI.DomElement" domElement="true">
        /// Element
        /// </param>
        /// <param name="value" type="Number">
        /// Opacity of the element
        /// </param>
        
        if (!element) {
            throw Error.argumentNull('element');
        }
        
        if (element.filters) {
            var filters = element.filters;
            var createFilter = true;
            if (filters.length !== 0) {
                var alphaFilter = filters['DXImageTransform.Microsoft.Alpha'];
                if (alphaFilter) {
                    createFilter = false;
                    alphaFilter.opacity = value * 100;
                }
            }
            if (createFilter) {
                element.style.filter = 'progid:DXImageTransform.Microsoft.Alpha(opacity=' + (value * 100) + ')';
            }
        }
        else {
            element.style.opacity = value;
        }
    },
    
    getVisible : function(element) {
        /// <summary>
        /// Check if an element is visible
        /// </summary>
        /// <param name="element" type="Sys.UI.DomElement" domElement="true">
        /// Element
        /// </param>
        /// <returns type="Boolean" mayBeNull="false">
        /// True if the element is visible, false otherwise
        /// </returns>
        
        // Note: reference to CommonToolkitScripts must be left intact (i.e. don't
        // replace with 'this') because this function will be aliased
        
        return (element &&
                ("none" != $common.getCurrentStyle(element, "display")) &&
                ("hidden" != $common.getCurrentStyle(element, "visibility")));
    },
    
    setVisible : function(element, value) {
        /// <summary>
        /// Check if an element is visible
        /// </summary>
        /// <param name="element" type="Sys.UI.DomElement" domElement="true">
        /// Element
        /// </param>
        /// <param name="value" type="Boolean" mayBeNull="false">
        /// True to make the element visible, false to hide it
        /// </param>
        
        // Note: reference to CommonToolkitScripts must be left intact (i.e. don't
        // replace with 'this') because this function will be aliased
        
        if (element && value != $common.getVisible(element)) {
            if (value) {
                if (element.style.removeAttribute) {
                    element.style.removeAttribute("display");
                } else {
                   element.style.removeProperty("display");
                }
            } else {
                element.style.display = 'none';
            }
            element.style.visibility = value ? 'visible' : 'hidden';
        }
    },
    
    resolveFunction : function(value) {
        /// <summary>
        /// Returns a function reference that corresponds to the provided value
        /// </summary>
        /// <param name="value" type="Object">
        /// The value can either be a Function, the name of a function (that can be found using window['name']),
        /// or an expression that evaluates to a function.
        /// </param>
        /// <returns type="Function">
        /// Reference to the function, or null if not found
        /// </returns>
        
        if (value) {
            if (value instanceof Function) {
                return value;
            } else if (String.isInstanceOfType(value) && value.length > 0) {
                var func;
                if ((func = window[value]) instanceof Function) {
                    return func;
                } else if ((func = eval(value)) instanceof Function) {
                    return func;
                }
            }
        }
        return null;
    },

    addCssClasses : function(element, classNames) {
        /// <summary>
        /// Adds multiple css classes to a DomElement
        /// </summary>
        /// <param name="element" type="Sys.UI.DomElement">The element to modify</param>
        /// <param name="classNames" type="Array">The class names to add</param>
        
        for(var i = 0; i < classNames.length; i++) {
            Sys.UI.DomElement.addCssClass(element, classNames[i]);
        }
    },
    removeCssClasses : function(element, classNames) {
        /// <summary>
        /// Removes multiple css classes to a DomElement
        /// </summary>
        /// <param name="element" type="Sys.UI.DomElement">The element to modify</param>
        /// <param name="classNames" type="Array">The class names to remove</param>
        
        for(var i = 0; i < classNames.length; i++) {
            Sys.UI.DomElement.removeCssClass(element, classNames[i]);
        }
    },
    setStyle : function(element, style) {
        /// <summary>
        /// Sets the style of the element using the supplied style template object
        /// </summary>
        /// <param name="element" type="Sys.UI.DomElement">The element to modify</param>
        /// <param name="style" type="Object">The template</param>

        $common.applyProperties(element.style, style);
    },
    removeHandlers : function(element, events) {
        /// <summary>
        /// Removes a set of event handlers from an element
        /// </summary>
        /// <param name="element" type="Sys.UI.DomElement">The element to modify</param>
        /// <param name="events" type="Object">The template object that contains event names and delegates</param>
        /// <remarks>
        /// This is NOT the same as $clearHandlers which removes all delegates from a DomElement.  This rather removes select delegates 
        /// from a specified element and has a matching signature as $addHandlers
        /// </remarks>
        for (var name in events) {
            $removeHandler(element, name, events[name]);
        }
    },
    
    overlaps : function(r1, r2) {
        /// <summary>
        /// Determine if two rectangles overlap
        /// </summary>
        /// <param name="r1" type="Object">
        /// Rectangle
        /// </param>
        /// <param name="r2" type="Object">
        /// Rectangle
        /// </param>
        /// <returns type="Boolean">
        /// True if the rectangles overlap, false otherwise
        /// </returns>
        
         return r1.x < (r2.x + r2.width)
                && r2.x < (r1.x + r1.width)
                && r1.y < (r2.y + r2.height)
                && r2.y < (r1.y + r1.height);
    },
    
    containsPoint : function(rect, x, y) {
        /// <summary>
        /// Tests whether a point (x,y) is contained within a rectangle
        /// </summary>
        /// <param name="rect" type="Object">The rectangle</param>
        /// <param name="x" type="Number">The x coordinate of the point</param>
        /// <param name="y" type="Number">The y coordinate of the point</param>
        
        return x >= rect.x && x < (rect.x + rect.width) && y >= rect.y && y < (rect.y + rect.height);
    },

    isKeyDigit : function(keyCode) { 
        /// <summary>
        /// Gets whether the supplied key-code is a digit
        /// </summary>
        /// <param name="keyCode" type="Number" integer="true">The key code of the event (from Sys.UI.DomEvent)</param>
        /// <returns type="Boolean" />

        return (0x30 <= keyCode && keyCode <= 0x39); 
    },
    
    isKeyNavigation : function(keyCode) { 
        /// <summary>
        /// Gets whether the supplied key-code is a navigation key
        /// </summary>
        /// <param name="keyCode" type="Number" integer="true">The key code of the event (from Sys.UI.DomEvent)</param>
        /// <returns type="Boolean" />

        return (Sys.UI.Key.left <= keyCode && keyCode <= Sys.UI.Key.down); 
    },
    
    padLeft : function(text, size, ch, truncate) { 
        /// <summary>
        /// Pads the left hand side of the supplied text with the specified pad character up to the requested size
        /// </summary>
        /// <param name="text" type="String">The text to pad</param>
        /// <param name="size" type="Number" integer="true" optional="true">The size to pad the text (default is 2)</param>
        /// <param name="ch" type="String" optional="true">The single character to use as the pad character (default is ' ')</param>
        /// <param name="truncate" type="Boolean" optional="true">Whether to truncate the text to size (default is false)</param>
        
        return $common._pad(text, size || 2, ch || ' ', 'l', truncate || false); 
    },
    
    padRight : function(text, size, ch, truncate) { 
        /// <summary>
        /// Pads the right hand side of the supplied text with the specified pad character up to the requested size
        /// </summary>
        /// <param name="text" type="String">The text to pad</param>
        /// <param name="size" type="Number" integer="true" optional="true">The size to pad the text (default is 2)</param>
        /// <param name="ch" type="String" optional="true">The single character to use as the pad character (default is ' ')</param>
        /// <param name="truncate" type="Boolean" optional="true">Whether to truncate the text to size (default is false)</param>

        return $common._pad(text, size || 2, ch || ' ', 'r', truncate || false); 
    },
    
    _pad : function(text, size, ch, side, truncate) {
        /// <summary>
        /// Pads supplied text with the specified pad character up to the requested size
        /// </summary>
        /// <param name="text" type="String">The text to pad</param>
        /// <param name="size" type="Number" integer="true">The size to pad the text</param>
        /// <param name="ch" type="String">The single character to use as the pad character</param>
        /// <param name="side" type="String">Either 'l' or 'r' to siginfy whether to pad the Left or Right side respectively</param>
        /// <param name="truncate" type="Boolean">Whether to truncate the text to size</param>

        text = text.toString();
        var length = text.length;
        var builder = new Sys.StringBuilder();
        if (side == 'r') {
            builder.append(text);
        } 
        while (length < size) {
            builder.append(ch);
            length++;
        }
        if (side == 'l') {
            builder.append(text);
        }
        var result = builder.toString();
        if (truncate && result.length > size) {
            if (side == 'l') {
                result = result.substr(result.length - size, size);
            } else {
                result = result.substr(0, size);
            }
        }
        return result;
    },
    
    __DOMEvents : {
        focusin : { eventGroup : "UIEvents", init : function(e, p) { e.initUIEvent("focusin", true, false, window, 1); } },
        focusout : { eventGroup : "UIEvents", init : function(e, p) { e.initUIEvent("focusout", true, false, window, 1); } },
        activate : { eventGroup : "UIEvents", init : function(e, p) { e.initUIEvent("activate", true, true, window, 1); } },
        focus : { eventGroup : "UIEvents", init : function(e, p) { e.initUIEvent("focus", false, false, window, 1); } },
        blur : { eventGroup : "UIEvents", init : function(e, p) { e.initUIEvent("blur", false, false, window, 1); } },
        click : { eventGroup : "MouseEvents", init : function(e, p) { e.initMouseEvent("click", true, true, window, 1, p.screenX || 0, p.screenY || 0, p.clientX || 0, p.clientY || 0, p.ctrlKey || false, p.altKey || false, p.shiftKey || false, p.metaKey || false, p.button || 0, p.relatedTarget || null); } },
        dblclick : { eventGroup : "MouseEvents", init : function(e, p) { e.initMouseEvent("click", true, true, window, 2, p.screenX || 0, p.screenY || 0, p.clientX || 0, p.clientY || 0, p.ctrlKey || false, p.altKey || false, p.shiftKey || false, p.metaKey || false, p.button || 0, p.relatedTarget || null); } },
        mousedown : { eventGroup : "MouseEvents", init : function(e, p) { e.initMouseEvent("mousedown", true, true, window, 1, p.screenX || 0, p.screenY || 0, p.clientX || 0, p.clientY || 0, p.ctrlKey || false, p.altKey || false, p.shiftKey || false, p.metaKey || false, p.button || 0, p.relatedTarget || null); } },
        mouseup : { eventGroup : "MouseEvents", init : function(e, p) { e.initMouseEvent("mouseup", true, true, window, 1, p.screenX || 0, p.screenY || 0, p.clientX || 0, p.clientY || 0, p.ctrlKey || false, p.altKey || false, p.shiftKey || false, p.metaKey || false, p.button || 0, p.relatedTarget || null); } },
        mouseover : { eventGroup : "MouseEvents", init : function(e, p) { e.initMouseEvent("mouseover", true, true, window, 1, p.screenX || 0, p.screenY || 0, p.clientX || 0, p.clientY || 0, p.ctrlKey || false, p.altKey || false, p.shiftKey || false, p.metaKey || false, p.button || 0, p.relatedTarget || null); } },
        mousemove : { eventGroup : "MouseEvents", init : function(e, p) { e.initMouseEvent("mousemove", true, true, window, 1, p.screenX || 0, p.screenY || 0, p.clientX || 0, p.clientY || 0, p.ctrlKey || false, p.altKey || false, p.shiftKey || false, p.metaKey || false, p.button || 0, p.relatedTarget || null); } },
        mouseout : { eventGroup : "MouseEvents", init : function(e, p) { e.initMouseEvent("mousemove", true, true, window, 1, p.screenX || 0, p.screenY || 0, p.clientX || 0, p.clientY || 0, p.ctrlKey || false, p.altKey || false, p.shiftKey || false, p.metaKey || false, p.button || 0, p.relatedTarget || null); } },
        load : { eventGroup : "HTMLEvents", init : function(e, p) { e.initEvent("load", false, false); } },
        unload : { eventGroup : "HTMLEvents", init : function(e, p) { e.initEvent("unload", false, false); } },
        select : { eventGroup : "HTMLEvents", init : function(e, p) { e.initEvent("select", true, false); } },
        change : { eventGroup : "HTMLEvents", init : function(e, p) { e.initEvent("change", true, false); } },
        submit : { eventGroup : "HTMLEvents", init : function(e, p) { e.initEvent("submit", true, true); } },
        reset : { eventGroup : "HTMLEvents", init : function(e, p) { e.initEvent("reset", true, false); } },
        resize : { eventGroup : "HTMLEvents", init : function(e, p) { e.initEvent("resize", true, false); } },
        scroll : { eventGroup : "HTMLEvents", init : function(e, p) { e.initEvent("scroll", true, false); } }
    },
    
    tryFireRawEvent : function(element, rawEvent) {
        /// <summary>
        /// Attempts to fire a raw DOM event on an element
        /// </summary>
        /// <param name="element" type="Sys.UI.DomElement">The element to fire the event</param>
        /// <param name="rawEvent" type="Object">The raw DOM event object to fire. Must not be Sys.UI.DomEvent</param>
        /// <returns type="Boolean">True if the event was successfully fired, otherwise false</returns>
        
        try {
            if (element.fireEvent) {
                element.fireEvent("on" + rawEvent.type, rawEvent);
                return true;
            } else if (element.dispatchEvent) {
                element.dispatchEvent(rawEvent);
                return true;
            }
        } catch (e) {
        }
        return false;
    },    

    tryFireEvent : function(element, eventName, properties) {
        /// <summary>
        /// Attempts to fire a DOM event on an element
        /// </summary>
        /// <param name="element" type="Sys.UI.DomElement">The element to fire the event</param>
        /// <param name="eventName" type="String">The name of the event to fire (without an 'on' prefix)</param>
        /// <param name="properties" type="Object">Properties to add to the event</param>
        /// <returns type="Boolean">True if the event was successfully fired, otherwise false</returns>
        
        try {
            if (document.createEventObject) {
                var e = document.createEventObject();
                $common.applyProperties(e, properties || {});
                element.fireEvent("on" + eventName, e);
                return true;
            } else if (document.createEvent) {
                var def = $common.__DOMEvents[eventName];
                if (def) {
                    var e = document.createEvent(def.eventGroup);
                    def.init(e, properties || {});
                    element.dispatchEvent(e);
                    return true;
                }
            }
        } catch (e) {
        }
        return false;
    },

    wrapElement : function(innerElement, newOuterElement, newInnerParentElement) {
        /// <summary>
        /// Wraps an inner element with a new outer element at the same DOM location as the inner element
        /// </summary>
        /// <param name="innerElement" type="Sys.UI.DomElement">The element to be wrapped</param>
        /// <param name="newOuterElement" type="Sys.UI.DomElement">The new parent for the element</param>
        /// <returns />
        
        var parent = innerElement.parentNode;
        parent.replaceChild(newOuterElement, innerElement);        
        (newInnerParentElement || newOuterElement).appendChild(innerElement);
    },

    unwrapElement : function(innerElement, oldOuterElement) {
        /// <summary>
        /// Unwraps an inner element from an outer element at the same DOM location as the outer element
        /// </summary>
        /// <param name="innerElement" type="Sys.UI.DomElement">The element to be wrapped</param>
        /// <param name="newOuterElement" type="Sys.UI.DomElement">The new parent for the element</param>
        /// <returns />

        var parent = oldOuterElement.parentNode;
        if (parent != null) {
            $common.removeElement(innerElement);
            parent.replaceChild(innerElement, oldOuterElement);
        }
    },
    
    removeElement : function(element) {
        /// <summary>
        /// Removes an element from the DOM tree
        /// </summary>
        /// <param name="element" type="Sys.UI.DomElement">The element to be removed</param>
        /// <returns />

        var parent = element.parentNode;
        if (parent != null) {
            parent.removeChild(element);
        }
    },
 
    applyProperties : function(target, properties) {
        /// <summary>
        /// Quick utility method to copy properties from a template object to a target object
        /// </summary>
        /// <param name="target" type="Object">The object to apply to</param>
        /// <param name="properties" type="Object">The template to copy values from</param>
        
        for (var p in properties) {
            var pv = properties[p];
            if (pv != null && Object.getType(pv)===Object) {
                var tv = target[p];
                $common.applyProperties(tv, pv);
            } else {
                target[p] = pv;
            }
        }
    },
        
    createElementFromTemplate : function(template, appendToParent, nameTable) {
        /// <summary>
        /// Creates an element for the current document based on a template object
        /// </summary>
        /// <param name="template" type="Object">The template from which to create the element</param>
        /// <param name="appendToParent" type="Sys.UI.DomElement" optional="true" mayBeNull="true">A DomElement under which to append this element</param>
        /// <param name="nameTable" type="Object" optional="true" mayBeNull="true">An object to use as the storage for the element using template.name as the key</param>
        /// <returns type="Sys.UI.DomElement" />
        /// <remarks>
        /// This method is useful if you find yourself using the same or similar DomElement constructions throughout a class.  You can even set the templates
        /// as static properties for a type to cut down on overhead.  This method is often called with a JSON style template:
        /// <code>
        /// var elt = $common.createElementFromTemplate({
        ///     nodeName : "div",
        ///     properties : {
        ///         style : {
        ///             height : "100px",
        ///             width : "100px",
        ///             backgroundColor : "white"
        ///         },
        ///         expandoAttribute : "foo"
        ///     },
        ///     events : {
        ///         click : function() { alert("foo"); },
        ///         mouseover : function() { elt.backgroundColor = "silver"; },
        ///         mouseout : function() { elt.backgroundColor = "white"; }
        ///     },
        ///     cssClasses : [ "class0", "class1" ],
        ///     visible : true,
        ///     opacity : .5
        /// }, someParent);
        /// </code>
        /// </remarks>
        
        // if we wish to override the name table we do so here
        if (typeof(template.nameTable)!='undefined') {
            var newNameTable = template.nameTable;
            if (String.isInstanceOfType(newNameTable)) {
                newNameTable = nameTable[newNameTable];
            }
            if (newNameTable != null) {
                nameTable = newNameTable;
            }
        }
        
        // get a name for the element in the nameTable
        var elementName = null;
        if (typeof(template.name)!=='undefined') {
            elementName = template.name;
        }
        
        // create or acquire the element
        var elt = document.createElement(template.nodeName);
        
        // if our element is named, add it to the name table
        if (typeof(template.name)!=='undefined' && nameTable) {
            nameTable[template.name] = elt;
        }
        
        // if we wish to supply a default parent we do so here
        if (typeof(template.parent)!=='undefined' && appendToParent == null) {
            var newParent = template.parent;
            if (String.isInstanceOfType(newParent)) {
                newParent = nameTable[newParent];
            }
            if (newParent != null) {
                appendToParent = newParent;
            }
        }
        
        // properties are applied as expando values to the element
        if (typeof(template.properties)!=='undefined' && template.properties != null) {
            $common.applyProperties(elt, template.properties);
        }
        
        // css classes are added to the element's className property
        if (typeof(template.cssClasses)!=='undefined' && template.cssClasses != null) {
            $common.addCssClasses(elt, template.cssClasses);
        }
        
        // events are added to the dom element using $addHandlers
        if (typeof(template.events)!=='undefined' && template.events != null) {
            $addHandlers(elt, template.events);
        }
        
        // if the element is visible or not its visibility is set
        if (typeof(template.visible)!=='undefined' && template.visible != null) {
            this.setVisible(elt, template.visible);
        }
        
        // if we have an appendToParent we will now append to it
        if (appendToParent) {
            appendToParent.appendChild(elt);
        }

        // if we have opacity, apply it
        if (typeof(template.opacity)!=='undefined' && template.opacity != null) {
            $common.setElementOpacity(elt, template.opacity);
        }
        
        // if we have child templates, process them
        if (typeof(template.children)!=='undefined' && template.children != null) {
            for (var i = 0; i < template.children.length; i++) {
                var subtemplate = template.children[i];
                $common.createElementFromTemplate(subtemplate, elt, nameTable);
            }
        }
        
        // if we have a content presenter for the element get it (the element itself is the default presenter for content)
        var contentPresenter = elt;
        if (typeof(template.contentPresenter)!=='undefined' && template.contentPresenter != null) {
            contentPresenter = nameTable[contentPresenter];
        }
        
        // if we have content, add it
        if (typeof(template.content)!=='undefined' && template.content != null) {
            var content = template.content;
            if (String.isInstanceOfType(content)) {
                content = nameTable[content];
            }
            if (content.parentNode) {
                $common.wrapElement(content, elt, contentPresenter);
            } else {
                contentPresenter.appendChild(content);
            }
        }
        
        // return the created element
        return elt;
    },
    
    prepareHiddenElementForATDeviceUpdate : function () {
        /// <summary>
        /// JAWS, an Assistive Technology device responds to updates to form elements 
        /// and refreshes its document buffer to what is showing live
        /// in the browser. To ensure that Toolkit controls that make XmlHttpRequests to
        /// retrieve content are useful to users with visual disabilities, we update a
        /// hidden form element to ensure that JAWS conveys what is in
        /// the browser. See this article for more details: 
        /// http://juicystudio.com/article/improving-ajax-applications-for-jaws-users.php
        /// This method creates a hidden input on the screen for any page that uses a Toolkit
        /// control that will perform an XmlHttpRequest.
        /// </summary>   
        var objHidden = document.getElementById('hiddenInputToUpdateATBuffer_CommonToolkitScripts');
        if (!objHidden) {
            var objHidden = document.createElement('input');
            objHidden.setAttribute('type', 'hidden');
            objHidden.setAttribute('value', '1');
            objHidden.setAttribute('id', 'hiddenInputToUpdateATBuffer_CommonToolkitScripts');
            objHidden.setAttribute('name', 'hiddenInputToUpdateATBuffer_CommonToolkitScripts');
            if ( document.forms[0] ) {
                document.forms[0].appendChild(objHidden);
            }
        }
    },
    
    updateFormToRefreshATDeviceBuffer : function () {
        /// <summary>
        /// Updates the hidden buffer to ensure that the latest document stream is picked up
        /// by the screen reader.
        /// </summary>
        var objHidden = document.getElementById('hiddenInputToUpdateATBuffer_CommonToolkitScripts');

        if (objHidden) {
            if (objHidden.getAttribute('value') == '1') {
                objHidden.setAttribute('value', '0');
            } else {
                objHidden.setAttribute('value', '1');
            }
        }
    }
}

// Create the singleton instance of the CommonToolkitScripts
var CommonToolkitScripts = AjaxControlToolkit.CommonToolkitScripts = new AjaxControlToolkit._CommonToolkitScripts();
var $common = CommonToolkitScripts;

// Alias functions that were moved from BlockingScripts into Common
Sys.UI.DomElement.getVisible = $common.getVisible;
Sys.UI.DomElement.setVisible = $common.setVisible;
Sys.UI.Control.overlaps = $common.overlaps;

AjaxControlToolkit._DomUtility = function() {
    /// <summary>
    /// Utility functions for manipulating the DOM
    /// </summary>
}
AjaxControlToolkit._DomUtility.prototype = {
    isDescendant : function(ancestor, descendant) {
        /// <summary>
        /// Whether the specified element is a descendant of the ancestor
        /// </summary>
        /// <param name="ancestor" type="Sys.UI.DomElement">Ancestor node</param>
        /// <param name="descendant" type="Sys.UI.DomElement">Possible descendant node</param>
        /// <returns type="Boolean" />
        
        for (var n = descendant.parentNode; n != null; n = n.parentNode) {
            if (n == ancestor) return true;
        }
        return false;
    },
    isDescendantOrSelf : function(ancestor, descendant) {
        /// <summary>
        /// Whether the specified element is a descendant of the ancestor or the same as the ancestor
        /// </summary>
        /// <param name="ancestor" type="Sys.UI.DomElement">Ancestor node</param>
        /// <param name="descendant" type="Sys.UI.DomElement">Possible descendant node</param>
        /// <returns type="Boolean" />

        if (ancestor === descendant) 
            return true;
        return AjaxControlToolkit.DomUtility.isDescendant(ancestor, descendant);
    },
    isAncestor : function(descendant, ancestor) {
        /// <summary>
        /// Whether the specified element is an ancestor of the descendant
        /// </summary>
        /// <param name="descendant" type="Sys.UI.DomElement">Descendant node</param>
        /// <param name="ancestor" type="Sys.UI.DomElement">Possible ancestor node</param>
        /// <returns type="Boolean" />

        return AjaxControlToolkit.DomUtility.isDescendant(ancestor, descendant);
    },
    isAncestorOrSelf : function(descendant, ancestor) {
        /// <summary>
        /// Whether the specified element is an ancestor of the descendant or the same as the descendant
        /// </summary>
        /// <param name="descendant" type="Sys.UI.DomElement">Descendant node</param>
        /// <param name="ancestor" type="Sys.UI.DomElement">Possible ancestor node</param>
        /// <returns type="Boolean" />
        
        if (descendant === ancestor)
            return true;
            
        return AjaxControlToolkit.DomUtility.isDescendant(ancestor, descendant);
    },
    isSibling : function(self, sibling) {
        /// <summary>
        /// Whether the specified element is a sibling of the self element
        /// </summary>
        /// <param name="self" type="Sys.UI.DomElement">Self node</param>
        /// <param name="sibling" type="Sys.UI.DomElement">Possible sibling node</param>
        /// <returns type="Boolean" />
        
        var parent = self.parentNode;
        for (var i = 0; i < parent.childNodes.length; i++) {
            if (parent.childNodes[i] == sibling) return true;
        }
        return false;
    }
}
AjaxControlToolkit._DomUtility.registerClass("AjaxControlToolkit._DomUtility");
AjaxControlToolkit.DomUtility = new AjaxControlToolkit._DomUtility();


AjaxControlToolkit.TextBoxWrapper = function(element) {
    /// <summary>
    /// Class that wraps a TextBox (INPUT type="text") to abstract-out the
    /// presence of a watermark (which may be visible to the user but which
    /// should never be read by script.
    /// </summary>
    /// <param name="element" type="Sys.UI.DomElement" domElement="true">
    /// The DOM element the behavior is associated with
    /// </param>
    AjaxControlToolkit.TextBoxWrapper.initializeBase(this, [element]);
    this._current = element.value;
    this._watermark = null;
    this._isWatermarked = false;
}

AjaxControlToolkit.TextBoxWrapper.prototype = {

    dispose : function() {
        /// <summary>
        /// Dispose the behavior
        /// </summary>
        this.get_element().AjaxControlToolkitTextBoxWrapper = null;
        AjaxControlToolkit.TextBoxWrapper.callBaseMethod(this, 'dispose');
    },

    get_Current : function() {
        /// <value type="String">
        /// Current value actually in the TextBox (i.e., TextBox.value)
        /// </value>
        this._current = this.get_element().value;
        return this._current;
    },
    set_Current : function(value) {
        this._current = value;
        this._updateElement();
    },

    get_Value : function() {
        /// <value type="String">
        /// Conceptual "value" of the TextBox - its contents if no watermark is present
        /// or "" if one is
        /// </value>
        if (this.get_IsWatermarked()) {
            return "";
        } else {
            return this.get_Current();
        }
    },
    set_Value : function(text) {
        this.set_Current(text);
        if (!text || (0 == text.length)) {
            if (null != this._watermark) {
                this.set_IsWatermarked(true);
            }
        } else {
            this.set_IsWatermarked(false);
        }
    },

    get_Watermark : function() {
        /// <value type="String">
        /// Text of the watermark for the TextBox
        /// </value>
        return this._watermark;
    },
    set_Watermark : function(value) {
        this._watermark = value;
        this._updateElement();
    },

    get_IsWatermarked : function() {
        /// <value type="Boolean">
        /// true iff the TextBox is watermarked
        /// </value>
        return this._isWatermarked;
    },
    set_IsWatermarked : function(isWatermarked) {
        if (this._isWatermarked != isWatermarked) {
            this._isWatermarked = isWatermarked;
            this._updateElement();
            this._raiseWatermarkChanged();
        }
    },

    _updateElement : function() {
        /// <summary>
        /// Updates the actual contents of the TextBox according to what should be there
        /// </summary>
        var element = this.get_element();
        if (this._isWatermarked) {
            if (element.value != this._watermark) {
                element.value = this._watermark;
            }
        } else {
            if (element.value != this._current) {
                element.value = this._current;
            }
        }
    },

    add_WatermarkChanged : function(handler) {
        /// <summary>
        /// Adds a handler for the WatermarkChanged event
        /// </summary>
        /// <param name="handler" type="Function">
        /// Handler
        /// </param>
        this.get_events().addHandler("WatermarkChanged", handler);
    },
    remove_WatermarkChanged : function(handler) {
        /// <summary>
        /// Removes a handler for the WatermarkChanged event
        /// </summary>
        /// <param name="handler" type="Function">
        /// Handler
        /// </param>
        this.get_events().removeHandler("WatermarkChanged", handler);
    },
    _raiseWatermarkChanged : function() {
        /// <summary>
        /// Raises the WatermarkChanged event
        /// </summary>
        var onWatermarkChangedHandler = this.get_events().getHandler("WatermarkChanged");
        if (onWatermarkChangedHandler) {
            onWatermarkChangedHandler(this, Sys.EventArgs.Empty);
        }
    }
}
AjaxControlToolkit.TextBoxWrapper.get_Wrapper = function(element) {
    /// <summary>
    /// Gets (creating one if necessary) the TextBoxWrapper for the specified TextBox
    /// </summary>
    /// <param name="element" type="Sys.UI.DomElement" domElement="true">
    /// TextBox for which to get the wrapper
    /// </param>
    /// <returns type="AjaxControlToolkit.TextBoxWrapper">
    /// TextBoxWrapper instance
    /// </returns>
    if (null == element.AjaxControlToolkitTextBoxWrapper) {
        element.AjaxControlToolkitTextBoxWrapper = new AjaxControlToolkit.TextBoxWrapper(element);
    }
    return element.AjaxControlToolkitTextBoxWrapper;
}
AjaxControlToolkit.TextBoxWrapper.registerClass('AjaxControlToolkit.TextBoxWrapper', Sys.UI.Behavior);

AjaxControlToolkit.TextBoxWrapper.validatorGetValue = function(id) {
    /// <summary>
    /// Wrapper for ASP.NET's validatorGetValue to return the value from the wrapper if present
    /// </summary>
    /// <param name="id" type="String">
    /// id of the element
    /// </param>
    /// <returns type="Object">
    /// Value from the wrapper or result of original ValidatorGetValue
    /// </returns>
    var control = $get(id);
    if (control && control.AjaxControlToolkitTextBoxWrapper) {
        return control.AjaxControlToolkitTextBoxWrapper.get_Value();
    }
    return AjaxControlToolkit.TextBoxWrapper._originalValidatorGetValue(id);
}

// Wrap ASP.NET's ValidatorGetValue with AjaxControlToolkit.TextBoxWrapper.validatorGetValue
// to make validators work properly with watermarked TextBoxes
if (typeof(ValidatorGetValue) == 'function') {
    AjaxControlToolkit.TextBoxWrapper._originalValidatorGetValue = ValidatorGetValue;
    //12/04/08 - TJK - Overriding this Validation method was causing infinite loops when calling
    //           the ValidatorGetValue method because somehow the _originalValidatorGetValue
    //           method was also getting assigned to the ToolKit method validatorGetValue when
    //           combining this functionality with UpdatePanels.
    //           TODO: We need to resolve this issue in order for watermarked textboxes to work
    //           correctly with our version of the Toolkit.
    //ValidatorGetValue = AjaxControlToolkit.TextBoxWrapper.validatorGetValue;
}


// Temporary fix null reference bug in Sys.CultureInfo._getAbbrMonthIndex
if (Sys.CultureInfo.prototype._getAbbrMonthIndex) {
//    try {
//        Sys.CultureInfo.prototype._getAbbrMonthIndex('');
//    } catch(ex) {
    try {
        var del = Function.createDelegate(Sys.CultureInfo.CurrentCulture != null ? Sys.CultureInfo.CurrentCulture : Sys.CultureInfo.InvariantCulture, Sys.CultureInfo.prototype._getAbbrMonthIndex);
        del('');
    } catch (ex) {

        Sys.CultureInfo.prototype._getAbbrMonthIndex = function(value) {
            if (!this._upperAbbrMonths) {
                this._upperAbbrMonths = this._toUpperArray(this.dateTimeFormat.AbbreviatedMonthNames);
            }
            return Array.indexOf(this._upperAbbrMonths, this._toUpper(value));
        }
        Sys.CultureInfo.CurrentCulture._getAbbrMonthIndex = Sys.CultureInfo.prototype._getAbbrMonthIndex;
        Sys.CultureInfo.InvariantCulture._getAbbrMonthIndex = Sys.CultureInfo.prototype._getAbbrMonthIndex;
    }
}

//END AjaxControlToolkit.Common.Common.js
//START AjaxControlToolkit.ExtenderBase.BaseScripts.js
// (c) Copyright Microsoft Corporation.
// This source is subject to the Microsoft Permissive License.
// See http://www.microsoft.com/resources/sharedsource/licensingbasics/sharedsourcelicenses.mspx.
// All other rights reserved.


/// <reference name="MicrosoftAjax.debug.js" />
/// <reference name="MicrosoftAjaxTimer.debug.js" />
/// <reference name="MicrosoftAjaxWebForms.debug.js" />


Type.registerNamespace('AjaxControlToolkit');

// This is the base behavior for all extender behaviors
AjaxControlToolkit.BehaviorBase = function(element) {
    /// <summary>
    /// Base behavior for all extender behaviors
    /// </summary>
    /// <param name="element" type="Sys.UI.DomElement" domElement="true">
    /// Element the behavior is associated with
    /// </param>
    AjaxControlToolkit.BehaviorBase.initializeBase(this,[element]);
    
    this._clientStateFieldID = null;
    this._pageRequestManager = null;
    this._partialUpdateBeginRequestHandler = null;
    this._partialUpdateEndRequestHandler = null;
}
AjaxControlToolkit.BehaviorBase.prototype = {
    initialize : function() {
        /// <summary>
        /// Initialize the behavior
        /// </summary>

        // TODO: Evaluate necessity
        AjaxControlToolkit.BehaviorBase.callBaseMethod(this, 'initialize');
    },

    dispose : function() {
        /// <summary>
        /// Dispose the behavior
        /// </summary>
        AjaxControlToolkit.BehaviorBase.callBaseMethod(this, 'dispose');

        if (this._pageRequestManager) {
            if (this._partialUpdateBeginRequestHandler) {
                this._pageRequestManager.remove_beginRequest(this._partialUpdateBeginRequestHandler);
                this._partialUpdateBeginRequestHandler = null;
            }
            if (this._partialUpdateEndRequestHandler) {
                this._pageRequestManager.remove_endRequest(this._partialUpdateEndRequestHandler);
                this._partialUpdateEndRequestHandler = null;
            }
            this._pageRequestManager = null;
        }
    },

    get_ClientStateFieldID : function() {
        /// <value type="String">
        /// ID of the hidden field used to store client state
        /// </value>
        return this._clientStateFieldID;
    },
    set_ClientStateFieldID : function(value) {
        if (this._clientStateFieldID != value) {
            this._clientStateFieldID = value;
            this.raisePropertyChanged('ClientStateFieldID');
        }
    },

    get_ClientState : function() {
        /// <value type="String">
        /// Client state
        /// </value>
        if (this._clientStateFieldID) {
            var input = document.getElementById(this._clientStateFieldID);
            if (input) {
                return input.value;
            }
        }
        return null;
    },
    set_ClientState : function(value) {
        if (this._clientStateFieldID) {
            var input = document.getElementById(this._clientStateFieldID);
            if (input) {
                input.value = value;
            }
        }
    },

    registerPartialUpdateEvents : function() {
        /// <summary>
        /// Register for beginRequest and endRequest events on the PageRequestManager,
        /// (which cause _partialUpdateBeginRequest and _partialUpdateEndRequest to be
        /// called when an UpdatePanel refreshes)
        /// </summary>

        if (Sys && Sys.WebForms && Sys.WebForms.PageRequestManager){
            this._pageRequestManager = Sys.WebForms.PageRequestManager.getInstance();
            if (this._pageRequestManager) {
                this._partialUpdateBeginRequestHandler = Function.createDelegate(this, this._partialUpdateBeginRequest);
                this._pageRequestManager.add_beginRequest(this._partialUpdateBeginRequestHandler);
                this._partialUpdateEndRequestHandler = Function.createDelegate(this, this._partialUpdateEndRequest);
                this._pageRequestManager.add_endRequest(this._partialUpdateEndRequestHandler);
            }
        }
    },

    _partialUpdateBeginRequest : function(sender, beginRequestEventArgs) {
        /// <summary>
        /// Method that will be called when a partial update (via an UpdatePanel) begins,
        /// if registerPartialUpdateEvents() has been called.
        /// </summary>
        /// <param name="sender" type="Object">
        /// Sender
        /// </param>
        /// <param name="beginRequestEventArgs" type="Sys.WebForms.BeginRequestEventArgs">
        /// Event arguments
        /// </param>

        // Nothing done here; override this method in a child class
    },
    
    _partialUpdateEndRequest : function(sender, endRequestEventArgs) {
        /// <summary>
        /// Method that will be called when a partial update (via an UpdatePanel) finishes,
        /// if registerPartialUpdateEvents() has been called.
        /// </summary>
        /// <param name="sender" type="Object">
        /// Sender
        /// </param>
        /// <param name="endRequestEventArgs" type="Sys.WebForms.EndRequestEventArgs">
        /// Event arguments
        /// </param>

        // Nothing done here; override this method in a child class
    }
}
AjaxControlToolkit.BehaviorBase.registerClass('AjaxControlToolkit.BehaviorBase', Sys.UI.Behavior);


// Dynamically populates content when the populate method is called
AjaxControlToolkit.DynamicPopulateBehaviorBase = function(element) {
    /// <summary>
    /// DynamicPopulateBehaviorBase is used to add DynamicPopulateBehavior funcitonality
    /// to other extenders.  It will dynamically populate the contents of the target element
    /// when its populate method is called.
    /// </summary>
    /// <param name="element" type="Sys.UI.DomElement" domElement="true">
    /// DOM Element the behavior is associated with
    /// </param>
    AjaxControlToolkit.DynamicPopulateBehaviorBase.initializeBase(this, [element]);
    
    this._DynamicControlID = null;
    this._DynamicContextKey = null;
    this._DynamicServicePath = null;
    this._DynamicServiceMethod = null;
    this._cacheDynamicResults = false;
    this._dynamicPopulateBehavior = null;
    this._populatingHandler = null;
    this._populatedHandler = null;
}
AjaxControlToolkit.DynamicPopulateBehaviorBase.prototype = {
    initialize : function() {
        /// <summary>
        /// Initialize the behavior
        /// </summary>

        AjaxControlToolkit.DynamicPopulateBehaviorBase.callBaseMethod(this, 'initialize');

        // Create event handlers
        this._populatingHandler = Function.createDelegate(this, this._onPopulating);
        this._populatedHandler = Function.createDelegate(this, this._onPopulated);
    },

    dispose : function() {
        /// <summary>
        /// Dispose the behavior
        /// </summary>

        // Dispose of event handlers
        if (this._populatedHandler) {
            if (this._dynamicPopulateBehavior) {
                this._dynamicPopulateBehavior.remove_populated(this._populatedHandler);
            }
            this._populatedHandler = null;
        }
        if (this._populatingHandler) {
            if (this._dynamicPopulateBehavior) {
                this._dynamicPopulateBehavior.remove_populating(this._populatingHandler);
            }
            this._populatingHandler = null;
        }

        // Dispose of the placeholder control and behavior
        if (this._dynamicPopulateBehavior) {
            this._dynamicPopulateBehavior.dispose();
            this._dynamicPopulateBehavior = null;
        }
        AjaxControlToolkit.DynamicPopulateBehaviorBase.callBaseMethod(this, 'dispose');
    },

    populate : function(contextKeyOverride) {
        /// <summary>
        /// Demand-create the DynamicPopulateBehavior and use it to populate the target element
        /// </summary>
        /// <param name="contextKeyOverride" type="String" mayBeNull="true" optional="true">
        /// An arbitrary string value to be passed to the web method. For example, if the element to be populated is within a data-bound repeater, this could be the ID of the current row.
        /// </param>

        // If the DynamicPopulateBehavior's element is out of date, dispose of it
        if (this._dynamicPopulateBehavior && (this._dynamicPopulateBehavior.get_element() != $get(this._DynamicControlID))) {
            this._dynamicPopulateBehavior.dispose();
            this._dynamicPopulateBehavior = null;
        }
        
        // If a DynamicPopulateBehavior is not available and the necessary information is, create one
        if (!this._dynamicPopulateBehavior && this._DynamicControlID && this._DynamicServiceMethod) {
            this._dynamicPopulateBehavior = $create(AjaxControlToolkit.DynamicPopulateBehavior,
                {
                    "id" : this.get_id() + "_DynamicPopulateBehavior",
                    "ContextKey" : this._DynamicContextKey,
                    "ServicePath" : this._DynamicServicePath,
                    "ServiceMethod" : this._DynamicServiceMethod,
                    "cacheDynamicResults" : this._cacheDynamicResults
                }, null, null, $get(this._DynamicControlID));

            // Attach event handlers
            this._dynamicPopulateBehavior.add_populating(this._populatingHandler);
            this._dynamicPopulateBehavior.add_populated(this._populatedHandler);
        }
        
        // If a DynamicPopulateBehavior is available, use it to populate the dynamic content
        if (this._dynamicPopulateBehavior) {
            this._dynamicPopulateBehavior.populate(contextKeyOverride ? contextKeyOverride : this._DynamicContextKey);
        }
    },

    _onPopulating : function(sender, eventArgs) {
        /// <summary>
        /// Handler for DynamicPopulate behavior's Populating event
        /// </summary>
        /// <param name="sender" type="Object">
        /// DynamicPopulate behavior
        /// </param>
        /// <param name="eventArgs" type="Sys.CancelEventArgs" mayBeNull="false">
        /// Event args
        /// </param>
        this.raisePopulating(eventArgs);
    },

    _onPopulated : function(sender, eventArgs) {
        /// <summary>
        /// Handler for DynamicPopulate behavior's Populated event
        /// </summary>
        /// <param name="sender" type="Object">
        /// DynamicPopulate behavior
        /// </param>
        /// <param name="eventArgs" type="Sys.EventArgs" mayBeNull="false">
        /// Event args
        /// </param>
        this.raisePopulated(eventArgs);
    },

    get_dynamicControlID : function() {
        /// <value type="String">
        /// ID of the element to populate with dynamic content
        /// </value>
        return this._DynamicControlID;
    },
    get_DynamicControlID : this.get_dynamicControlID,
    set_dynamicControlID : function(value) {
        if (this._DynamicControlID != value) {
            this._DynamicControlID = value;
            this.raisePropertyChanged('dynamicControlID');
            this.raisePropertyChanged('DynamicControlID');
        }
    },
    set_DynamicControlID : this.set_dynamicControlID,

    get_dynamicContextKey : function() {
        /// <value type="String">
        /// An arbitrary string value to be passed to the web method.
        /// For example, if the element to be populated is within a
        /// data-bound repeater, this could be the ID of the current row.
        /// </value>
        return this._DynamicContextKey;
    },
    get_DynamicContextKey : this.get_dynamicContextKey,
    set_dynamicContextKey : function(value) {
        if (this._DynamicContextKey != value) {
            this._DynamicContextKey = value;
            this.raisePropertyChanged('dynamicContextKey');
            this.raisePropertyChanged('DynamicContextKey');
        }
    },
    set_DynamicContextKey : this.set_dynamicContextKey,

    get_dynamicServicePath : function() {
        /// <value type="String" mayBeNull="true" optional="true">
        /// The URL of the web service to call.  If the ServicePath is not defined, then we will invoke a PageMethod instead of a web service.
        /// </value>
        return this._DynamicServicePath;
    },
    get_DynamicServicePath : this.get_dynamicServicePath,
    set_dynamicServicePath : function(value) {
        if (this._DynamicServicePath != value) {
            this._DynamicServicePath = value;
            this.raisePropertyChanged('dynamicServicePath');
            this.raisePropertyChanged('DynamicServicePath');
        }
    },
    set_DynamicServicePath : this.set_dynamicServicePath,

    get_dynamicServiceMethod : function() {
        /// <value type="String">
        /// The name of the method to call on the page or web service
        /// </value>
        /// <remarks>
        /// The signature of the method must exactly match the following:
        ///     [WebMethod]
        ///     string DynamicPopulateMethod(string contextKey)
        ///     {
        ///         ...
        ///     }
        /// </remarks>
        return this._DynamicServiceMethod;
    },
    get_DynamicServiceMethod : this.get_dynamicServiceMethod,
    set_dynamicServiceMethod : function(value) {
        if (this._DynamicServiceMethod != value) {
            this._DynamicServiceMethod = value;
            this.raisePropertyChanged('dynamicServiceMethod');
            this.raisePropertyChanged('DynamicServiceMethod');
        }
    },
    set_DynamicServiceMethod : this.set_dynamicServiceMethod,
    
    get_cacheDynamicResults : function() {
        /// <value type="Boolean" mayBeNull="false">
        /// Whether the results of the dynamic population should be cached and
        /// not fetched again after the first load
        /// </value>
        return this._cacheDynamicResults;
    },
    set_cacheDynamicResults : function(value) {
        if (this._cacheDynamicResults != value) {
            this._cacheDynamicResults = value;
            this.raisePropertyChanged('cacheDynamicResults');
        }
    },
    
    add_populated : function(handler) {
        /// <summary>
        /// Add a handler on the populated event
        /// </summary>
        /// <param name="handler" type="Function">
        /// Handler
        /// </param>
        this.get_events().addHandler("populated", handler);
    },
    remove_populated : function(handler) {
        /// <summary>
        /// Remove a handler from the populated event
        /// </summary>
        /// <param name="handler" type="Function">
        /// Handler
        /// </param>
        this.get_events().removeHandler("populated", handler);
    },
    raisePopulated : function(arg) {
        /// <summary>
        /// Raise the populated event
        /// </summary>
        /// <param name="arg" type="Sys.EventArgs">
        /// Event arguments
        /// </param>
        var handler = this.get_events().getHandler("populated");  
        if (handler) handler(this, arg);
    },
    
    add_populating : function(handler) {
        /// <summary>
        /// Add an event handler for the populating event
        /// </summary>
        /// <param name="handler" type="Function" mayBeNull="false">
        /// Event handler
        /// </param>
        /// <returns />
        this.get_events().addHandler('populating', handler);
    },
    remove_populating : function(handler) {
        /// <summary>
        /// Remove an event handler from the populating event
        /// </summary>
        /// <param name="handler" type="Function" mayBeNull="false">
        /// Event handler
        /// </param>
        /// <returns />
        this.get_events().removeHandler('populating', handler);
    },
    raisePopulating : function(eventArgs) {
        /// <summary>
        /// Raise the populating event
        /// </summary>
        /// <param name="eventArgs" type="Sys.CancelEventArgs" mayBeNull="false">
        /// Event arguments for the populating event
        /// </param>
        /// <returns />
        
        var handler = this.get_events().getHandler('populating');
        if (handler) {
            handler(this, eventArgs);
        }
    }
}
AjaxControlToolkit.DynamicPopulateBehaviorBase.registerClass('AjaxControlToolkit.DynamicPopulateBehaviorBase', AjaxControlToolkit.BehaviorBase);


AjaxControlToolkit.ControlBase = function(element) {
    AjaxControlToolkit.ControlBase.initializeBase(this, [element]);
    this._clientStateField = null;
    this._callbackTarget = null;
    this._onsubmit$delegate = Function.createDelegate(this, this._onsubmit);
    this._oncomplete$delegate = Function.createDelegate(this, this._oncomplete);
    this._onerror$delegate = Function.createDelegate(this, this._onerror);
}
AjaxControlToolkit.ControlBase.prototype = {
    initialize : function() {
        AjaxControlToolkit.ControlBase.callBaseMethod(this, "initialize");
        // load the client state if possible
        if (this._clientStateField) {
            this.loadClientState(this._clientStateField.value);
        }
        // attach an event to save the client state before a postback or updatepanel partial postback
        if (typeof(Sys.WebForms)!=="undefined" && typeof(Sys.WebForms.PageRequestManager)!=="undefined") {
            Array.add(Sys.WebForms.PageRequestManager.getInstance()._onSubmitStatements, this._onsubmit$delegate);
        } else {
            $addHandler(document.forms[0], "submit", this._onsubmit$delegate);
        }
    },
    dispose : function() {
        if (typeof(Sys.WebForms)!=="undefined" && typeof(Sys.WebForms.PageRequestManager)!=="undefined") {
            Array.remove(Sys.WebForms.PageRequestManager.getInstance()._onSubmitStatements, this._onsubmit$delegate);
        } else {
            $removeHandler(document.forms[0], "submit", this._onsubmit$delegate);
        }
        AjaxControlToolkit.ControlBase.callBaseMethod(this, "dispose");
    },
    findElement : function(id) {
        // <summary>Finds an element within this control (ScriptControl/ScriptUserControl are NamingContainers);
        return $get(this.get_id() + '_' + id.split(':').join('_'));
    },
    get_clientStateField : function() {
        return this._clientStateField;
    },
    set_clientStateField : function(value) {
        if (this.get_isInitialized()) throw Error.invalidOperation(AjaxControlToolkit.Resources.ExtenderBase_CannotSetClientStateField);
        if (this._clientStateField != value) {
            this._clientStateField = value;
            this.raisePropertyChanged('clientStateField');
        }
    },
    loadClientState : function(value) {
        /// <remarks>override this method to intercept client state loading after a callback</remarks>
    },
    saveClientState : function() {
        /// <remarks>override this method to intercept client state acquisition before a callback</remarks>
        return null;
    },
    _invoke : function(name, args, cb) {
        /// <summary>invokes a callback method on the server control</summary>        
        if (!this._callbackTarget) {
            throw Error.invalidOperation(AjaxControlToolkit.Resources.ExtenderBase_ControlNotRegisteredForCallbacks);
        }
        if (typeof(WebForm_DoCallback)==="undefined") {
            throw Error.invalidOperation(AjaxControlToolkit.Resources.ExtenderBase_PageNotRegisteredForCallbacks);
        }
        var ar = [];
        for (var i = 0; i < args.length; i++) 
            ar[i] = args[i];
        var clientState = this.saveClientState();
        if (clientState != null && !String.isInstanceOfType(clientState)) {
            throw Error.invalidOperation(AjaxControlToolkit.Resources.ExtenderBase_InvalidClientStateType);
        }
        var payload = Sys.Serialization.JavaScriptSerializer.serialize({name:name,args:ar,state:this.saveClientState()});
        WebForm_DoCallback(this._callbackTarget, payload, this._oncomplete$delegate, cb, this._onerror$delegate, true);
    },
    _oncomplete : function(result, context) {
        result = Sys.Serialization.JavaScriptSerializer.deserialize(result);
        if (result.error) {
            throw Error.create(result.error);
        }
        this.loadClientState(result.state);
        context(result.result);
    },
    _onerror : function(message, context) {
        throw Error.create(message);
    },
    _onsubmit : function() {
        if (this._clientStateField) {
            this._clientStateField.value = this.saveClientState();
        }
        return true;
    }    
   
}
AjaxControlToolkit.ControlBase.registerClass("AjaxControlToolkit.ControlBase", Sys.UI.Control);

AjaxControlToolkit.Resources={
"PasswordStrength_InvalidWeightingRatios":"Strength Weighting ratios must have 4 elements","Animation_ChildrenNotAllowed":"AjaxControlToolkit.Animation.createAnimation cannot add child animations to type \"{0}\" that does not derive from AjaxControlToolkit.Animation.ParentAnimation","PasswordStrength_RemainingSymbols":"{0} symbol characters","ExtenderBase_CannotSetClientStateField":"clientStateField can only be set before initialization","RTE_PreviewHTML":"Preview HTML","RTE_JustifyCenter":"Justify Center","PasswordStrength_RemainingUpperCase":"{0} more upper case characters","Animation_TargetNotFound":"AjaxControlToolkit.Animation.Animation.set_animationTarget requires the ID of a Sys.UI.DomElement or Sys.UI.Control.  No element or control could be found corresponding to \"{0}\"","RTE_FontColor":"Font Color","RTE_LabelColor":"Label Color","Common_InvalidBorderWidthUnit":"A unit type of \"{0}\"\u0027 is invalid for parseBorderWidth","RTE_Heading":"Heading","Tabs_PropertySetBeforeInitialization":"{0} cannot be changed before initialization","RTE_OrderedList":"Ordered List","ReorderList_DropWatcherBehavior_NoChild":"Could not find child of list with id \"{0}\"","CascadingDropDown_MethodTimeout":"[Method timeout]","RTE_Columns":"Columns","RTE_InsertImage":"Insert Image","RTE_InsertTable":"Insert Table","RTE_Values":"Values","RTE_OK":"OK","ExtenderBase_PageNotRegisteredForCallbacks":"This Page has not been registered for callbacks","Animation_NoDynamicPropertyFound":"AjaxControlToolkit.Animation.createAnimation found no property corresponding to \"{0}\" or \"{1}\"","Animation_InvalidBaseType":"AjaxControlToolkit.Animation.registerAnimation can only register types that inherit from AjaxControlToolkit.Animation.Animation","RTE_UnorderedList":"Unordered List","ResizableControlBehavior_InvalidHandler":"{0} handler not a function, function name, or function text","Animation_InvalidColor":"Color must be a 7-character hex representation (e.g. #246ACF), not \"{0}\"","RTE_CellColor":"Cell Color","PasswordStrength_RemainingMixedCase":"Mixed case characters","RTE_Italic":"Italic","CascadingDropDown_NoParentElement":"Failed to find parent element \"{0}\"","ValidatorCallout_DefaultErrorMessage":"This control is invalid","RTE_Indent":"Indent","ReorderList_DropWatcherBehavior_CallbackError":"Reorder failed, see details below.\\r\\n\\r\\n{0}","PopupControl_NoDefaultProperty":"No default property supported for control \"{0}\" of type \"{1}\"","RTE_Normal":"Normal","PopupExtender_NoParentElement":"Couldn\u0027t find parent element \"{0}\"","RTE_ViewValues":"View Values","RTE_Legend":"Legend","RTE_Labels":"Labels","RTE_CellSpacing":"Cell Spacing","PasswordStrength_RemainingNumbers":"{0} more numbers","RTE_Border":"Border","RTE_Create":"Create","RTE_BackgroundColor":"Background Color","RTE_Cancel":"Cancel","RTE_JustifyFull":"Justify Full","RTE_JustifyLeft":"Justify Left","RTE_Cut":"Cut","ResizableControlBehavior_CannotChangeProperty":"Changes to {0} not supported","RTE_ViewSource":"View Source","Common_InvalidPaddingUnit":"A unit type of \"{0}\" is invalid for parsePadding","RTE_Paste":"Paste","ExtenderBase_ControlNotRegisteredForCallbacks":"This Control has not been registered for callbacks","Calendar_Today":"Today: {0}","MultiHandleSlider_CssHeightWidthRequired":"You must specify a CSS width and height for all handle styles as well as the rail.","Common_DateTime_InvalidFormat":"Invalid format","ListSearch_DefaultPrompt":"Type to search","CollapsiblePanel_NoControlID":"Failed to find element \"{0}\"","RTE_ViewEditor":"View Editor","RTE_BarColor":"Bar Color","PasswordStrength_DefaultStrengthDescriptions":"NonExistent;Very Weak;Weak;Poor;Almost OK;Barely Acceptable;Average;Good;Strong;Excellent;Unbreakable!","RTE_Inserttexthere":"Insert text here","Animation_UknownAnimationName":"AjaxControlToolkit.Animation.createAnimation could not find an Animation corresponding to the name \"{0}\"","ExtenderBase_InvalidClientStateType":"saveClientState must return a value of type String","Rating_CallbackError":"An unhandled exception has occurred:\\r\\n{0}","Tabs_OwnerExpected":"owner must be set before initialize","DynamicPopulate_WebServiceTimeout":"Web service call timed out","PasswordStrength_RemainingLowerCase":"{0} more lower case characters","Animation_MissingAnimationName":"AjaxControlToolkit.Animation.createAnimation requires an object with an AnimationName property","RTE_JustifyRight":"Justify Right","Tabs_ActiveTabArgumentOutOfRange":"Argument is not a member of the tabs collection","RTE_CellPadding":"Cell Padding","RTE_ClearFormatting":"Clear Formatting","AlwaysVisible_ElementRequired":"AjaxControlToolkit.AlwaysVisibleControlBehavior must have an element","Slider_NoSizeProvided":"Please set valid values for the height and width attributes in the slider\u0027s CSS classes","DynamicPopulate_WebServiceError":"Web Service call failed: {0}","PasswordStrength_StrengthPrompt":"Strength: ","PasswordStrength_RemainingCharacters":"{0} more characters","PasswordStrength_Satisfied":"Nothing more required","RTE_Hyperlink":"Hyperlink","Animation_NoPropertyFound":"AjaxControlToolkit.Animation.createAnimation found no property corresponding to \"{0}\"","PasswordStrength_InvalidStrengthDescriptionStyles":"Text Strength description style classes must match the number of text descriptions.","PasswordStrength_GetHelpRequirements":"Get help on password requirements","PasswordStrength_InvalidStrengthDescriptions":"Invalid number of text strength descriptions specified","RTE_Underline":"Underline","Tabs_PropertySetAfterInitialization":"{0} cannot be changed after initialization","RTE_Rows":"Rows","RTE_Redo":"Redo","RTE_Size":"Size","RTE_Undo":"Undo","RTE_Bold":"Bold","RTE_Copy":"Copy","RTE_Font":"Font","CascadingDropDown_MethodError":"[Method error {0}]","RTE_BorderColor":"Border Color","RTE_Paragraph":"Paragraph","RTE_InsertHorizontalRule":"Insert Horizontal Rule","Common_UnitHasNoDigits":"No digits","RTE_Outdent":"Outdent","Common_DateTime_InvalidTimeSpan":"\"{0}\" is not a valid TimeSpan format","Animation_CannotNestSequence":"AjaxControlToolkit.Animation.SequenceAnimation cannot be nested inside AjaxControlToolkit.Animation.ParallelAnimation","Shared_BrowserSecurityPreventsPaste":"Your browser security settings don\u0027t permit the automatic execution of paste operations. Please use the keyboard shortcut Ctrl+V instead."};
//END AjaxControlToolkit.ExtenderBase.BaseScripts.js
//START AjaxControlToolkit.RoundedCorners.RoundedCornersBehavior.js
// (c) Copyright Microsoft Corporation.
// This source is subject to the Microsoft Permissive License.
// See http://www.microsoft.com/resources/sharedsource/licensingbasics/sharedsourcelicenses.mspx.
// All other rights reserved.


/// <reference name="MicrosoftAjax.debug.js" />
/// <reference name="MicrosoftAjaxTimer.debug.js" />
/// <reference name="MicrosoftAjaxWebForms.debug.js" />
/// <reference path="../ExtenderBase/BaseScripts.js" />
/// <reference path="../Common/Common.js" />


Type.registerNamespace('AjaxControlToolkit');

AjaxControlToolkit.BoxCorners = function() {
    /// <summary>
    /// Corners of an element
    /// </summary>
    /// <field name="None" type="Number" integer="true" />
    /// <field name="TopLeft" type="Number" integer="true" />
    /// <field name="TopRight" type="Number" integer="true" />
    /// <field name="BottomRight" type="Number" integer="true" />
    /// <field name="BottomLeft" type="Number" integer="true" />
    /// <field name="Top" type="Number" integer="true" />
    /// <field name="Right" type="Number" integer="true" />
    /// <field name="Bottom" type="Number" integer="true" />
    /// <field name="Left" type="Number" integer="true" />
    /// <field name="All" type="Number" integer="true" />
    throw Error.invalidOperation();
}
AjaxControlToolkit.BoxCorners.prototype = {
    None        : 0x00,

    TopLeft     : 0x01,
    TopRight    : 0x02,
    BottomRight : 0x04,
    BottomLeft  : 0x08,
    
    Top         : 0x01 | 0x02,
    Right       : 0x02 | 0x04,
    Bottom      : 0x04 | 0x08,
    Left        : 0x08 | 0x01,
    All         : 0x01 | 0x02 | 0x04 | 0x08
}
AjaxControlToolkit.BoxCorners.registerEnum("AjaxControlToolkit.BoxCorners", true);


AjaxControlToolkit.RoundedCornersBehavior = function(element) {
    /// <summary>
    /// The RoundedCornersBehavior rounds the corners of its target element
    /// </summary>
    /// <param name="element" type="Sys.UI.DomElement" domElement="true">
    /// DOM element associated with the behavior
    /// </param>
    AjaxControlToolkit.RoundedCornersBehavior.initializeBase(this, [element]);

    this._corners = AjaxControlToolkit.BoxCorners.All;
    this._radius = 5;
    this._color = null;
    this._parentDiv = null;
    this._originalStyle = null;
    this._borderColor = null;
    this._isDirty = true;
}
AjaxControlToolkit.RoundedCornersBehavior.prototype = {
    initialize: function() {
        /// <summary>
        /// Initialize the behavior
        /// </summary>
        AjaxControlToolkit.RoundedCornersBehavior.callBaseMethod(this, 'initialize');
        this.update();
    },

    dispose: function() {
        /// <summary>
        /// Dispose the behavior
        /// </summary>

        this.disposeParentDiv();
        AjaxControlToolkit.RoundedCornersBehavior.callBaseMethod(this, 'dispose');
    },

    update: function() {
        /// <summary>
        /// Create the surrounding div that will have rounded corners
        /// </summary>
        var e = this.get_element();

        if (!e || !this._isDirty || this.get_isUpdating()) return;

        this.disposeParentDiv();

        var color = this.getBackgroundColor();
        var originalWidth = e.offsetWidth;
        var newParent = e.cloneNode(false);

        // move all children into the new div.
        this.moveChildren(e, newParent);

        // modify the target element to be transparent
        // and set up the new parent
        this._originalStyle = e.style.cssText;
        e.style.backgroundColor = "transparent";
        e.style.verticalAlign = "top";
        e.style.padding = "0";
        e.style.overflow = "";
        e.style.className = "";
        // Don't assume there is a numerical value for height.  A height of "auto" is possible.
        if (e.style.height && e.style.height != "auto") {
            // Increase the height to account for the rounded corners
            e.style.height = parseInt($common.getCurrentStyle(e, 'height')) + (this._radius * 2) + "px";
        } else {
            // Note: Do NOT use $common.getCurrentStyle in the check below
            // because that breaks the work-around
            if (!e.style.width && (0 < originalWidth)) {
                // The following line works around a problem where IE renders the first
                // rounded DIV about 6 pixels too high if e doesn't have a width or height
                e.style.width = originalWidth + "px";
            }
        }

        // these are properties we don't want cloned down to the new parent
        newParent.style.position = "";
        newParent.style.border = "";
        newParent.style.margin = "";
        newParent.style.width = "100%";
        newParent.id = "";
        newParent.removeAttribute("control");

        if (this._borderColor) {
            newParent.style.borderTopStyle = "none";
            newParent.style.borderBottomStyle = "none";
            newParent.style.borderLeftStyle = "solid";
            newParent.style.borderRightStyle = "solid";
            newParent.style.borderLeftColor = this._borderColor;
            newParent.style.borderRightColor = this._borderColor;
            newParent.style.borderLeftWidth = "1px";
            newParent.style.borderRightWidth = "1px";
            if (this._radius == 0) {
                newParent.style.borderTopStyle = "solid";
                newParent.style.borderBottomStyle = "solid";
                newParent.style.borderTopColor = this._borderColor;
                newParent.style.borderBottomColor = this._borderColor;
                newParent.style.borderTopWidth = "1px";
                newParent.style.borderBottomWidth = "1px";
            }
        } else {
            newParent.style.borderTopStyle = "none";
            newParent.style.borderBottomStyle = "none";
            newParent.style.borderLeftStyle = "none";
            newParent.style.borderRightStyle = "none";
        }

        // build a set of steps on each end to fake the corners.
        //  ------- (step 0)
        //  -------- (step n-1)
        //  --------- (step n)
        //  XXXXXXXXX (inner div)
        //  XXXXXXXXX
        //  --------- (bottom step n)
        //  --------  (bottom step n-1)
        //  ------    (bottom step 0)

        var lastDiv = null;
        var radius = this._radius;
        var lines = this._radius;
        var lastDelta = 0;

        for (var i = lines; i > 0; i--) {

            // figure out how much we'll need to subtract from each item
            var angle = Math.acos(i / radius);
            var delta = radius - Math.round(Math.sin(angle) * radius);

            // build a 1 pixel tall div
            // that's delta pixels shorter on each end.

            // add the top one
            var newDiv = document.createElement("DIV");
            newDiv.__roundedDiv = true;
            newDiv.style.backgroundColor = color;
            newDiv.style.marginLeft = delta + "px";
            newDiv.style.marginRight = (delta - (this._borderColor ? 2 : 0)) + "px";
            newDiv.style.height = "1px";
            newDiv.style.fontSize = "1px"; // workaround for IE wierdness with 1px divs.
            newDiv.style.overflow = "hidden";

            if (this._borderColor) {
                newDiv.style.borderLeftStyle = "solid";
                newDiv.style.borderRightStyle = "solid";
                newDiv.style.borderLeftColor = this._borderColor;
                newDiv.style.borderRightColor = this._borderColor;

                var offset = Math.max(0, lastDelta - delta - 1);
                newDiv.style.borderLeftWidth = (offset + 1) + "px";
                newDiv.style.borderRightWidth = (offset + 1) + "px";

                if (i == lines) {
                    newDiv.__roundedDivNoBorder = true;
                    newDiv.style.backgroundColor = this._borderColor;
                }
            }

            e.insertBefore(newDiv, lastDiv);

            var topDiv = newDiv;

            // add the bottom one one
            newDiv = newDiv.cloneNode(true);
            newDiv.__roundedDiv = true;

            e.insertBefore(newDiv, lastDiv);

            var bottomDiv = newDiv;

            lastDiv = newDiv;
            lastDelta = delta;

            if (!this.isCornerSet(AjaxControlToolkit.BoxCorners.TopLeft)) {
                topDiv.style.marginLeft = "0";
                if (this._borderColor) {
                    topDiv.style.borderLeftWidth = "1px";
                }
            }
            if (!this.isCornerSet(AjaxControlToolkit.BoxCorners.TopRight)) {
                topDiv.style.marginRight = "0";
                if (this._borderColor) {
                    topDiv.style.borderRightWidth = "1px";
                    topDiv.style.marginRight = "-2px";
                }
            }
            if (!this.isCornerSet(AjaxControlToolkit.BoxCorners.BottomLeft)) {
                bottomDiv.style.marginLeft = "0";
                if (this._borderColor) {
                    bottomDiv.style.borderLeftWidth = "1px";
                }
            }
            if (!this.isCornerSet(AjaxControlToolkit.BoxCorners.BottomRight)) {
                bottomDiv.style.marginRight = "0";
                if (this._borderColor) {
                    bottomDiv.style.borderRightWidth = "1px";
                    bottomDiv.style.marginRight = "-2px";
                }
            }
        }

        // finally, add the newParent (which has all the original content)
        // into the div.
        e.insertBefore(newParent, lastDiv);
        this._parentDiv = newParent;
        this._isDirty = false;
    },

    disposeParentDiv: function() {
        /// <summary>
        /// Dispose the surrounding div with rounded corners
        /// </summary>

        if (this._parentDiv) {
            // clean up the divs we added.
            var e = this.get_element();
            var children = e.childNodes;
            for (var i = children.length - 1; i >= 0; i--) {
                var child = children[i];
                if (child) {
                    if (child == this._parentDiv) {
                        this.moveChildren(child, e);
                    }
                    try {
                        e.removeChild(child);
                    } catch (e) {
                        // Safari likes to throw NOT_FOUND_ERR (DOMException 8)
                        // but it seems to work fine anyway.
                    }
                }
            }

            // restore the original style
            if (this._originalStyle) {
                e.style.cssText = this._originalStyle;
                this._originalStyle = null;
            }
            this._parentDiv = null;
        }
    },

    getBackgroundColor: function() {
        /// <summary>
        /// Get the background color of the target element
        /// </summary>
        if (this._color) {
            return this._color;
        }
        return $common.getCurrentStyle(this.get_element(), 'backgroundColor');
    },

    moveChildren: function(src, dest) {
        /// <summary>
        /// Move the child nodes from one element to another
        /// </summary>
        /// <param name="src" type="Sys.UI.DomElement" domElement="true">
        /// DOM Element
        /// </param>
        /// <param name="dest" type="Sys.UI.DomElement" domElement="true">
        /// DOM Element
        /// </param>

        var moveCount = 0;
        while (src.hasChildNodes()) {
            var child = src.childNodes[0];
            child = src.removeChild(child);
            dest.appendChild(child);
            moveCount++;
        }
        return moveCount;
    },

    isCornerSet: function(corner) {
        /// <summary>
        /// Check whether the a flag for this corner has been set
        /// </summary>
        /// <param name="corner" type="AjaxControlTooolkit.BoxCorners">
        /// Corner to check
        /// </param>
        /// <returns type="Boolean">
        /// True if it is included in the flags, false otherwise
        /// </returns>
        return (this._corners & corner) != AjaxControlToolkit.BoxCorners.None;
    },

    setCorner: function(corner, value) {
        /// <summary>
        /// Set a corner as one that should be rounded
        /// </summary>
        /// <param name="corner" type="AjaxControlToolkit.BoxCorners">
        /// Corner to set
        /// </param>
        /// <param name="value" type="Boolean">
        /// True to set the value, False to clear it
        /// </param>
        if (value) {
            this.set_Corners(this._corners | corner);
        } else {
            this.set_Corners(this._corners & ~corner);
        }
    },
    
    get_Color: function() {
        /// <value type="String">
        /// The background color of the rounded area an corners.  By default this picks up the background color of the panel that it is attached to.
        /// </value>
        return this._color;
    },
    set_Color: function(value) {
        if (value != this._color) {
            this._color = value;
            this._isDirty = true;
            this.update();
            this.raisePropertyChanged('Color');
        }
    },

    get_Radius: function() {
        /// <value type="Number" integer="true">
        /// The radius of the corners (and height of the added area).  Default is 5.
        /// </value>
        return this._radius;
    },
    set_Radius: function(value) {
        if (value != this._radius) {
            this._radius = value;
            this._isDirty = true;
            this.update();
            this.raisePropertyChanged('Radius');
        }
    },

    get_Corners: function() {
        /// <value type="AjaxControlToolkit.BoxCorners">
        /// Corners that should be rounded
        /// </value>
        return this._corners;
    },
    set_Corners: function(value) {
        if (value != this._corners) {
            this._corners = value;
            this._isDirty = true;
            this.update();
            this.raisePropertyChanged("Corners");
        }
    },

    get_BorderColor: function() {
        /// <value type="String">
        /// Color of the border (and hence the rounded corners)
        /// </value>
        return this._borderColor;
    },
    set_BorderColor: function(value) {
        if (value != this._borderColor) {
            this._borderColor = value;
            this._isDirty = true;
            this.update();
            this.raisePropertyChanged("BorderColor");
        }
    }
}
AjaxControlToolkit.RoundedCornersBehavior.registerClass('AjaxControlToolkit.RoundedCornersBehavior', AjaxControlToolkit.BehaviorBase);

//END AjaxControlToolkit.RoundedCorners.RoundedCornersBehavior.js
//START AjaxControlToolkit.Compat.Timer.Timer.js
// (c) Copyright Microsoft Corporation.
// This source is subject to the Microsoft Permissive License.
// See http://www.microsoft.com/resources/sharedsource/licensingbasics/sharedsourcelicenses.mspx.
// All other rights reserved.


/// <reference name="MicrosoftAjax.debug.js" />
/// <reference name="MicrosoftAjaxTimer.debug.js" />
/// <reference name="MicrosoftAjaxWebForms.debug.js" />


///////////////////////////////////////////////////////////////////////////////
// Sys.Timer

Sys.Timer = function() {
    Sys.Timer.initializeBase(this);
    
    this._interval = 1000;
    this._enabled = false;
    this._timer = null;
}

Sys.Timer.prototype = {
    get_interval: function() {
        
        return this._interval;
    },
    set_interval: function(value) {
        
        if (this._interval !== value) {
            this._interval = value;
            this.raisePropertyChanged('interval');
            
            if (!this.get_isUpdating() && (this._timer !== null)) {
                this._stopTimer();
                this._startTimer();
            }
        }
    },
    
    get_enabled: function() {
        
        return this._enabled;
    },
    set_enabled: function(value) {
        
        if (value !== this.get_enabled()) {
            this._enabled = value;
            this.raisePropertyChanged('enabled');
            if (!this.get_isUpdating()) {
                if (value) {
                    this._startTimer();
                }
                else {
                    this._stopTimer();
                }
            }
        }
    },

    
    add_tick: function(handler) {
        
        
        this.get_events().addHandler("tick", handler);
    },

    remove_tick: function(handler) {
        
        
        this.get_events().removeHandler("tick", handler);
    },

    dispose: function() {
        this.set_enabled(false);
        this._stopTimer();
        
        Sys.Timer.callBaseMethod(this, 'dispose');
    },
    
    updated: function() {
        Sys.Timer.callBaseMethod(this, 'updated');

        if (this._enabled) {
            this._stopTimer();
            this._startTimer();
        }
    },

    _timerCallback: function() {
        var handler = this.get_events().getHandler("tick");
        if (handler) {
            handler(this, Sys.EventArgs.Empty);
        }
    },

    _startTimer: function() {
        this._timer = window.setInterval(Function.createDelegate(this, this._timerCallback), this._interval);
    },

    _stopTimer: function() {
        window.clearInterval(this._timer);
        this._timer = null;
    }
}

Sys.Timer.descriptor = {
    properties: [   {name: 'interval', type: Number},
                    {name: 'enabled', type: Boolean} ],
    events: [ {name: 'tick'} ]
}

Sys.Timer.registerClass('Sys.Timer', Sys.Component);

//END AjaxControlToolkit.Compat.Timer.Timer.js
//START AjaxControlToolkit.DropShadow.DropShadowBehavior.js
// (c) Copyright Microsoft Corporation.
// This source is subject to the Microsoft Permissive License.
// See http://www.microsoft.com/resources/sharedsource/licensingbasics/sharedsourcelicenses.mspx.
// All other rights reserved.


/// <reference name="MicrosoftAjax.debug.js" />
/// <reference name="MicrosoftAjaxTimer.debug.js" />
/// <reference name="MicrosoftAjaxWebForms.debug.js" />
/// <reference path="../ExtenderBase/BaseScripts.js" />
/// <reference path="../Common/Common.js" />
/// <reference path="../RoundedCorners/RoundedCornersBehavior.js" />
/// <reference path="../Compat/Timer/Timer.js" />


Type.registerNamespace('AjaxControlToolkit');

AjaxControlToolkit.DropShadowBehavior = function(element) {
    /// <summary>
    /// The DropShadowBehavior is used to attach a drop shadow to the element
    /// </summary>
    /// <param name="element" type="Sys.UI.DomElement" domElement="true">
    /// DOM Element the behavior is associated with
    /// </param>
    AjaxControlToolkit.DropShadowBehavior.initializeBase(this, [element]);

    // our property values
    this._opacity = 1.0;
    this._width = 5;

    // the div we create for the shadow.
    this._shadowDiv = null;

    // our timer for tracking position
    this._trackPosition = null;
    this._trackPositionDelay = 50;
    this._timer = null;
    this._tickHandler = null;
    this._roundedBehavior = null;
    this._shadowRoundedBehavior = null;

    this._rounded = false;
    this._radius = 5;

    // our cache of our last size and position for tracking
    this._lastX = null;
    this._lastY = null;
    this._lastW = null;
    this._lastH = null;
}
AjaxControlToolkit.DropShadowBehavior.prototype = {
    initialize : function() {
        /// <summary>
        /// Initialize the behavior
        /// </summary>
        AjaxControlToolkit.DropShadowBehavior.callBaseMethod(this, 'initialize');
        
        var e = this.get_element();

        // flip the styles position to relative so that we z-order properly.
        if ($common.getCurrentStyle(e, 'position', e.style.position) != "absolute") {
            e.style.position = "relative";
        }

        // set up our initial state
        if (this._rounded) {
            this.setupRounded();
        }
        if (this._trackPosition) {
            this.startTimer();
        }
        this.setShadow();
    },

    dispose : function() {
        /// <summary>
        /// Dispose the behavior
        /// </summary>
        this.stopTimer();
        this.disposeShadowDiv();
        AjaxControlToolkit.DropShadowBehavior.callBaseMethod(this, 'dispose');
    },

    buildShadowDiv : function() {
        /// <summary>
        /// Create the div that we'll use as the shadow
        /// </summary>
        
        var e = this.get_element();

        if (!this.get_isInitialized() || !e || !this._width) return;

        var div = document.createElement("DIV");
        div.style.backgroundColor = "black";
        div.style.position= "absolute";
                
        if (e.id) {
            div.id = e.id + "_DropShadow";
        }

        // initialize a control around it, and
        // set up the opacity behavior and rounding
        this._shadowDiv = div;

       e.parentNode.appendChild(div);

       if (this._rounded ) {
            this._shadowDiv.style.height = Math.max(0, e.offsetHeight - (2*this._radius)) + "px";
            if (!this._shadowRoundedBehavior) {
                this._shadowRoundedBehavior = $create(AjaxControlToolkit.RoundedCornersBehavior, {"Radius": this._radius}, null, null, this._shadowDiv);
            } else {
                this._shadowRoundedBehavior.set_Radius(this._radius);
            }
        } else if (this._shadowRoundedBehavior) {
            this._shadowRoundedBehavior.set_Radius(0);
        }

        if (this._opacity != 1.0) {
            this.setupOpacity();
        }

        this.setShadow(false, true);
        this.updateZIndex();
    },

    disposeShadowDiv : function() {
        /// <summary>
        /// Dispose of the div we use as the shadow
        /// </summary>

        if (this._shadowDiv) {
            // on page teardown (or in an update panel, this may already
            // be gone)
            //
            if (this._shadowDiv.parentNode) {
                this._shadowDiv.parentNode.removeChild(this._shadowDiv);
            }            
            this._shadowDiv = null;
        }
        
        if (this._shadowRoundedBehavior) {
            this._shadowRoundedBehavior.dispose();
            this._shadowRoundedBehavior = null;            
        }
    },

    onTimerTick : function() {
        /// <summary>
        /// Timer's tick handler that is used to position the shadow when its target moves
        /// </summary>
        this.setShadow();
    },

    startTimer : function() {
        /// <summary>
        /// Start the timer (and hence start tracking the bounds of the target element)
        /// </summary>

        if (!this._timer) {
            if (!this._tickHandler) {
                this._tickHandler = Function.createDelegate(this, this.onTimerTick);
            }
            this._timer = new Sys.Timer();
            this._timer.set_interval(this._trackPositionDelay);
            this._timer.add_tick(this._tickHandler);
            this._timer.set_enabled(true);
        }
    },

    stopTimer : function() {
        /// <summary>
        /// Stop the timer (and hence stop tracking the bounds of the target element)
        /// </summary>

        // on stop, just clean the thing up completely
        if (this._timer) {
            this._timer.remove_tick(this._tickHandler);
            this._timer.set_enabled(false);
            this._timer.dispose();
            this._timer = null;
        }
    },

    setShadow : function(force, norecurse) {
        /// <summary>
        /// This function does the heavy lifting of positioning and sizing the shadow.
        /// It caches values to avoid extra work - it's called on a timer so we need to
        /// keep it light weight.
        /// </summary>
        /// <param name="force" type="Boolean">
        /// Whether to force the bounds change
        /// </param>
        /// <param name="norecurse" type="Boolean">
        /// Whether to recurse if we need to recreate the shadow div
        /// </param>

        var e = this.get_element();
        if (!this.get_isInitialized() || !e || (!this._width && !force)) return;

        var existingShadow = this._shadowDiv;
        if (!existingShadow) {
            this.buildShadowDiv();
        }

        // Consider calling offsetLeft first to avoid recursive math of location?                
        var location = $common.getLocation(e);
        
        if (force || this._lastX != location.x || this._lastY != location.y || !existingShadow) {
            this._lastX = location.x;
            this._lastY = location.y;

            var w = this.get_Width();
            
            // to work around setlocation bug because elements embedded within fixed\absolute
            // elements are set relative to their parent instead of the window
            if((e.parentNode.style.position == "absolute") || (e.parentNode.style.position == "fixed") )
            {
                location.x = w;
                location.y = w;
            }
            else if (e.parentNode.style.position == "relative")
            {
                location.x = w;
                var paddingTop = e.parentNode.style.paddingTop;
                paddingTop = paddingTop.replace("px", "");
                
                var intPaddingTop = 0;
                intPaddingTop = parseInt(paddingTop);
                 
                location.y = w + intPaddingTop;
            }
            else
            {
                location.x += w;
                location.y += w;
            }
            
            $common.setLocation(this._shadowDiv, location);
        }

        var h = e.offsetHeight;
        var w = e.offsetWidth;

        if (force || h != this._lastH || w != this._lastW || !existingShadow) {
            this._lastW = w;
            this._lastH = h;
            if (!this._rounded || !existingShadow || norecurse) {
               this._shadowDiv.style.width = w + "px";
               this._shadowDiv.style.height = h + "px";
            } else {
                // recurse if we need to redo the div
                this.disposeShadowDiv();
                this.setShadow();
            }
        }

        if (this._shadowDiv) {
            this._shadowDiv.style.visibility = $common.getCurrentStyle(e, 'visibility');
        }
    },

    setupOpacity : function() {
        /// <summary>
        /// Set the opacity of the shadow div
        /// </summary>
        if (this.get_isInitialized() && this._shadowDiv) {
            $common.setElementOpacity(this._shadowDiv, this._opacity);
        }
    },

    setupRounded : function() {
        /// <summary>
        /// Demand create and initialize the RoundedCornersBehavior
        /// </summary>
        
        if (!this._roundedBehavior && this._rounded) {
            this._roundedBehavior = $create(AjaxControlToolkit.RoundedCornersBehavior, null, null, null, this.get_element());            
        }
        if (this._roundedBehavior) {
            this._roundedBehavior.set_Radius(this._rounded ? this._radius : 0);
        }
    },

    updateZIndex : function() {
        /// <summary>
        /// Update the z-Index so the shadow div remains behind the target element
        /// </summary>

        if (!this._shadowDiv) return;
        
        var e = this.get_element();
        var targetZIndex = e.style.zIndex;
        var shadowZIndex = this._shadowDiv.style.zIndex;

        if (shadowZIndex && targetZIndex && targetZIndex > shadowZIndex) {
            return;
        } else {
           targetZIndex = Math.max(2, targetZIndex);
           shadowZIndex = targetZIndex - 1;
        }
        e.style.zIndex = targetZIndex;
        this._shadowDiv.style.zIndex = shadowZIndex;
    },

    updateRoundedCorners : function() {
        /// <summary>
        /// Update the RoundedCorndersBehavior and recreate the shadow div so its corners are rounded as well
        /// </summary>
        if (this.get_isInitialized()) {
            this.setupRounded();
            this.disposeShadowDiv();
            this.setShadow();
        }
    },

    get_Opacity : function() {
        /// <value type="Number">
        /// The opacity of the drop shadow, from 0 (fully transparent) to 1.0 (fully opaque). The default value is .5.
        /// </value>
        return this._opacity;
    },
    set_Opacity : function(value) {
        if (this._opacity != value) {
            this._opacity = value;
            this.setupOpacity();
            this.raisePropertyChanged('Opacity');
        }
    },

    get_Rounded : function() {
        /// <value type="Boolean">
        /// Whether or not the corners of the target and drop shadow should be rounded
        /// </value>
        return this._rounded;
    },
    set_Rounded : function(value) {
        if (value != this._rounded) {
            this._rounded = value;
            this.updateRoundedCorners();
            this.raisePropertyChanged('Rounded');
        }
    },

    get_Radius : function() {
        /// <value type="Number" integer="true">
        /// Radius, in pixels, of the rounded corners
        /// </value>
        return this._radius;
    },
    set_Radius : function(value) {
        if (value != this._radius) {
            this._radius = value;
            this.updateRoundedCorners();
            this.raisePropertyChanged('Radius');
        }
    },

    get_Width : function() {
        /// <value type="Number" integer="true">
        /// Width in pixels of the drop shadow.  The default value is 5 pixels.
        /// </value>
        return this._width;
    },
    set_Width : function(value) {
        if (value != this._width) {
            this._width = value;
            
            if (this._shadowDiv) {
                $common.setVisible(this._shadowDiv, value > 0);
            }
            
            this.setShadow(true);
            this.raisePropertyChanged('Width');
        }
    },

    get_TrackPositionDelay : function() {
        /// <value type="Number">
        /// Length of the timer interval used when tracking the position of the target
        /// </value>
        return this._trackPositionDelay;
    },
    set_TrackPositionDelay : function(value) {
        if (value != this._trackPositionDelay) {
            this._trackPositionDelay = value;
            if (this._trackPosition) {
                this.stopTimer();
                this.startTimer();
            }
            this.raisePropertyChanged('TrackPositionDelay');
        }
    },

    get_TrackPosition : function() {
        /// <value type="Boolean">
        /// Whether the drop shadow should track the position of the panel it is attached to. Use this if the panel is absolutely positioned or will otherwise move.
        /// </value>
        return this._trackPosition;
    },
    set_TrackPosition : function(value) {
        if (value != this._trackPosition) {
            this._trackPosition = value;
            if (this.get_element()) {
                if (value) {
                    this.startTimer();
                } else {
                    this.stopTimer();
                }
            }
            this.raisePropertyChanged('TrackPosition');
        }
    }
}
AjaxControlToolkit.DropShadowBehavior.registerClass('AjaxControlToolkit.DropShadowBehavior', AjaxControlToolkit.BehaviorBase);
//    getDescriptor : function() {
//        var td = AjaxControlToolkit.DropShadowBehavior.callBaseMethod(this, 'getDescriptor');
//        td.addProperty('Opacity', Number);
//        td.addProperty('Width', Number);
//        td.addProperty('TrackPosition', Boolean);
//        td.addProperty('TrackPositionDelay', Number);
//        td.addProperty('Rounded', Boolean);
//        td.addProperty('Radius', Number);
//        return td;
//    },

//END AjaxControlToolkit.DropShadow.DropShadowBehavior.js
//START AjaxControlToolkit.DynamicPopulate.DynamicPopulateBehavior.js
// (c) Copyright Microsoft Corporation.
// This source is subject to the Microsoft Permissive License.
// See http://www.microsoft.com/resources/sharedsource/licensingbasics/sharedsourcelicenses.mspx.
// All other rights reserved.


/// <reference name="MicrosoftAjax.debug.js" />
/// <reference name="MicrosoftAjaxTimer.debug.js" />
/// <reference name="MicrosoftAjaxWebForms.debug.js" />
/// <reference path="../ExtenderBase/BaseScripts.js" />
/// <reference path="../Common/Common.js" />


Type.registerNamespace('AjaxControlToolkit');

AjaxControlToolkit.DynamicPopulateBehavior = function(element) {
    /// <summary>
    /// The DynamicPopulateBehavior replaces the contents of an element with the result of a web service or page method call.  The method call returns a string of HTML that is inserted as the children of the target element.
    /// </summary>
    /// <param name="element" type="Sys.UI.DomElement" domElement="true">
    /// DOM Element the behavior is associated with
    /// </param>
    AjaxControlToolkit.DynamicPopulateBehavior.initializeBase(this, [element]);
    
    this._servicePath = null;
    this._serviceMethod = null;
    this._contextKey = null;
    this._cacheDynamicResults = false;
    this._populateTriggerID = null;
    this._setUpdatingCssClass = null;
    this._clearDuringUpdate = true;
    this._customScript = null;
    
    this._clickHandler = null;
    
    this._callID = 0;
    this._currentCallID = -1;
    
    // Whether or not we've already populated (used for cacheDynamicResults)
    this._populated = false;
}
AjaxControlToolkit.DynamicPopulateBehavior.prototype = {
    initialize : function() {
        /// <summary>
        /// Initialize the behavior
        /// </summary>
        AjaxControlToolkit.DynamicPopulateBehavior.callBaseMethod(this, 'initialize');
        $common.prepareHiddenElementForATDeviceUpdate();        
    
        // hook up the trigger if we have one.
        if (this._populateTriggerID) {
            var populateTrigger = $get(this._populateTriggerID);
            if (populateTrigger) {
                this._clickHandler = Function.createDelegate(this, this._onPopulateTriggerClick);
                $addHandler(populateTrigger, "click", this._clickHandler);
            }
        }
    },
    
    dispose : function() {
        /// <summary>
        /// Dispose the behavior
        /// </summary>

        // clean up the trigger event.
        if (this._populateTriggerID && this._clickHandler) {
            var populateTrigger = $get(this._populateTriggerID);
            if (populateTrigger) {
                $removeHandler(populateTrigger, "click", this._clickHandler);
            }
            this._populateTriggerID = null;
            this._clickHandler = null;
        }
       
        AjaxControlToolkit.DynamicPopulateBehavior.callBaseMethod(this, 'dispose');
    },
    
    populate : function(contextKey) {
        /// <summary>
        /// Get the dymanic content and use it to populate the target element
        /// </summary>
        /// <param name="contextKey" type="String" mayBeNull="true" optional="true">
        /// An arbitrary string value to be passed to the web method. For example, if the element to be
        /// populated is within a data-bound repeater, this could be the ID of the current row.
        /// </param>
        
        // Don't populate if we already cached the results
        if (this._populated && this._cacheDynamicResults) {
            return;
        }

        // Initialize the population if this is the very first call
        if (this._currentCallID == -1) {
            var eventArgs = new Sys.CancelEventArgs();
            this.raisePopulating(eventArgs);
            if (eventArgs.get_cancel()) {
                return;
            }
            this._setUpdating(true);
        }
        
        // Either run the custom population script or invoke the web service
        if (this._customScript) {
            // Call custom javascript call to populate control
            var scriptResult = eval(this._customScript);
            this._setTargetHtml(scriptResult); 
            this._setUpdating(false);
         } else {
             this._currentCallID = ++this._callID;
             if (this._servicePath && this._serviceMethod) {
                Sys.Net.WebServiceProxy.invoke(this._servicePath, this._serviceMethod, false,
                    { contextKey:(contextKey ? contextKey : this._contextKey) },
                    Function.createDelegate(this, this._onMethodComplete), Function.createDelegate(this, this._onMethodError),
                    this._currentCallID);
                $common.updateFormToRefreshATDeviceBuffer();
             }
        }
    },

    _onMethodComplete : function (result, userContext, methodName) {
        /// <summary>
        /// Callback used when the populating service returns successfully
        /// </summary>
        /// <param name="result" type="Object" mayBeNull="">
        /// The data returned from the Web service method call
        /// </param>
        /// <param name="userContext" type="Object">
        /// The context information that was passed when the Web service method was invoked
        /// </param>        
        /// <param name="methodName" type="String">
        /// The Web service method that was invoked
        /// </param>

        // ignore if it's not the current call.
        if (userContext != this._currentCallID) return;

        this._setTargetHtml(result);

        this._setUpdating(false);
    },

    _onMethodError : function(webServiceError, userContext, methodName) {
        /// <summary>
        /// Callback used when the populating service fails
        /// </summary>
        /// <param name="webServiceError" type="Sys.Net.WebServiceError">
        /// Web service error
        /// </param>
        /// <param name="userContext" type="Object">
        /// The context information that was passed when the Web service method was invoked
        /// </param>        
        /// <param name="methodName" type="String">
        /// The Web service method that was invoked
        /// </param>

        // ignore if it's not the current call.
        if (userContext != this._currentCallID) return;

        if (webServiceError.get_timedOut()) {
            this._setTargetHtml(AjaxControlToolkit.Resources.DynamicPopulate_WebServiceTimeout);
        } else {
            this._setTargetHtml(String.format(AjaxControlToolkit.Resources.DynamicPopulate_WebServiceError, webServiceError.get_statusCode()));
        }

        this._setUpdating(false);
    },

    _onPopulateTriggerClick : function() {
        /// <summary>
        /// Handler for the element described by PopulateTriggerID's click event
        /// </summary>

        // just call through to the trigger.
        this.populate(this._contextKey);
    },
    
    _setUpdating : function(updating) {
        /// <summary>
        /// Toggle the display elements to indicate if they are being updated or not
        /// </summary>
        /// <param name="updating" type="Boolean">
        /// Whether or not the display should indicated it is being updated
        /// </param>

        this.setStyle(updating);
        
        if (!updating) {
            this._currentCallID = -1;
            this._populated = true;
            this.raisePopulated(this, Sys.EventArgs.Empty);
        }
    },
    
    _setTargetHtml : function(value) {
        /// <summary>
        /// Populate the target element with the given value
        /// </summary>
        /// <param name="value" type="String">
        /// The data to populate the target element.
        /// </param>
        
        // Make sure the element is still accessible
        var e = this.get_element()
        if (e) {
            // Use value for input elements; otherwise innerHTML
            if (e.tagName == "INPUT") {
                e.value = value;
            } else {
                e.innerHTML = value;
            }
        }
    },
    
    setStyle : function(updating) {
        /// <summary>
        /// Set the style of the display
        /// </summary>
        /// <param name="updating" type="Boolean">
        /// Whether or not the display is being updated
        /// </param>
        
        var e = this.get_element();
        if (this._setUpdatingCssClass) {
            if (!updating) {
                e.className = this._oldCss;
                this._oldCss = null;
            } else {
                this._oldCss = e.className;
                e.className = this._setUpdatingCssClass;
            }
        }
        
        if (updating && this._clearDuringUpdate) {
            this._setTargetHtml("");
        }
    },
    
    get_ClearContentsDuringUpdate : function() {
        /// <value type="Boolean">
        /// Whether the contents of the target should be cleared when an update begins
        /// </value>
        return this._clearDuringUpdate;
    },
    set_ClearContentsDuringUpdate : function(value) {
        if (this._clearDuringUpdate != value) {
            this._clearDuringUpdate = value;
            this.raisePropertyChanged('ClearContentsDuringUpdate');
        }
    },
    
    get_ContextKey : function() {
        /// <value type="String">
        /// An arbitrary string value to be passed to the web method.
        /// For example, if the element to be populated is within a
        /// data-bound repeater, this could be the ID of the current row.
        /// </value>
        return this._contextKey;
    },
    set_ContextKey : function(value) {
        if (this._contextKey != value) {
            this._contextKey = value;
            this.raisePropertyChanged('ContextKey');
        }
    },
    
    get_PopulateTriggerID : function() {
        /// <value type="String" mayBeNull="true" optional="true">
        /// Name of an element that triggers the population of the target when clicked
        /// </value>
        return this._populateTriggerID;
    },
    set_PopulateTriggerID : function(value) {
        if (this._populateTriggerID != value) {
            this._populateTriggerID = value;
            this.raisePropertyChanged('PopulateTriggerID');
        }
    },
    
    get_ServicePath : function() {
        /// <value type="String" mayBeNull="true" optional="true">
        /// The URL of the web service to call.  If the ServicePath is not defined, then we will invoke a PageMethod instead of a web service.
        /// </value>
        return this._servicePath;
    },
    set_ServicePath : function(value) {
        if (this._servicePath != value) {
            this._servicePath = value;
            this.raisePropertyChanged('ServicePath');
        }
    },
    
    get_ServiceMethod : function() {
        /// <value type="String">
        /// The name of the method to call on the page or web service
        /// </value>
        /// <remarks>
        /// The signature of the method must exactly match the following:
        ///    [WebMethod]
        ///    string DynamicPopulateMethod(string contextKey)
        ///    {
        ///        ...
        ///    }
        /// </remarks>
        return this._serviceMethod;
    },
    set_ServiceMethod : function(value) {
        if (this._serviceMethod != value) {
            this._serviceMethod = value;
            this.raisePropertyChanged('ServiceMethod');
        }
    },
    
    get_cacheDynamicResults : function() {
        /// <value type="Boolean" mayBeNull="false">
        /// Whether the results of the dynamic population should be cached and
        /// not fetched again after the first load
        /// </value>
        return this._cacheDynamicResults;
    },
    set_cacheDynamicResults : function(value) {
        if (this._cacheDynamicResults != value) {
            this._cacheDynamicResults = value;
            this.raisePropertyChanged('cacheDynamicResults');
        }
    },
    
    get_UpdatingCssClass : function() {
        /// <value type="String">
        /// The CSS class to apply to the target during asynchronous calls
        /// </value>
        return this._setUpdatingCssClass;
    },
    set_UpdatingCssClass : function(value) {
        if (this._setUpdatingCssClass != value) {
            this._setUpdatingCssClass = value;
            this.raisePropertyChanged('UpdatingCssClass');
        }
    },
    
    get_CustomScript : function() {
        /// <value type="String">
        /// The script to invoke instead of calling a Web or Page method. This script must evaluate to a string value.
        /// </value>
        return this._customScript;
    },   
    set_CustomScript : function(value) {
        if (this._customScript != value) {
            this._customScript = value;
            this.raisePropertyChanged('CustomScript');
        }
    },
    
    add_populating : function(handler) {
        /// <summary>
        /// Add an event handler for the populating event
        /// </summary>
        /// <param name="handler" type="Function" mayBeNull="false">
        /// Event handler
        /// </param>
        /// <returns />
        this.get_events().addHandler('populating', handler);
    },
    remove_populating : function(handler) {
        /// <summary>
        /// Remove an event handler from the populating event
        /// </summary>
        /// <param name="handler" type="Function" mayBeNull="false">
        /// Event handler
        /// </param>
        /// <returns />
        this.get_events().removeHandler('populating', handler);
    },
    raisePopulating : function(eventArgs) {
        /// <summary>
        /// Raise the populating event
        /// </summary>
        /// <param name="eventArgs" type="Sys.CancelEventArgs" mayBeNull="false">
        /// Event arguments for the populating event
        /// </param>
        /// <returns />
        
        var handler = this.get_events().getHandler('populating');
        if (handler) {
            handler(this, eventArgs);
        }
    },
    
    add_populated : function(handler) {
        /// <summary>
        /// Add an event handler for the populated event
        /// </summary>
        /// <param name="handler" type="Function" mayBeNull="false">
        /// Event handler
        /// </param>
        /// <returns />
        this.get_events().addHandler('populated', handler);
    },
    remove_populated : function(handler) {
        /// <summary>
        /// Remove an event handler from the populated event
        /// </summary>
        /// <param name="handler" type="Function" mayBeNull="false">
        /// Event handler
        /// </param>
        /// <returns />
        this.get_events().removeHandler('populated', handler);
    },
    raisePopulated : function(eventArgs) {
        /// <summary>
        /// Raise the populated event
        /// </summary>
        /// <param name="eventArgs" type="Sys.EventArgs" mayBeNull="false">
        /// Event arguments for the populated event
        /// </param>
        /// <returns />
         
        var handler = this.get_events().getHandler('populated');
        if (handler) {
            handler(this, eventArgs);
        }
    }
}
AjaxControlToolkit.DynamicPopulateBehavior.registerClass('AjaxControlToolkit.DynamicPopulateBehavior', AjaxControlToolkit.BehaviorBase);

//END AjaxControlToolkit.DynamicPopulate.DynamicPopulateBehavior.js
//START AjaxControlToolkit.Compat.DragDrop.DragDropScripts.js
// (c) Copyright Microsoft Corporation.
// This source is subject to the Microsoft Permissive License.
// See http://www.microsoft.com/resources/sharedsource/licensingbasics/sharedsourcelicenses.mspx.
// All other rights reserved.


/// <reference name="MicrosoftAjax.debug.js" />
/// <reference name="MicrosoftAjaxTimer.debug.js" />
/// <reference name="MicrosoftAjaxWebForms.debug.js" />
/// <reference path="../../Common/Common.js" />
/// <reference path="../Timer/Timer.js" />


///////////////////////////////////////////////////////////////////////////////
// IDropSource

Type.registerNamespace('AjaxControlToolkit');

AjaxControlToolkit.IDragSource = function() {
}
AjaxControlToolkit.IDragSource.prototype = {
    // Type get_dragDataType()
    get_dragDataType: function() { throw Error.notImplemented(); },
    // Object getDragData(Context)
    getDragData: function() { throw Error.notImplemented(); },
    // DragMode get_dragMode()
    get_dragMode: function() { throw Error.notImplemented(); },
    // void onDragStart()
    onDragStart: function() { throw Error.notImplemented(); },
    // void onDrag()
    onDrag: function() { throw Error.notImplemented(); },
    // void onDragEnd(Cancelled)
    onDragEnd: function() { throw Error.notImplemented(); }
}
AjaxControlToolkit.IDragSource.registerInterface('AjaxControlToolkit.IDragSource');

///////////////////////////////////////////////////////////////////////////////
// IDropTarget
AjaxControlToolkit.IDropTarget = function() {
}
AjaxControlToolkit.IDropTarget.prototype = {
    get_dropTargetElement: function() { throw Error.notImplemented(); },
    // bool canDrop(DragMode, DataType, Data)
    canDrop: function() { throw Error.notImplemented(); },
    // void drop(DragMode, DataType, Data)
    drop: function() { throw Error.notImplemented(); },
    // void onDragEnterTarget(DragMode, DataType, Data)
    onDragEnterTarget: function() { throw Error.notImplemented(); },
    // void onDragLeaveTarget(DragMode, DataType, Data)
    onDragLeaveTarget: function() { throw Error.notImplemented(); },
    // void onDragInTarget(DragMode, DataType, Data)
    onDragInTarget: function() { throw Error.notImplemented(); }
}
AjaxControlToolkit.IDropTarget.registerInterface('AjaxControlToolkit.IDropTarget');

///////////////////////////////////////////////
// DragMode
//

AjaxControlToolkit.DragMode = function() {
    throw Error.invalidOperation();
}
AjaxControlToolkit.DragMode.prototype = {
    Copy: 0,
    Move: 1
}
AjaxControlToolkit.DragMode.registerEnum('AjaxControlToolkit.DragMode');

////////////////////////////////////////////////////////////////////
// DragDropEventArgs
//

AjaxControlToolkit.DragDropEventArgs = function(dragMode, dragDataType, dragData) {
    this._dragMode = dragMode;
    this._dataType = dragDataType;
    this._data = dragData;
}
AjaxControlToolkit.DragDropEventArgs.prototype = {
    get_dragMode: function() {
        return this._dragMode || null;
    },
    get_dragDataType: function() {
        return this._dataType || null;
    },
    get_dragData: function() {
        return this._data || null;
    }
}
AjaxControlToolkit.DragDropEventArgs.registerClass('AjaxControlToolkit.DragDropEventArgs');


AjaxControlToolkit._DragDropManager = function() {
    this._instance = null;
    this._events =  null;
}
AjaxControlToolkit._DragDropManager.prototype = {

    add_dragStart: function(handler) {
        this.get_events().addHandler('dragStart', handler);
    },
    remove_dragStart: function(handler) {
        this.get_events().removeHandler('dragStart', handler);
    },
    
    get_events: function() {
    // todo: doc comments. this one is commented out (two //) due to a bug with the preprocessor.
        // <value type="Sys.EventHandlerList">
        // </value>
        if (!this._events) {
            this._events = new Sys.EventHandlerList();
        }
        return this._events;
    },
    
    add_dragStop: function(handler) {
        this.get_events().addHandler('dragStop', handler);
    },
    remove_dragStop: function(handler) {
        this.get_events().removeHandler('dragStop', handler);
    },
    
    _getInstance: function() {
        if (!this._instance) {
            if (Sys.Browser.agent === Sys.Browser.InternetExplorer) {
                this._instance = new AjaxControlToolkit.IEDragDropManager();
            }
            else {
                this._instance = new AjaxControlToolkit.GenericDragDropManager();
            }
            this._instance.initialize();
            this._instance.add_dragStart(Function.createDelegate(this, this._raiseDragStart));
            this._instance.add_dragStop(Function.createDelegate(this, this._raiseDragStop));
        }
        return this._instance;
    },
    
    startDragDrop: function(dragSource, dragVisual, context) {
        this._getInstance().startDragDrop(dragSource, dragVisual, context);
    },
    
    registerDropTarget: function(target) {
        this._getInstance().registerDropTarget(target);
    },
    
    unregisterDropTarget: function(target) {
        this._getInstance().unregisterDropTarget(target);
    },
    
    dispose: function() {
        delete this._events;
        Sys.Application.unregisterDisposableObject(this);
        Sys.Application.removeComponent(this);
    },
    
    _raiseDragStart: function(sender, eventArgs) {
        var handler = this.get_events().getHandler('dragStart');
        if(handler) {
            handler(this, eventArgs);
        }
    },
    
    _raiseDragStop: function(sender, eventArgs) {
        var handler = this.get_events().getHandler('dragStop');
        if(handler) {
            handler(this, eventArgs);
        }
    }
}
AjaxControlToolkit._DragDropManager.registerClass('AjaxControlToolkit._DragDropManager');
AjaxControlToolkit.DragDropManager = new AjaxControlToolkit._DragDropManager();


AjaxControlToolkit.IEDragDropManager = function() {
    AjaxControlToolkit.IEDragDropManager.initializeBase(this);
    
    this._dropTargets = null;
    // Radius of the cursor used to determine what drop target we 
    // are hovering. Anything below the cursor's zone may be a 
    // potential drop target.
    this._radius = 10;
    this._activeDragVisual = null;
    this._activeContext = null;
    this._activeDragSource = null;
    this._underlyingTarget = null;
    this._oldOffset = null;
    this._potentialTarget = null;
    this._isDragging = false;
    this._mouseUpHandler = null;
    this._documentMouseMoveHandler = null;
    this._documentDragOverHandler = null;
    this._dragStartHandler = null;
    this._mouseMoveHandler = null;
    this._dragEnterHandler = null;
    this._dragLeaveHandler = null;
    this._dragOverHandler = null;
    this._dropHandler = null;
}
AjaxControlToolkit.IEDragDropManager.prototype = {

    add_dragStart : function(handler) {
        this.get_events().addHandler("dragStart", handler);
    },
    
    remove_dragStart : function(handler) {
        this.get_events().removeHandler("dragStart", handler);
    },
    
    add_dragStop : function(handler) {
        this.get_events().addHandler("dragStop", handler);
    },
    
    remove_dragStop : function(handler) {
        this.get_events().removeHandler("dragStop", handler);
    },
    
    initialize : function() {
        AjaxControlToolkit.IEDragDropManager.callBaseMethod(this, 'initialize');
        this._mouseUpHandler = Function.createDelegate(this, this._onMouseUp);
        this._documentMouseMoveHandler = Function.createDelegate(this, this._onDocumentMouseMove);
        this._documentDragOverHandler = Function.createDelegate(this, this._onDocumentDragOver);
        this._dragStartHandler = Function.createDelegate(this, this._onDragStart);
        this._mouseMoveHandler = Function.createDelegate(this, this._onMouseMove);
        this._dragEnterHandler = Function.createDelegate(this, this._onDragEnter);
        this._dragLeaveHandler = Function.createDelegate(this, this._onDragLeave);
        this._dragOverHandler = Function.createDelegate(this, this._onDragOver);
        this._dropHandler = Function.createDelegate(this, this._onDrop);
    },
    
    
    dispose : function() {
        if(this._dropTargets) {
            for (var i = 0; i < this._dropTargets; i++) {
                this.unregisterDropTarget(this._dropTargets[i]);
            }
            this._dropTargets = null;
        }
        
        AjaxControlToolkit.IEDragDropManager.callBaseMethod(this, 'dispose');
    },
    

    startDragDrop : function(dragSource, dragVisual, context) {
        var ev = window._event;
        
        // Don't allow drag and drop if there is another active drag operation going on.
        if (this._isDragging) {
            return;
        }
        
        this._underlyingTarget = null;
        this._activeDragSource = dragSource;
        this._activeDragVisual = dragVisual;
        this._activeContext = context;
        
        var mousePosition = { x: ev.clientX, y: ev.clientY };
        
        // By default we use absolute positioning, unless a different type 
        // of positioning is set explicitly.
        dragVisual.originalPosition = dragVisual.style.position;
        dragVisual.style.position = "absolute";
        
        document._lastPosition = mousePosition;
        dragVisual.startingPoint = mousePosition;
        var scrollOffset = this.getScrollOffset(dragVisual, /* recursive */ true);
        
        dragVisual.startingPoint = this.addPoints(dragVisual.startingPoint, scrollOffset);
        
        if (dragVisual.style.position == "absolute") {
            dragVisual.startingPoint = this.subtractPoints(dragVisual.startingPoint, $common.getLocation(dragVisual));
        }
        else {
            var left = parseInt(dragVisual.style.left);
            var top = parseInt(dragVisual.style.top);
            if (isNaN(left)) left = "0";
            if (isNaN(top)) top = "0";
            
            dragVisual.startingPoint = this.subtractPoints(dragVisual.startingPoint, { x: left, y: top });
        }
        
        // Monitor DOM changes.
        this._prepareForDomChanges();
        dragSource.onDragStart();
        var eventArgs = new AjaxControlToolkit.DragDropEventArgs(
            dragSource.get_dragMode(),
            dragSource.get_dragDataType(),
            dragSource.getDragData(context));
        var handler = this.get_events().getHandler('dragStart');
        if(handler) handler(this,eventArgs);
        this._recoverFromDomChanges();
        
        this._wireEvents();
        
        this._drag(/* isInitialDrag */ true);
    },
    
    
    _stopDragDrop : function(cancelled) {
        var ev = window._event;
        if (this._activeDragSource != null) {
            this._unwireEvents();
        
            if (!cancelled) {
                // The drag operation is cancelled if there 
                // is no drop target.
                cancelled = (this._underlyingTarget == null);
            }

            if (!cancelled && this._underlyingTarget != null) {
                this._underlyingTarget.drop(this._activeDragSource.get_dragMode(), this._activeDragSource.get_dragDataType(),
                    this._activeDragSource.getDragData(this._activeContext));
            }

            this._activeDragSource.onDragEnd(cancelled);
            var handler = this.get_events().getHandler('dragStop');
            if(handler) handler(this,Sys.EventArgs.Empty);
            
            this._activeDragVisual.style.position = this._activeDragVisual.originalPosition;
        
            this._activeDragSource = null;
            this._activeContext = null;
            this._activeDragVisual = null;
            this._isDragging = false;
            this._potentialTarget = null;
            ev.preventDefault();
        }
    },
    
    _drag : function(isInitialDrag) {
        var ev = window._event;
        var mousePosition = { x: ev.clientX, y: ev.clientY };
        
        // NOTE: We store the event object to be able to determine the current 
        // mouse position in Mozilla in other event handlers such as keydown.
        document._lastPosition = mousePosition;
        
        var scrollOffset = this.getScrollOffset(this._activeDragVisual, /* recursive */ true);
        var position = this.addPoints(this.subtractPoints(mousePosition, this._activeDragVisual.startingPoint), scrollOffset);
        
        // Check if the visual moved at all.
        if (!isInitialDrag && parseInt(this._activeDragVisual.style.left) == position.x && parseInt(this._activeDragVisual.style.top) == position.y) {
            return;
        }
        
        $common.setLocation(this._activeDragVisual, position);
        
        // Monitor DOM changes.
        this._prepareForDomChanges();
        this._activeDragSource.onDrag();
        this._recoverFromDomChanges();
        
        // Find a potential target.
        this._potentialTarget = this._findPotentialTarget(this._activeDragSource, this._activeDragVisual);
        
        var movedToOtherTarget = (this._potentialTarget != this._underlyingTarget || this._potentialTarget == null);
        // Check if we are leaving an underlying target.
        if (movedToOtherTarget && this._underlyingTarget != null) {
            this._leaveTarget(this._activeDragSource, this._underlyingTarget);
        }
        
        if (this._potentialTarget != null) {
            // Check if we are entering a new target.
            if (movedToOtherTarget) {
                this._underlyingTarget = this._potentialTarget;
                
                // Enter the new target.
                this._enterTarget(this._activeDragSource, this._underlyingTarget);
            }
            else {
                this._moveInTarget(this._activeDragSource, this._underlyingTarget);
            }
        }
        else {
            this._underlyingTarget = null;
        }
    },
    
    
    _wireEvents : function() {
        $addHandler(document, "mouseup", this._mouseUpHandler);
        $addHandler(document, "mousemove", this._documentMouseMoveHandler);
        $addHandler(document.body, "dragover", this._documentDragOverHandler);
        
        $addHandler(this._activeDragVisual, "dragstart", this._dragStartHandler);
        $addHandler(this._activeDragVisual, "dragend", this._mouseUpHandler);
        $addHandler(this._activeDragVisual, "drag", this._mouseMoveHandler);
    },
    
    
    _unwireEvents : function() {
        $removeHandler(this._activeDragVisual, "drag", this._mouseMoveHandler);
        $removeHandler(this._activeDragVisual, "dragend", this._mouseUpHandler);
        $removeHandler(this._activeDragVisual, "dragstart", this._dragStartHandler);

        $removeHandler(document.body, "dragover", this._documentDragOverHandler);
        $removeHandler(document, "mousemove", this._documentMouseMoveHandler);
        $removeHandler(document, "mouseup", this._mouseUpHandler);
    },
    
    
    registerDropTarget : function(dropTarget) {
        if (this._dropTargets == null) {
            this._dropTargets = [];
        }
        Array.add(this._dropTargets, dropTarget);
        
        this._wireDropTargetEvents(dropTarget);
    },
    
    
    unregisterDropTarget : function(dropTarget) {
        this._unwireDropTargetEvents(dropTarget);
        if (this._dropTargets) {
            Array.remove(this._dropTargets, dropTarget);
        }
    },
    
    
    _wireDropTargetEvents : function(dropTarget) {
        var associatedElement = dropTarget.get_dropTargetElement();
        associatedElement._dropTarget = dropTarget;
        $addHandler(associatedElement, "dragenter",  this._dragEnterHandler);
        $addHandler(associatedElement, "dragleave",  this._dragLeaveHandler);
        $addHandler(associatedElement, "dragover", this._dragOverHandler);
        $addHandler(associatedElement, "drop", this._dropHandler);
    },
    
    
    _unwireDropTargetEvents : function(dropTarget) {
        var associatedElement = dropTarget.get_dropTargetElement();
        // make sure that the handlers are not removed twice
        if(associatedElement._dropTarget)
        {
            associatedElement._dropTarget = null;
            $removeHandler(associatedElement, "dragenter",  this._dragEnterHandler);
            $removeHandler(associatedElement, "dragleave",  this._dragLeaveHandler);
            $removeHandler(associatedElement, "dragover", this._dragOverHandler);
            $removeHandler(associatedElement, "drop", this._dropHandler);
        }
    },
    
    
    _onDragStart : function(ev) {
        window._event = ev;
        document.selection.empty();
        
        var dt = ev.dataTransfer;
        if(!dt && ev.rawEvent) dt = ev.rawEvent.dataTransfer;
        
        var dataType = this._activeDragSource.get_dragDataType().toLowerCase();
        var data = this._activeDragSource.getDragData(this._activeContext);
        
        if (data) {
            // TODO: How do we want to deal with 'non-compatible types'?
            if (dataType != "text" && dataType != "url") {
                dataType = "text";
                
                if (data.innerHTML != null) {
                    data = data.innerHTML;
                }
            }
            
            dt.effectAllowed = "move";
            dt.setData(dataType, data.toString());
        }
    },
    
    _onMouseUp : function(ev) {
        window._event = ev;
        this._stopDragDrop(false);
    },
    
    _onDocumentMouseMove : function(ev) {
        window._event = ev;
        this._dragDrop();
    },

    _onDocumentDragOver : function(ev) {
        window._event = ev;
        if(this._potentialTarget) ev.preventDefault();
        //ev.returnValue = (_potentialTarget == null);
    },
    
    _onMouseMove : function(ev) {
        window._event = ev;
        this._drag();
    },
    
    _onDragEnter : function(ev) {
        window._event = ev;
        if (this._isDragging) {
            ev.preventDefault();
            //ev.returnValue = false;
        }
        else {
            // An external object is dragged to the drop target.
            var dataObjects = AjaxControlToolkit.IEDragDropManager._getDataObjectsForDropTarget(this._getDropTarget(ev.target));
            for (var i = 0; i < dataObjects.length; i++) {
                this._dropTarget.onDragEnterTarget(AjaxControlToolkit.DragMode.Copy, dataObjects[i].type, dataObjects[i].value);
            }
        }
    },
    
    _onDragLeave : function(ev) {
        window._event = ev;
        if (this._isDragging) {
            ev.preventDefault();
            //ev.returnValue = false;
        }
        else {
            // An external object is dragged to the drop target.
            var dataObjects = AjaxControlToolkit.IEDragDropManager._getDataObjectsForDropTarget(this._getDropTarget(ev.target));
            for (var i = 0; i < dataObjects.length; i++) {
                this._dropTarget.onDragLeaveTarget(AjaxControlToolkit.DragMode.Copy, dataObjects[i].type, dataObjects[i].value);
            }
        }
    },
    
    _onDragOver : function(ev) {
        window._event = ev;
        if (this._isDragging) {
            ev.preventDefault();
            //ev.returnValue = false;
        }
        else {
            // An external object is dragged over the drop target.
            var dataObjects = AjaxControlToolkit.IEDragDropManager._getDataObjectsForDropTarget(this._getDropTarget(ev.target));
            for (var i = 0; i < dataObjects.length; i++) {
                this._dropTarget.onDragInTarget(AjaxControlToolkit.DragMode.Copy, dataObjects[i].type, dataObjects[i].value);
            }
        }
    },
    
    _onDrop : function(ev) {
        window._event = ev;
        if (!this._isDragging) {
            // An external object is dropped on the drop target.
            var dataObjects = AjaxControlToolkit.IEDragDropManager._getDataObjectsForDropTarget(this._getDropTarget(ev.target));
            for (var i = 0; i < dataObjects.length; i++) {
                this._dropTarget.drop(AjaxControlToolkit.DragMode.Copy, dataObjects[i].type, dataObjects[i].value);
            }
        }
        ev.preventDefault();
        //ev.returnValue = false;
    },
    
    _getDropTarget : function(element) {
        while (element) {
            if (element._dropTarget != null) {
                return element._dropTarget;
            }
            element = element.parentNode;
        }
        return null;
    },
    
    _dragDrop : function() {
        if (this._isDragging) {
            return;
        }
        
        this._isDragging = true;
        this._activeDragVisual.dragDrop();
        document.selection.empty();
    },
    
    _moveInTarget : function(dragSource, dropTarget) {
        // Monitor DOM changes.
        this._prepareForDomChanges();
        dropTarget.onDragInTarget(dragSource.get_dragMode(), dragSource.get_dragDataType(), dragSource.getDragData(this._activeContext));
        this._recoverFromDomChanges();
    },
    
    _enterTarget : function(dragSource, dropTarget) {
        // Monitor DOM changes.
        this._prepareForDomChanges();
        dropTarget.onDragEnterTarget(dragSource.get_dragMode(), dragSource.get_dragDataType(), dragSource.getDragData(this._activeContext));
        this._recoverFromDomChanges();
    },
    
    _leaveTarget : function(dragSource, dropTarget) {
        // Monitor DOM changes.
        this._prepareForDomChanges();
        dropTarget.onDragLeaveTarget(dragSource.get_dragMode(), dragSource.get_dragDataType(), dragSource.getDragData(this._activeContext));
        this._recoverFromDomChanges();
    },
    
    _findPotentialTarget : function(dragSource, dragVisual) {
        var ev = window._event;

        if (this._dropTargets == null) {
            return null;
        }
        
        var type = dragSource.get_dragDataType();
        var mode = dragSource.get_dragMode();
        var data = dragSource.getDragData(this._activeContext);

        // Get the current cursor location.
        var scrollOffset = this.getScrollOffset(document.body, /* recursive */ true);
        var x = ev.clientX + scrollOffset.x;
        var y = ev.clientY + scrollOffset.y;
        var cursorRect = { x: x - this._radius, y: y - this._radius, width: this._radius * 2, height: this._radius * 2 };
        
        // Find any targets near the current cursor location.
        var targetRect;
        for (var i = 0; i < this._dropTargets.length; i++) {
            targetRect = $common.getBounds(this._dropTargets[i].get_dropTargetElement());
            if ($common.overlaps(cursorRect, targetRect) && this._dropTargets[i].canDrop(mode, type, data)) {
                return this._dropTargets[i];
            }
        }
        
        return null;
    },
    
    _prepareForDomChanges : function() {
        this._oldOffset = $common.getLocation(this._activeDragVisual);
    },
    
    _recoverFromDomChanges : function() {
        var newOffset = $common.getLocation(this._activeDragVisual);
        if (this._oldOffset.x != newOffset.x || this._oldOffset.y != newOffset.y) {
            this._activeDragVisual.startingPoint = this.subtractPoints(this._activeDragVisual.startingPoint, this.subtractPoints(this._oldOffset, newOffset));
            scrollOffset = this.getScrollOffset(this._activeDragVisual, /* recursive */ true);
            var position = this.addPoints(this.subtractPoints(document._lastPosition, this._activeDragVisual.startingPoint), scrollOffset);
            $common.setLocation(this._activeDragVisual, position);
        }
    },
    
    addPoints : function(p1, p2) {
        return { x: p1.x + p2.x, y: p1.y + p2.y };
    },
    
    subtractPoints : function(p1, p2) {
        return { x: p1.x - p2.x, y: p1.y - p2.y };
    },
    
    // -- Drag and drop helper methods.
    getScrollOffset : function(element, recursive) {
        var left = element.scrollLeft;
        var top = element.scrollTop;
        if (recursive) {
            var parent = element.parentNode;
            while (parent != null && parent.scrollLeft != null) {
                left += parent.scrollLeft;
                top += parent.scrollTop;
                // Don't include anything below the body.
                if (parent == document.body && (left != 0 && top != 0))
                    break;
                parent = parent.parentNode;
            }
        }
        return { x: left, y: top };
    },
    
    getBrowserRectangle : function() {
        var width = window.innerWidth;
        var height = window.innerHeight;
        if (width == null) {
            width = document.body.clientWidth;
        }
        if (height == null) {
            height = document.body.clientHeight;
        }
        
        return { x: 0, y: 0, width: width, height: height };
    },
    
    getNextSibling : function(item) {
        for (item = item.nextSibling; item != null; item = item.nextSibling) {
            if (item.innerHTML != null) {
                return item;
            }
        }
        return null;
    },
    
    hasParent : function(element) {
        return (element.parentNode != null && element.parentNode.tagName != null);
    }
}
AjaxControlToolkit.IEDragDropManager.registerClass('AjaxControlToolkit.IEDragDropManager', Sys.Component);

AjaxControlToolkit.IEDragDropManager._getDataObjectsForDropTarget = function(dropTarget) {
    if (dropTarget == null) {
        return [];
    }
    var ev = window._event;
    var dataObjects = [];
    var dataTypes = [ "URL", "Text" ];
    var data;
    for (var i = 0; i < dataTypes.length; i++) {
        var dt = ev.dataTransfer;
        if(!dt && ev.rawEvent) dt = ev.rawEvent.dataTransfer;
        data = dt.getData(dataTypes[i]);
        if (dropTarget.canDrop(AjaxControlToolkit.DragMode.Copy, dataTypes[i], data)) {
            if (data) {
                Array.add(dataObjects, { type : dataTypes[i], value : data });
            }
        }
    }

    return dataObjects;
}


AjaxControlToolkit.GenericDragDropManager = function() {
    AjaxControlToolkit.GenericDragDropManager.initializeBase(this);
    
    this._dropTargets = null;
    // Radius of the cursor used to determine what drop target we 
    // are hovering. Anything below the cursor's zone may be a 
    // potential drop target.
    this._scrollEdgeConst = 40;
    this._scrollByConst = 10;
    this._scroller = null;
    this._scrollDeltaX = 0;
    this._scrollDeltaY = 0;
    this._activeDragVisual = null;
    this._activeContext = null;
    this._activeDragSource = null;
    this._oldOffset = null;
    this._potentialTarget = null;
    this._mouseUpHandler = null;
    this._mouseMoveHandler = null;
    this._keyPressHandler = null;
    this._scrollerTickHandler = null;
}
AjaxControlToolkit.GenericDragDropManager.prototype = {
   
    initialize : function() {
        AjaxControlToolkit.GenericDragDropManager.callBaseMethod(this, "initialize");
        this._mouseUpHandler = Function.createDelegate(this, this._onMouseUp);
        this._mouseMoveHandler = Function.createDelegate(this, this._onMouseMove);
        this._keyPressHandler = Function.createDelegate(this, this._onKeyPress);
        this._scrollerTickHandler = Function.createDelegate(this, this._onScrollerTick);
        if (Sys.Browser.agent === Sys.Browser.Safari) {
            AjaxControlToolkit.GenericDragDropManager.__loadSafariCompatLayer(this);
        }
        this._scroller = new Sys.Timer();
        this._scroller.set_interval(10);
        this._scroller.add_tick(this._scrollerTickHandler);
    },

    startDragDrop : function(dragSource, dragVisual, context) {
        this._activeDragSource = dragSource;
        this._activeDragVisual = dragVisual;
        this._activeContext = context;
        
        AjaxControlToolkit.GenericDragDropManager.callBaseMethod(this, "startDragDrop", [dragSource, dragVisual, context]);
    },
    
    _stopDragDrop : function(cancelled) {
        this._scroller.set_enabled(false);
        
        AjaxControlToolkit.GenericDragDropManager.callBaseMethod(this, "_stopDragDrop", [cancelled]);
    },
    
    _drag : function(isInitialDrag) {
        AjaxControlToolkit.GenericDragDropManager.callBaseMethod(this, "_drag", [isInitialDrag]);
        
        this._autoScroll();
    },
    
    _wireEvents : function() {
        $addHandler(document, "mouseup", this._mouseUpHandler);
        $addHandler(document, "mousemove", this._mouseMoveHandler);
        $addHandler(document, "keypress", this._keyPressHandler);
    },
    
    _unwireEvents : function() {
        $removeHandler(document, "keypress", this._keyPressHandler);
        $removeHandler(document, "mousemove", this._mouseMoveHandler);
        $removeHandler(document, "mouseup", this._mouseUpHandler);
    },
    
    _wireDropTargetEvents : function(dropTarget) {
        //
    },
    
    _unwireDropTargetEvents : function(dropTarget) {
        //
    },
    
    _onMouseUp : function(e) {
        window._event = e;
        this._stopDragDrop(false);
    },
    
    _onMouseMove : function(e) {
        window._event = e;
        this._drag();
    },
    
    _onKeyPress : function(e) {
        window._event = e;
        // Escape.
        var k = e.keyCode ? e.keyCode : e.rawEvent.keyCode;
        if (k == 27) {
            this._stopDragDrop(/* cancel */ true);
        }
    },
    
    _autoScroll : function() {
        var ev = window._event;
        var browserRect = this.getBrowserRectangle();
        if (browserRect.width > 0) {
            this._scrollDeltaX = this._scrollDeltaY = 0;
            if (ev.clientX < browserRect.x + this._scrollEdgeConst) this._scrollDeltaX = -this._scrollByConst;
            else if (ev.clientX > browserRect.width - this._scrollEdgeConst) this._scrollDeltaX = this._scrollByConst;
            if (ev.clientY < browserRect.y + this._scrollEdgeConst) this._scrollDeltaY = -this._scrollByConst;
            else if (ev.clientY > browserRect.height - this._scrollEdgeConst) this._scrollDeltaY = this._scrollByConst;
            if (this._scrollDeltaX != 0 || this._scrollDeltaY != 0) {
                this._scroller.set_enabled(true);
            }
            else {
                this._scroller.set_enabled(false);
            }
        }
    },
    
    _onScrollerTick : function() {
        var oldLeft = document.body.scrollLeft;
        var oldTop = document.body.scrollTop;
        window.scrollBy(this._scrollDeltaX, this._scrollDeltaY);
        var newLeft = document.body.scrollLeft;
        var newTop = document.body.scrollTop;
        
        var dragVisual = this._activeDragVisual;
        var position = { x: parseInt(dragVisual.style.left) + (newLeft - oldLeft), y: parseInt(dragVisual.style.top) + (newTop - oldTop) };
        $common.setLocation(dragVisual, position);
    }
}
AjaxControlToolkit.GenericDragDropManager.registerClass('AjaxControlToolkit.GenericDragDropManager', AjaxControlToolkit.IEDragDropManager);


if (Sys.Browser.agent === Sys.Browser.Safari) {
    AjaxControlToolkit.GenericDragDropManager.__loadSafariCompatLayer = function(ddm) {
        ddm._getScrollOffset = ddm.getScrollOffset;

        ddm.getScrollOffset = function(element, recursive) {
            return { x: 0, y: 0 };
        }

        ddm._getBrowserRectangle = ddm.getBrowserRectangle;

        ddm.getBrowserRectangle = function() {
            var browserRect = ddm._getBrowserRectangle();
            
            var offset = ddm._getScrollOffset(document.body, true);
            return { x: browserRect.x + offset.x, y: browserRect.y + offset.y,
                width: browserRect.width + offset.x, height: browserRect.height + offset.y };
        }
    }
}

//END AjaxControlToolkit.Compat.DragDrop.DragDropScripts.js
//START AjaxControlToolkit.DragPanel.FloatingBehavior.js
// (c) Copyright Microsoft Corporation.
// This source is subject to the Microsoft Permissive License.
// See http://www.microsoft.com/resources/sharedsource/licensingbasics/sharedsourcelicenses.mspx.
// All other rights reserved.


/// <reference name="MicrosoftAjax.debug.js" />
/// <reference name="MicrosoftAjaxTimer.debug.js" />
/// <reference name="MicrosoftAjaxWebForms.debug.js" />
/// <reference path="../ExtenderBase/BaseScripts.js" />
/// <reference path="../Common/Common.js" />
/// <reference path="../Compat/Timer/Timer.js" />
/// <reference path="../Compat/DragDrop/DragDropScripts.js" />


AjaxControlToolkit.FloatingBehavior = function(element) {
    AjaxControlToolkit.FloatingBehavior.initializeBase(this,[element]);
    
    var _handle;
    var _location;
    var _dragStartLocation;
    var _profileProperty;
    var _profileComponent;
    
    var _mouseDownHandler = Function.createDelegate(this, mouseDownHandler);
    
    this.add_move = function(handler) {
        this.get_events().addHandler('move', handler);
    }
    this.remove_move = function(handler) {
        this.get_events().removeHandler('move', handler);
    }
    
    this.get_handle = function() {
        return _handle;
    }
    this.set_handle = function(value) {
        if (_handle != null) {
            $removeHandler(_handle, "mousedown", _mouseDownHandler);            
        }
    
        _handle = value;
        $addHandler(_handle, "mousedown", _mouseDownHandler);        
    }
    
    this.get_profileProperty = function() {
        return _profileProperty;
    }
    this.set_profileProperty = function(value) {
        //##DEBUG Sys.Debug.assert(!this.get_isInitialized() || _profileProperty === value, "You cannot change the profile property after initialization.");
        _profileProperty = value;
    }
    
    this.get_profileComponent = function() {
        return _profileComponent;
    }
    this.set_profileComponent = function(value) {
        _profileComponent = value;
    }
    
    this.get_location = function() {
        return _location;
    }
    this.set_location = function(value) {
        if (_location != value) {
            _location = value;
            if (this.get_isInitialized()) {                
                $common.setLocation(this.get_element(), _location);
            }
            this.raisePropertyChanged('location');
        }
    }
    
    this.initialize = function() {
        AjaxControlToolkit.FloatingBehavior.callBaseMethod(this, 'initialize');
        AjaxControlToolkit.DragDropManager.registerDropTarget(this);

        var el = this.get_element();

        
        if (!_location) {                       
            _location = $common.getLocation(el);
        }
        
        el.style.position = "fixed";
        $common.setLocation(el, _location);

//        var p = this.get_profileProperty();
//        if(p) {
//            var b = new Sys.Preview.Binding();
//            b.beginUpdate();
//            b.set_target(this);
//            b.set_property("location");
//            var profile = this.get_profileComponent();
//            if(!profile) profile = Sys.Preview.Services.Components.Profile.instance;
//            b.set_dataContext(profile);
//            b.set_dataPath(p);
//            b.set_direction(Sys.Preview.BindingDirection.InOut);            
//                      
//            // we must hook into the loaded event since the profile may be loaded and the location property
//            // will be different. But profile doesnt raise a change notificaiton for every property after a load
//            var a = new Sys.Preview.InvokeMethodAction();
//            a.beginUpdate();
//            a.set_eventSource(profile);
//            a.set_eventName("loadComplete");
//            a.set_target(b);
//            a.set_method("evaluateIn");

//            a.endUpdate();
//            b.endUpdate();

//            this._binding = b;
//            this._action = a;
//        }
    }
    
    this.dispose = function() {
        AjaxControlToolkit.DragDropManager.unregisterDropTarget(this);
        if (_handle && _mouseDownHandler) {
            $removeHandler(_handle, "mousedown", _mouseDownHandler);
            //_handle.detachEvent("onmousedown", _mouseDownHandler);
        }
        _mouseDownHandler = null;
        AjaxControlToolkit.FloatingBehavior.callBaseMethod(this, 'dispose');
    }
    
    this.checkCanDrag = function(element) {
        var undraggableTagNames = ["input", "button", "select", "textarea", "label"];
        var tagName = element.tagName;
        
        if ((tagName.toLowerCase() == "a") && (element.href != null) && (element.href.length > 0)) {
            return false;
        }
        if (Array.indexOf(undraggableTagNames, tagName.toLowerCase()) > -1) {
            return false;
        }
        return true;
    }
    
    function mouseDownHandler(ev) {
        window._event = ev;
        var el = this.get_element();
        
        if (this.checkCanDrag(ev.target)) {
            _dragStartLocation = $common.getLocation(el);
            
            ev.preventDefault();
            
            this.startDragDrop(el);
        }
    }

    // Type get_dataType()
    this.get_dragDataType = function() {
        return "_floatingObject";
    }
    
    // Object get_data(Context)
    this.getDragData = function(context) {
        return null;
    }
    
    // DragMode get_dragMode()
    this.get_dragMode = function() {
        return AjaxControlToolkit.DragMode.Move;
    }
    
    // void onDragStart()
    this.onDragStart = function() { }
    
    // void onDrag()
    this.onDrag = function() { }
    
    // void onDragEnd(Canceled)
    this.onDragEnd = function(canceled) {
        if (!canceled) {
            var handler = this.get_events().getHandler('move');
            if(handler) {
                var cancelArgs = new Sys.CancelEventArgs();
                handler(this, cancelArgs);
                canceled = cancelArgs.get_cancel();
            }            
        }
        
        var el = this.get_element();
        if (canceled) {
            // Restore the position of the control.
            $common.setLocation(el, _dragStartLocation);
        } else {
            _location = $common.getLocation(el);
            this.raisePropertyChanged('location');
        }
    }
    
    this.startDragDrop = function(dragVisual) {
        AjaxControlToolkit.DragDropManager.startDragDrop(this, dragVisual, null);
    }
    
    this.get_dropTargetElement = function() {
        return document.body;
    }
    
    // bool canDrop(DragMode, DataType, Data)
    this.canDrop = function(dragMode, dataType, data) {
        return (dataType == "_floatingObject");
    }
    
    // void drop(DragMode, DataType, Data)
    this.drop = function(dragMode, dataType, data) {}
    
    // void onDragEnterTarget(DragMode, DataType, Data)
    this.onDragEnterTarget = function(dragMode, dataType, data) {}
    
    // void onDragLeaveTarget(DragMode, DataType, Data)
    this.onDragLeaveTarget = function(dragMode, dataType, data) {}
    
    // void onDragInTarget(DragMode, DataType, Data)
    this.onDragInTarget = function(dragMode, dataType, data) {}
}
//AjaxControlToolkit.FloatingBehavior.descriptor = {
//    properties: [   {name: "profileProperty", type: String},
//                    {name: "profileComponent", type: Object},
//                    {name: "dragData", type: Object, readOnly: true},
//                    {name: "dragDataType", type: String, readOnly: true},
//                    {name: "dragMode", type: AjaxControlToolkit.DragMode, readOnly: true},
//                    {name: "dropTargetElement", type: Object, readOnly: true},
//                    {name: "handle", type: Sys.UI.DomElement},
//                    {name: "location", type: String} ],
//    events: [   {name: "move"} ]
//}
AjaxControlToolkit.FloatingBehavior.registerClass('AjaxControlToolkit.FloatingBehavior', AjaxControlToolkit.BehaviorBase, AjaxControlToolkit.IDragSource, AjaxControlToolkit.IDropTarget, Sys.IDisposable);

//END AjaxControlToolkit.DragPanel.FloatingBehavior.js
//START AjaxControlToolkit.ModalPopup.ModalPopupBehavior.js
// (c) Copyright Microsoft Corporation.
// This source is subject to the Microsoft Permissive License.
// See http://www.microsoft.com/resources/sharedsource/licensingbasics/sharedsourcelicenses.mspx.
// All other rights reserved.


/// <reference name="MicrosoftAjax.debug.js" />
/// <reference name="MicrosoftAjaxTimer.debug.js" />
/// <reference name="MicrosoftAjaxWebForms.debug.js" />
/// <reference path="../ExtenderBase/BaseScripts.js" />
/// <reference path="../Common/Common.js" />
/// <reference path="../DynamicPopulate/DynamicPopulateBehavior.js" />
/// <reference path="../RoundedCorners/RoundedCornersBehavior.js" />
/// <reference path="../Compat/Timer/Timer.js" />
/// <reference path="../DropShadow/DropShadowBehavior.js" />
/// <reference path="../Compat/DragDrop/DragDropScripts.js" />
/// <reference path="../DragPanel/FloatingBehavior.js" />


Type.registerNamespace('AjaxControlToolkit');

AjaxControlToolkit.ModalPopupRepositionMode = function() {
    /// <summary>
    /// The ModalPopupRepositionMode enumeration describes how the modal popup repositions
    /// </summary>
    /// <field name="None" type="Number" integer="true" />
    /// <field name="RepositionOnWindowResize" type="Number" integer="true" />
    /// <field name="RepositionOnWindowScroll" type="Number" integer="true" />
    /// <field name="RepositionOnWindowResizeAndScroll" type="Number" integer="true" />
    throw Error.invalidOperation();
}
AjaxControlToolkit.ModalPopupRepositionMode.prototype = {
    None : 0,
    RepositionOnWindowResize : 1,
    RepositionOnWindowScroll : 2,
    RepositionOnWindowResizeAndScroll : 3
}
AjaxControlToolkit.ModalPopupRepositionMode.registerEnum('AjaxControlToolkit.ModalPopupRepositionMode');


AjaxControlToolkit.ModalPopupBehavior = function(element) {
    /// <summary>
    /// The ModalPopupBehavior is used to display the target element as a modal dialog
    /// </summary>
    /// <param name="element" type="Sys.UI.DomElement" domElement="true">
    /// DOM Element the behavior is associated with
    /// </param>
    AjaxControlToolkit.ModalPopupBehavior.initializeBase(this, [element]);
    
    // Properties
    this._PopupControlID = null;
    this._PopupDragHandleControlID = null;
    this._BackgroundCssClass = null;
    this._DropShadow = false;
    this._Drag = false;    
    this._OkControlID = null;
    this._CancelControlID = null;
    this._OnOkScript = null;
    this._OnCancelScript = null;
    this._xCoordinate = -1;
    this._yCoordinate = -1;
    this._repositionMode = AjaxControlToolkit.ModalPopupRepositionMode.RepositionOnWindowResizeAndScroll;

    // Variables
    this._backgroundElement = null;
    this._foregroundElement = null;
    this._relativeOrAbsoluteParentElement = null;
    this._popupElement = null;
    this._dragHandleElement = null;
    this._showHandler = null;
    this._okHandler = null;
    this._cancelHandler = null;
    this._scrollHandler = null;
    this._resizeHandler = null;
    this._windowHandlersAttached = false;
    this._dropShadowBehavior = null;
    this._dragBehavior = null;
    this._isIE6 = false;

    this._saveTabIndexes = new Array();
    this._saveDesableSelect = new Array();
    this._tagWithTabIndex = new Array('A','AREA','BUTTON','INPUT','OBJECT','SELECT','TEXTAREA','IFRAME');
}
AjaxControlToolkit.ModalPopupBehavior.prototype = {
    initialize : function() {
        /// <summary>
        /// Initialize the behavior
        /// </summary>
        
        /*
            <div superpopup - drag container resizable><div -- drag handle\dropshadow foreground></div></div>
        */
        AjaxControlToolkit.ModalPopupBehavior.callBaseMethod(this, 'initialize');
        this._isIE6 = (Sys.Browser.agent == Sys.Browser.InternetExplorer && Sys.Browser.version < 7);
        if(this._PopupDragHandleControlID)
            this._dragHandleElement = $get(this._PopupDragHandleControlID);

        this._popupElement = $get(this._PopupControlID);
        if(this._DropShadow)
        {
            this._foregroundElement = document.createElement('div');
            this._foregroundElement.id = this.get_id() + '_foregroundElement';
            this._popupElement.parentNode.appendChild(this._foregroundElement);
            this._foregroundElement.appendChild(this._popupElement);
        }
        else
        {
            this._foregroundElement = this._popupElement;
        }
        this._backgroundElement = document.createElement('div');
        this._backgroundElement.id = this.get_id() + '_backgroundElement';
        this._backgroundElement.style.display = 'none';
        this._backgroundElement.style.position = 'absolute';
        this._backgroundElement.style.left = '0px';
        this._backgroundElement.style.top = '0px';
        // Want zIndex to big enough that the background sits above everything else
        // CSS 2.1 defines no bounds for the <integer> type, so pick arbitrarily
        this._backgroundElement.style.zIndex = 10000;
        if (this._BackgroundCssClass) {
            this._backgroundElement.className = this._BackgroundCssClass;
        }
        this._foregroundElement.parentNode.appendChild(this._backgroundElement);

        //this._foregroundElement.style.display = 'none';
        this._foregroundElement.style.visibility = 'hidden';   //Workaround for VoiceOver iOS bug that won't transfer focus to modal that started as display none;

        this._foregroundElement.style.position = 'fixed';
        this._foregroundElement.style.zIndex = $common.getCurrentStyle(this._backgroundElement, 'zIndex', this._backgroundElement.style.zIndex) + 1;
        
        this._showHandler = Function.createDelegate(this, this._onShow);
        $addHandler(this.get_element(), 'click', this._showHandler);

        if (this._OkControlID) {
            this._okHandler = Function.createDelegate(this, this._onOk);
            $addHandler($get(this._OkControlID), 'click', this._okHandler);
        }

        if (this._CancelControlID) {
            this._cancelHandler = Function.createDelegate(this, this._onCancel);
            $addHandler($get(this._CancelControlID), 'click', this._cancelHandler);
        }

        this._scrollHandler = Function.createDelegate(this, this._onLayout);
        this._resizeHandler = Function.createDelegate(this, this._onLayout);

        // Need to know when partial updates complete
        this.registerPartialUpdateEvents();
    },

    dispose : function() {
        /// <summary>
        /// Dispose the behavior
        /// </summary>

        // Going away; restore any changes to the page
        this._hideImplementation();

        if (this._foregroundElement && this._foregroundElement.parentNode) {
            // Remove background we added to the DOM
            this._foregroundElement.parentNode.removeChild(this._backgroundElement);

            if(this._DropShadow) {
                // Remove DIV wrapper added in initialize
                this._foregroundElement.parentNode.appendChild(this._popupElement);
                this._foregroundElement.parentNode.removeChild(this._foregroundElement);
            }
        }

        this._scrollHandler = null;
        this._resizeHandler = null;
        if (this._cancelHandler && $get(this._CancelControlID)) {
            $removeHandler($get(this._CancelControlID), 'click', this._cancelHandler);
            this._cancelHandler = null;
        }
        if (this._okHandler && $get(this._OkControlID)) {
            $removeHandler($get(this._OkControlID), 'click', this._okHandler);
            this._okHandler = null;
        }
        if (this._showHandler) {
            $removeHandler(this.get_element(), 'click', this._showHandler);
            this._showHandler = null;
        }
        
        AjaxControlToolkit.ModalPopupBehavior.callBaseMethod(this, 'dispose');
    },

    _attachPopup : function() {
        /// <summary>
        /// Attach the event handlers for the popup
        /// </summary>

        if (this._DropShadow && !this._dropShadowBehavior) {
            this._dropShadowBehavior = $create(AjaxControlToolkit.DropShadowBehavior, {}, null, null, this._popupElement);
        }
        if (this._dragHandleElement && !this._dragBehavior) {
            this._dragBehavior = $create(AjaxControlToolkit.FloatingBehavior, {"handle" : this._dragHandleElement}, null, null, this._foregroundElement);
        }        
                
        $addHandler(window, 'resize', this._resizeHandler);
        $addHandler(window, 'scroll', this._scrollHandler);
        this._windowHandlersAttached = true;
    },

    _detachPopup : function() {
        /// <summary>
        /// Detach the event handlers for the popup
        /// </summary>

        if (this._windowHandlersAttached) {
            if (this._scrollHandler) {
                $removeHandler(window, 'scroll', this._scrollHandler);
            }
            if (this._resizeHandler) {
                $removeHandler(window, 'resize', this._resizeHandler);
            }
            this._windowHandlersAttached = false;
        }
        
        if (this._dragBehavior) {
            this._dragBehavior.dispose();
            this._dragBehavior = null;
        }       
        
        if (this._dropShadowBehavior) {
            this._dropShadowBehavior.dispose();
            this._dropShadowBehavior = null;
        }
    },

    _onShow : function(e) {
        /// <summary>
        /// Handler for the target's click event
        /// </summary>
        /// <param name="e" type="Sys.UI.DomEvent">
        /// Event info
        /// </param>

        if (!this.get_element().disabled) {
            this.show();
            e.preventDefault();
            return false;
        }
    },

    _onOk : function(e) {
        /// <summary>
        /// Handler for the modal dialog's OK button click
        /// </summary>
        /// <param name="e" type="Sys.UI.DomEvent">
        /// Event info
        /// </param>

        var element = $get(this._OkControlID);
        if (element && !element.disabled) {
            if (this.hide() && this._OnOkScript) {
                window.setTimeout(this._OnOkScript, 0);
            }
            e.preventDefault();
            return false;
        }
    },

    _onCancel : function(e) {
        /// <summary>
        /// Handler for the modal dialog's Cancel button click
        /// </summary>
        /// <param name="e" type="Sys.UI.DomEvent">
        /// Event info
        /// </param>

        var element = $get(this._CancelControlID);
        if (element && !element.disabled) {
            if (this.hide() && this._OnCancelScript) {
                window.setTimeout(this._OnCancelScript, 0);
            }
            e.preventDefault();
            return false;
        }
    },

    _onLayout : function(e) {
        /// <summary>
        /// Handler for scrolling and resizing events that would require a repositioning of the modal dialog
        /// </summary>
        /// <param name="e" type="Sys.UI.DomEvent">
        /// Event info
        /// </param>
        var positioning = this.get_repositionMode();
        if (((positioning === AjaxControlToolkit.ModalPopupRepositionMode.RepositionOnWindowScroll) ||
            (positioning === AjaxControlToolkit.ModalPopupRepositionMode.RepositionOnWindowResizeAndScroll)) && (e.type === 'scroll')) {
            this._layout();
        } else if (((positioning === AjaxControlToolkit.ModalPopupRepositionMode.RepositionOnWindowResize) ||
            (positioning === AjaxControlToolkit.ModalPopupRepositionMode.RepositionOnWindowResizeAndScroll)) && (e.type === 'resize')) {
            this._layout();
        } else {
            // Layout background element again to make sure it covers the whole background.
            // This needs to be called separately since _layout will not be always called
            // to reposition the popup depending on the RepositionMode but the background needs 
            // to handle the resize/scroll every time.
            this._layoutBackgroundElement();
        }
    },

    show : function() {
        /// <summary>
        /// Display the element referenced by PopupControlID as a modal dialog
        /// </summary>
        
        var eventArgs = new Sys.CancelEventArgs();
        this.raiseShowing(eventArgs);
        if (eventArgs.get_cancel()) {
            return;
        }
        
        this.populate();
        this._attachPopup();

        this._backgroundElement.style.display = '';

        //this._foregroundElement.style.display = '';
        this._foregroundElement.style.visibility = 'visible';   //Workaround for VoiceOver iOS bug that won't transfer focus to modal that started as display none;

        this._popupElement.style.display = '';
        if (this._isIE6) {
            this._foregroundElement.style.position = 'absolute';
            this._backgroundElement.style.position = 'absolute'; 
            // find the relative or absolute parent
            var tempRelativeOrAbsoluteParent = this._foregroundElement.parentNode;
            while (tempRelativeOrAbsoluteParent && (tempRelativeOrAbsoluteParent != document.documentElement)) {
                if((tempRelativeOrAbsoluteParent.style.position != 'relative') && (tempRelativeOrAbsoluteParent.style.position != 'absolute')) {
                    tempRelativeOrAbsoluteParent = tempRelativeOrAbsoluteParent.parentNode;
                } else {
                    this._relativeOrAbsoluteParentElement = tempRelativeOrAbsoluteParent;
                    break;
                }
            }                       
        }        


        // Disable TAB
        //this.disableTab();    //Trisept has own tab-trapping and this fails when we open modals "early" for custom sizing

        this._layout();
        // On pages that don't need scrollbars, Firefox and Safari act like
        // one or both are present the first time the layout code runs which
        // obviously leads to display issues - run the layout code a second
        // time to work around this problem
        this._layout();
        
        this.raiseShown(Sys.EventArgs.Empty);
    },

    disableTab : function() {
        /// <summary>
        /// Change the tab indices so we only tab through the modal popup
        /// (and hide SELECT tags in IE6)
        /// </summary>

        var i = 0;
        var tagElements;
        var tagElementsInPopUp = new Array();
        Array.clear(this._saveTabIndexes);

        //Save all popup's tag in tagElementsInPopUp
        for (var j = 0; j < this._tagWithTabIndex.length; j++) {
            tagElements = this._foregroundElement.getElementsByTagName(this._tagWithTabIndex[j]);
            for (var k = 0 ; k < tagElements.length; k++) {
                tagElementsInPopUp[i] = tagElements[k];
                i++;
            }
        }

        i = 0;
        for (var j = 0; j < this._tagWithTabIndex.length; j++) {
            tagElements = document.getElementsByTagName(this._tagWithTabIndex[j]);
            for (var k = 0 ; k < tagElements.length; k++) {
                if (Array.indexOf(tagElementsInPopUp, tagElements[k]) == -1)  {
                    this._saveTabIndexes[i] = {tag: tagElements[k], index: tagElements[k].tabIndex};
                    tagElements[k].tabIndex="-1";
                    i++;
                }
            }
        }

        //IE6 Bug with SELECT element always showing up on top
        i = 0;
        if ((Sys.Browser.agent === Sys.Browser.InternetExplorer) && (Sys.Browser.version < 7)) {
            //Save SELECT in PopUp
            var tagSelectInPopUp = new Array();
            for (var j = 0; j < this._tagWithTabIndex.length; j++) {
                tagElements = this._foregroundElement.getElementsByTagName('SELECT');
                for (var k = 0 ; k < tagElements.length; k++) {
                    tagSelectInPopUp[i] = tagElements[k];
                    i++;
                }
            }

            i = 0;
            Array.clear(this._saveDesableSelect);
            tagElements = document.getElementsByTagName('SELECT');
            for (var k = 0 ; k < tagElements.length; k++) {
                if (Array.indexOf(tagSelectInPopUp, tagElements[k]) == -1)  {
                    this._saveDesableSelect[i] = {tag: tagElements[k], visib: $common.getCurrentStyle(tagElements[k], 'visibility')} ;
                    tagElements[k].style.visibility = 'hidden';
                    i++;
                }
            }
        }
    },

    restoreTab : function() {
        /// <summary>
        /// Restore the tab indices so we tab through the page like normal
        /// (and restore SELECT tags in IE6)
        /// </summary>

        for (var i = 0; i < this._saveTabIndexes.length; i++) {
            this._saveTabIndexes[i].tag.tabIndex = this._saveTabIndexes[i].index;
        }
        Array.clear(this._saveTabIndexes);

        //IE6 Bug with SELECT element always showing up on top
        if ((Sys.Browser.agent === Sys.Browser.InternetExplorer) && (Sys.Browser.version < 7)) {
            for (var k = 0 ; k < this._saveDesableSelect.length; k++) {
                this._saveDesableSelect[k].tag.style.visibility = this._saveDesableSelect[k].visib;
            }
            Array.clear(this._saveDesableSelect);
        }
    },

    hide : function() {
        /// <summary>
        /// Hide the modal dialog
        /// </summary>
        /// <returns type="Boolean" mayBeNull="false">
        /// Whether or not the dialog was hidden
        /// </returns>

        var eventArgs = new Sys.CancelEventArgs();
        this.raiseHiding(eventArgs);
        if (eventArgs.get_cancel()) {
            return false;
        }

        this._hideImplementation();

        this.raiseHidden(Sys.EventArgs.Empty);
        return true;
    },

    _hideImplementation : function() {
        /// <summary>
        /// Internal implementation to hide the modal dialog
        /// </summary>

        this._backgroundElement.style.display = 'none';

        //this._foregroundElement.style.display = 'none';
        this._foregroundElement.style.visibility = 'hidden';   //Workaround for VoiceOver iOS bug that won't transfer focus to modal that started as display none;

        //this.restoreTab();

        this._detachPopup();
    },

    _layout : function() {
        /// <summary>
        /// Position the modal dialog 
        /// </summary>
        var scrollLeft = (document.documentElement.scrollLeft ? document.documentElement.scrollLeft : document.body.scrollLeft);
        var scrollTop = (document.documentElement.scrollTop ? document.documentElement.scrollTop : document.body.scrollTop);
               
        var clientBounds = $common.getClientBounds();
        var clientWidth = clientBounds.width;
        var clientHeight = clientBounds.height;
        
        // Setup the location of the background element
        this._layoutBackgroundElement();

        var xCoord = 0;
        var yCoord = 0;
        if(this._xCoordinate < 0) {
            var foregroundelementwidth = this._foregroundElement.offsetWidth? this._foregroundElement.offsetWidth: this._foregroundElement.scrollWidth;
            xCoord = ((clientWidth-foregroundelementwidth)/2);
            // workaround for drag behavior which calls setlocation which in turn
            // changes the position of the panel to be absolute and requiring us
            // to add the scrollLeft so that it is positioned correctly.
            if (this._foregroundElement.style.position == 'absolute') {
                xCoord += scrollLeft;
            }
            this._foregroundElement.style.left = xCoord + 'px';
            
        } else {
            if(this._isIE6) {
                this._foregroundElement.style.left = (this._xCoordinate + scrollLeft) + 'px';
                xCoord = this._xCoordinate + scrollLeft;
            }
            else {
                this._foregroundElement.style.left = this._xCoordinate + 'px';
                xCoord = this._xCoordinate;
            }
        }
        if(this._yCoordinate < 0) {
            var foregroundelementheight = this._foregroundElement.offsetHeight? this._foregroundElement.offsetHeight: this._foregroundElement.scrollHeight;
            yCoord = ((clientHeight-foregroundelementheight)/2);           
            // workaround for drag behavior which calls setlocation which in turn
            // changes the position of the panel to be absolute and requiring us
            // to add the scrollLeft so that it is positioned correctly.
            if (this._foregroundElement.style.position == 'absolute') {
                yCoord += scrollTop;
            }
            this._foregroundElement.style.top = yCoord + 'px';
          
        } else {
            if(this._isIE6) {
                this._foregroundElement.style.top = (this._yCoordinate + scrollTop) + 'px';
                yCoord = this._yCoordinate + scrollTop;
            }
            else {
                this._foregroundElement.style.top = this._yCoordinate + 'px';
                yCoord = this._yCoordinate;
            }
        }

        // make sure get location agrees with the location of the foreground element
        this._layoutForegroundElement(xCoord, yCoord);
        
        if (this._dropShadowBehavior) {
            this._dropShadowBehavior.setShadow();
            window.setTimeout(Function.createDelegate(this, this._fixupDropShadowBehavior), 0);
        }
        
        // layout background element again to make sure it covers the whole background 
        // in case things moved around when laying out the foreground element
        this._layoutBackgroundElement();
    },
    
    _layoutForegroundElement : function(xCoord, yCoord) {
        /// <summary>
        /// Set the correct location of the foreground element to ensure that it is absolutely 
        /// positioned with respect to the browser. This is just a workaround for IE 6 since
        /// elements nested in relative parents cause modal popup positioning issues and 'fixed'
        /// is not supported by IE 6. Hence we manually compute the right location of the popup.
        /// </summary>
        /// <param name="xCoord" type="Number" integer="true" maybenull="false">
        /// <param name="yCoord" type="Number" integer="true" maybenull="false">        
        /// </params>
        
        if (this._isIE6 && this._relativeOrAbsoluteParentElement) {
            var foregroundLocation = $common.getLocation(this._foregroundElement);  
            var relativeParentLocation = $common.getLocation(this._relativeOrAbsoluteParentElement);
            var getLocationXCoord = foregroundLocation.x;
            if (getLocationXCoord != xCoord) {
                // offset it by that amount
                this._foregroundElement.style.left = (xCoord - relativeParentLocation.x) + 'px';
            } 
                        
            var getLocationYCoord = foregroundLocation.y;
            if (getLocationYCoord != yCoord) {
                // offset it by that amount
                this._foregroundElement.style.top = (yCoord - relativeParentLocation.y) + 'px';
            } 
        }
    },
    
    _layoutBackgroundElement : function() {
        /// <summary>
        /// Set the correct location of the background element to ensure that it is absolutely 
        /// positioned with respect to the browser.
        /// </summary>

        // Background element needs to cover the visible client area completely hence its
        // top and left coordinates need to be 0, and if relatively positioned its getlocation
        // value needs to be 0.
        if(this._isIE6) { 
            var backgroundLocation = $common.getLocation(this._backgroundElement);
            var backgroundXCoord = backgroundLocation.x;
            if (backgroundXCoord != 0) {
                // offset it by that amount. This is assuming only one level of nesting. If
                // multiple parents with absolute/relative positioning are setup this may not 
                // cover the whole background.
                this._backgroundElement.style.left = (-backgroundXCoord) + 'px';
            } 
            
            var backgroundYCoord = backgroundLocation.y;
            if (backgroundYCoord != 0) {
                // offset it by that amount. This is assuming only one level of nesting. If
                // multiple parents with absolute/relative positioning are setup this may not 
                // cover the whole background.
                this._backgroundElement.style.top = (-backgroundYCoord) + 'px';
            }         
        }
        var clientBounds = $common.getClientBounds();
        var clientWidth = clientBounds.width;
        var clientHeight = clientBounds.height;
        this._backgroundElement.style.width = Math.max(Math.max(document.documentElement.scrollWidth, document.body.scrollWidth), clientWidth)+'px';
        var maxPageHeight = Math.max(Math.max(document.documentElement.scrollHeight, document.body.scrollHeight), clientHeight);
      
        if (Sys.Browser.agent == Sys.Browser.InternetExplorer) {
            var opacityThresholdHeight = 30000; // approx page height beyond which opacity breaks
            var backgroundEleHeight = 5 * clientHeight;
            this._backgroundElement.style.height = (maxPageHeight > opacityThresholdHeight ? backgroundEleHeight : maxPageHeight) + 'px';

            if (maxPageHeight > opacityThresholdHeight) {
                var scrollTop = (document.documentElement.scrollTop ? document.documentElement.scrollTop : document.body.scrollTop);
                if (scrollTop > 2 * backgroundEleHeight / 5)
                    if ((scrollTop + backgroundEleHeight) < maxPageHeight) {
                    this._backgroundElement.style.top = (scrollTop - 2 * backgroundEleHeight / 5) + 'px';
                } else
                    this._backgroundElement.style.top = (maxPageHeight - backgroundEleHeight) + 'px';
                else
                    this._backgroundElement.style.top = '0px';
            }
        } else if (navigator.userAgent.indexOf(' Chrome/') > -1) {
            var opacityThresholdHeight = 30000; // approx page height beyond which opacity breaks in chrome
            var backgroundEleHeight = 5 * clientHeight;
            this._backgroundElement.style.height = (maxPageHeight > opacityThresholdHeight ? backgroundEleHeight : maxPageHeight) + 'px';
            if (maxPageHeight > opacityThresholdHeight) {
                var scrollTop = (document.documentElement.scrollTop ? document.documentElement.scrollTop : document.body.scrollTop);
                if (scrollTop > 2 * backgroundEleHeight / 5)
                    if ((scrollTop + backgroundEleHeight) < maxPageHeight)
                        this._backgroundElement.style.top = (scrollTop - 2 * backgroundEleHeight / 5) + 'px';
                    else
                        this._backgroundElement.style.top = (maxPageHeight - backgroundEleHeight) + 'px';
                else
                    this._backgroundElement.style.top = '1px';
            } else
                this._backgroundElement.style.top = '1px';
        } else
            this._backgroundElement.style.height = maxPageHeight + 'px';
    },
    _fixupDropShadowBehavior : function() {
        /// <summary>
        /// Some browsers don't update the location values immediately, so
        /// the location of the drop shadow would always be a step behind
        /// without this method
        /// </summary>

        if (this._dropShadowBehavior) {
            this._dropShadowBehavior.setShadow();
        }
    },

    _partialUpdateEndRequest : function(sender, endRequestEventArgs) {
        /// <summary>
        /// Show the popup if requested during a partial postback
        /// </summary>
        /// <param name="sender" type="Object">
        /// Sender
        /// </param>
        /// <param name="endRequestEventArgs" type="Sys.WebForms.EndRequestEventArgs">
        /// Event arguments
        /// </param>
        /// <returns />
        AjaxControlToolkit.ModalPopupBehavior.callBaseMethod(this, '_partialUpdateEndRequest', [sender, endRequestEventArgs]);

        if (this.get_element()) {
            // Look up result by element's ID
            var action = endRequestEventArgs.get_dataItems()[this.get_element().id];
            if ("show" == action) {
                this.show();
            } else if ("hide" == action) {
                this.hide();
            }
        }

        // Async postback may have added content; re-layout to accomodate it
        this._layout();
    },

    _onPopulated : function(sender, eventArgs) {
        /// <summary>
        /// Re-layout the popup after we've dynamically populated
        /// </summary>
        /// <param name="sender" type="Object">
        /// Sender
        /// </param>
        /// <param name="eventArgs" type="Sys.EventArgs">
        /// Event arguments
        /// </param>
        /// <returns />
        AjaxControlToolkit.ModalPopupBehavior.callBaseMethod(this, '_onPopulated', [sender, eventArgs]);

        // Dynamic populate may have added content; re-layout to accomodate it
        this._layout();
    },
    
    get_PopupControlID : function() {
        /// <value type="String">
        /// The ID of the element to display as a modal popup
        /// </value>
        return this._PopupControlID;
    },
    set_PopupControlID : function(value) {
        if (this._PopupControlID != value) {
            this._PopupControlID = value;
            this.raisePropertyChanged('PopupControlID');
        }
    },

    get_X: function() {
        /// <value type="Number" integer="true">
        /// The number of pixels from the left of the browser to position the modal popup.
        /// </value>
        return this._xCoordinate;
    },
    set_X: function(value) {
        if (this._xCoordinate != value) {
            this._xCoordinate = value;
            this.raisePropertyChanged('X');
        }
    },

    get_Y: function() {
        /// <value type="Number" integer="true">
        /// The number of pixels from the top of the browser to position the modal popup.
        /// </value>
        return this._yCoordinate;
    },
    set_Y: function(value) {
        if (this._yCoordinate != value) {
            this._yCoordinate = value;
            this.raisePropertyChanged('Y');
        }
    },
       
    get_PopupDragHandleControlID : function() {
        /// <value type="String">
        /// The ID of the element to display as the drag handle for the modal popup
        /// </value>
        return this._PopupDragHandleControlID;
    },
    set_PopupDragHandleControlID : function(value) {
        if (this._PopupDragHandleControlID != value) {
            this._PopupDragHandleControlID = value;
            this.raisePropertyChanged('PopupDragHandleControlID');
        }
    },

    get_BackgroundCssClass : function() {
        /// <value type="String">
        /// The CSS class to apply to the background when the modal popup is displayed
        /// </value>
        return this._BackgroundCssClass;
    },
    set_BackgroundCssClass : function(value) {
        if (this._BackgroundCssClass != value) {
            this._BackgroundCssClass = value;
            this.raisePropertyChanged('BackgroundCssClass');
        }
    },

    get_DropShadow : function() {
        /// <value type="Boolean">
        /// Whether or not a drop-shadow should be added to the modal popup
        /// </value>
        return this._DropShadow;
    },
    set_DropShadow : function(value) {
        if (this._DropShadow != value) {
            this._DropShadow = value;
            this.raisePropertyChanged('DropShadow');
        }
    },

    get_Drag : function() {
        /// <value type="Boolean">
        /// Obsolete: Setting the _Drag property is a noop
        /// </value>
        return this._Drag;
    },
    set_Drag : function(value) {
        if (this._Drag != value) {
            this._Drag = value;
            this.raisePropertyChanged('Drag');
        }
    },

    get_OkControlID : function() {
        /// <value type="String">
        /// The ID of the element that dismisses the modal popup
        /// </value>
        return this._OkControlID;
    },
    set_OkControlID : function(value) {
        if (this._OkControlID != value) {
            this._OkControlID = value;
            this.raisePropertyChanged('OkControlID');
        }
    },

    get_CancelControlID : function() {
        /// <value type="String">
        /// The ID of the element that cancels the modal popup
        /// </value>
        return this._CancelControlID;
    },
    set_CancelControlID : function(value) {
        if (this._CancelControlID != value) {
            this._CancelControlID = value;
            this.raisePropertyChanged('CancelControlID');
        }
    },

    get_OnOkScript : function() {
        /// <value type="String">
        /// Script to run when the modal popup is dismissed with the OkControlID
        /// </value>
        return this._OnOkScript;
    },
    set_OnOkScript : function(value) {
        if (this._OnOkScript != value) {
            this._OnOkScript = value;
            this.raisePropertyChanged('OnOkScript');
        }
    },

    get_OnCancelScript : function() {
        /// <value type="String">
        /// Script to run when the modal popup is dismissed with the CancelControlID
        /// </value>
        return this._OnCancelScript;
    },
    set_OnCancelScript : function(value) {
        if (this._OnCancelScript != value) {
            this._OnCancelScript = value;
            this.raisePropertyChanged('OnCancelScript');
        }
    },

    get_repositionMode : function() {
        /// <value type="AjaxControlToolkit.ModalPopupRepositionMode">
        /// Determines if the ModalPopup should be repositioned on window resize/scroll
        /// </value>
        return this._repositionMode;
    },
    set_repositionMode : function(value) {
        if (this._repositionMode !== value) {
            this._repositionMode = value;
            this.raisePropertyChanged('RepositionMode');
        }
    },
    
    add_showing : function(handler) {
        /// <summary>
        /// Add an event handler for the showing event
        /// </summary>
        /// <param name="handler" type="Function" mayBeNull="false">
        /// Event handler
        /// </param>
        /// <returns />
        this.get_events().addHandler('showing', handler);
    },
    remove_showing : function(handler) {
        /// <summary>
        /// Remove an event handler from the showing event
        /// </summary>
        /// <param name="handler" type="Function" mayBeNull="false">
        /// Event handler
        /// </param>
        /// <returns />
        this.get_events().removeHandler('showing', handler);
    },
    raiseShowing : function(eventArgs) {
        /// <summary>
        /// Raise the showing event
        /// </summary>
        /// <param name="eventArgs" type="Sys.CancelEventArgs" mayBeNull="false">
        /// Event arguments for the showing event
        /// </param>
        /// <returns />
        
        var handler = this.get_events().getHandler('showing');
        if (handler) {
            handler(this, eventArgs);
        }
    },
    
    add_shown : function(handler) {
        /// <summary>
        /// Add an event handler for the shown event
        /// </summary>
        /// <param name="handler" type="Function" mayBeNull="false">
        /// Event handler
        /// </param>
        /// <returns />
        this.get_events().addHandler('shown', handler);
    },
    remove_shown : function(handler) {
        /// <summary>
        /// Remove an event handler from the shown event
        /// </summary>
        /// <param name="handler" type="Function" mayBeNull="false">
        /// Event handler
        /// </param>
        /// <returns />
        this.get_events().removeHandler('shown', handler);
    },
    raiseShown : function(eventArgs) {
        /// <summary>
        /// Raise the shown event
        /// </summary>
        /// <param name="eventArgs" type="Sys.EventArgs" mayBeNull="false">
        /// Event arguments for the shown event
        /// </param>
        /// <returns />
        
        var handler = this.get_events().getHandler('shown');
        if (handler) {
            handler(this, eventArgs);
        }
    },
    
    add_hiding : function(handler) {
        /// <summary>
        /// Add an event handler for the hiding event
        /// </summary>
        /// <param name="handler" type="Function" mayBeNull="false">
        /// Event handler
        /// </param>
        /// <returns />
        this.get_events().addHandler('hiding', handler);
    },
    remove_hiding : function(handler) {
        /// <summary>
        /// Remove an event handler from the hiding event
        /// </summary>
        /// <param name="handler" type="Function" mayBeNull="false">
        /// Event handler
        /// </param>
        /// <returns />
        this.get_events().removeHandler('hiding', handler);
    },
    raiseHiding : function(eventArgs) {
        /// <summary>
        /// Raise the hiding event
        /// </summary>
        /// <param name="eventArgs" type="Sys.CancelEventArgs" mayBeNull="false">
        /// Event arguments for the hiding event
        /// </param>
        /// <returns />
        
        var handler = this.get_events().getHandler('hiding');
        if (handler) {
            handler(this, eventArgs);
        }
    },
    
    add_hidden : function(handler) {
        /// <summary>
        /// Add an event handler for the hidden event
        /// </summary>
        /// <param name="handler" type="Function" mayBeNull="false">
        /// Event handler
        /// </param>
        /// <returns />
        this.get_events().addHandler('hidden', handler);
    },
    remove_hidden : function(handler) {
        /// <summary>
        /// Remove an event handler from the hidden event
        /// </summary>
        /// <param name="handler" type="Function" mayBeNull="false">
        /// Event handler
        /// </param>
        /// <returns />
        this.get_events().removeHandler('hidden', handler);
    },
    raiseHidden : function(eventArgs) {
        /// <summary>
        /// Raise the hidden event
        /// </summary>
        /// <param name="eventArgs" type="Sys.EventArgs" mayBeNull="false">
        /// Event arguments for the hidden event
        /// </param>
        /// <returns />
        
        var handler = this.get_events().getHandler('hidden');
        if (handler) {
            handler(this, eventArgs);
        }
    }
}
AjaxControlToolkit.ModalPopupBehavior.registerClass('AjaxControlToolkit.ModalPopupBehavior', AjaxControlToolkit.DynamicPopulateBehaviorBase);

AjaxControlToolkit.ModalPopupBehavior.invokeViaServer = function(behaviorID, show) {
    /// <summary>
    /// This static function (that is intended to be called from script emitted
    /// on the server) will show or hide the behavior associated with behaviorID
    /// (i.e. to use this, the ModalPopupExtender must have an ID or BehaviorID) and
    /// will either show or hide depending on the show parameter.
    /// </summary>
    /// <param name="behaviorID" type="String">
    /// ID of the modal popup behavior
    /// </param>
    /// <param name="show" type="Boolean">
    /// Whether to show or hide the modal popup
    /// </param>
    var behavior = $find(behaviorID);
    if (behavior) {
        if (show) {
            behavior.show();
        } else {
            behavior.hide();
        }
    }
}

//END AjaxControlToolkit.ModalPopup.ModalPopupBehavior.js
//START Trisept.UI.Web.Availability.AvailDisplay.js
Type.registerNamespace("Avail");

//Controls avail sorting, filtering and paging
Avail.AvailDisplay = function (availDisplayConfig) {
    this._availDisplayConfig = availDisplayConfig;
    this._availSet = availDisplayConfig.AvailSet;
    this._tempAvailSet = null;  //Scratch copy of items used for predicting filter counts

    this._tileContainer = $("#" + availDisplayConfig.TileContainerId);
    this._noResultsMessageElement = $("#" + availDisplayConfig.NoResultsMessageId);
    this._validItemCountElement = $("#" + availDisplayConfig.ValidItemCountId);
    this._waitIndicator = $("#" + availDisplayConfig.WaitIndicatorId);
    this._filterCalloutElement = $("#" + availDisplayConfig.FilterCalloutId);

    this._priceSlider = $("#" + availDisplayConfig.PriceSliderId);
    this._updateWhileSliding = availDisplayConfig.UpdateWhileSliding;
    this._selectedLowPrice = -1;    //User-selected slider value
    this._selectedHighPrice = -1;   //User-selected slider value

    this._sortInputs = [];

    this._pageSizeInputs = [];
    this._pagingControls = [];
    this._page = 1;
    this._pageSize = availDisplayConfig.DefaultPageSize;
    this._pageStartIndex = 0;
    this._pageEndIndex = this._pageStartIndex + this._pageSize;
    this._totalPages = Math.ceil(this._availSet.Items.length / this._pageSize);
    this._topOfPageElement = $("#" + availDisplayConfig.TopOfPageId);

    this._nameInput = $("#" + availDisplayConfig.NameInputId);

    this._distanceUnits = availDisplayConfig.DistanceUnits;
    this._distanceUnitText = availDisplayConfig.DistanceUnitText;
    this._currencyCode = availDisplayConfig.CurrencyCode;
    this._currencySymbol = availDisplayConfig.CurrencySymbol;

    this._enabledClearButton = $("#" + availDisplayConfig.EnabledClearButtonId);    //DEPRECATED: Use _clearButton instead
    this._disabledClearButton = $("#" + availDisplayConfig.DisabledClearButtonId);  //DEPRECATED: Use _clearButton instead
    this._clearButton = $("#" + availDisplayConfig.ClearButtonId);

    this._filterCalloutState = new Avail.FilterCalloutState();

    this._waitIndicatorMinDuration = 500;
    this._waitIndicatorStartTime = 0;
    this.waitIndicatorTimeoutDuration = 20;

    this._maxPhoneWidth = 414;

    this.SaveStateEnabled = this._availDisplayConfig.SaveState;
    this.AvailStateManager = null;

    this._initInProgress = false;

    var currentObject = this;
    $(document).ready(function () {
        currentObject._initInProgress = true;

        currentObject._UpdateDisplayForFiltering(true, false); //Initialize counts, paging, etc.

        currentObject._InitializeFilterCallout();   //Show callout if needed

        currentObject.PreSelectFilters();

        if (currentObject.SaveStateEnabled == true) {
            currentObject.RestoreAvailState();
        }
        else {
            currentObject.ReSort(); //Initial sort to match selected option
        }

        setTimeout(function () {
            currentObject._initInProgress = false;
        }, 1);

    });
}

Avail.AvailDisplay.prototype = {

    //=== General ===

    //Returns collection of items from main item set.  Consumers of this class need not know about or use the "private" _availSet and _tempAvailSet collections.
    Items: function () {
        return this._availSet.Items;
    },

    //Returns collection of valid items from main item set.  Consumers of this class need not know about or use the "private" _availSet and _tempAvailSet collections.
    ValidItems: function () {
        return this._availSet.ValidItems();
    },

    //Get item from main item set by its tile element ID
    GetItemByTileId: function (tileId) {
        return this._availSet.GetItemByTileId(tileId);
    },

    //Move to top of avail area
    ScrollToTop: function () {
        if (this._topOfPageElement.length > 0) {
            $('html, body').scrollTop(this._topOfPageElement.offset().top);
        }
    },

    //Show only valid items for current page
    _UpdateVisibleTiles: function () {

        //Determine item indexes to show based on page settings
        this._pageStartIndex = (this._page - 1) * this._pageSize;
        this._pageEndIndex = this._pageStartIndex + this._pageSize - 1;

        //Hide all tiles
        if (this._tileContainer.length > 0) {
            this._tileContainer.children().hide();
        }

        //Show/hide sub-items (e.g. fare options)
        this._UpdateVisibleTileSubItems();

        //Show valid tiles for current page
        var validItems = this._availSet.ValidItems();
        for (i = validItems.length - 1; i >= 0; i--) {  //Go backwards so tiles are prepended in correct order
            if (this._pageSize == 999 || (i >= this._pageStartIndex && i <= this._pageEndIndex)) {  //Would prefer to use -1 to mean "all items", but existing resx uses 999
                var tile = validItems[i].Tile;
                tile.parent().prepend(tile);
                tile.show();
            }
        }
    },

    //Lazy-loaded wait indicator (because it may not have been present before/above this script initialization)
    _WaitIndicator: function () {
        if (this._waitIndicator.length == 0) {
            this._waitIndicator = $("#" + availDisplayConfig.WaitIndicatorId);
        }

        return this._waitIndicator;
    },

    _ShowWaitIndicator: function () {
        this._waitIndicatorStartTime = new Date();
        this._WaitIndicator().show();
    },

    _HideWaitIndicator: function () {
        var endTime = new Date();
        var timeDifference = endTime - this._waitIndicatorStartTime;
        var waitScreenDuration = 0;

        if (timeDifference < this._waitIndicatorMinDuration) {
            waitScreenDuration = (this._waitIndicatorMinDuration - timeDifference);
        }


        var currentObject = this;
        setTimeout(function () {
            currentObject._WaitIndicator().hide();
        }, waitScreenDuration);
    },


    //Show the filtering callout if necessary
    _InitializeFilterCallout: function () {
        if (this._filterCalloutState.GetFilterCalloutLastHidden() == null) {
            this._ShowFilterCallout();  //Show if not seen before
        }
        else {
            if (this._filterCalloutState.IsFilterCalloutExpired()) {
                //Re-show if last hidden too long ago
                this._ShowFilterCallout();
                this._filterCalloutState.ClearFilterCalloutLastHidden();
            }
        }
    },

    _ShowFilterCallout: function () {
        this._filterCalloutElement.show();
    },

    HideFilterCallout: function () {
        this._filterCalloutElement.hide();
        this._filterCalloutState.UpdateFilterCalloutLastHidden();
    },

    ExpandSection: function (sectionId, expandTriggerId, collapseTriggerId) {
        $("#" + expandTriggerId).hide();
        $("#" + collapseTriggerId).show();
        $("#" + sectionId).slideToggle("fast", function () { });
    },

    CollapseSection: function (sectionId, expandTriggerId, collapseTriggerId) {
        $("#" + sectionId).slideToggle("fast", function () {
            $("#" + expandTriggerId).show();
            $("#" + collapseTriggerId).hide();
        });
    },

    //'Overridable': Activate filters automatically (e.g. profile settings)
    PreSelectFilters: function () {

    },

    //Restores user selections from saved avail state
    RestoreAvailState: function () {
        this._RestoreFilters();
        this._RestorePanelStates();

        var currentObject = this;
        setTimeout(function () {
            currentObject._RestoreSorting();
            currentObject._RestorePaging();
        }, 1);
    },

    ShowNewSearchModal: function () {
        $('#NewSearchWrap').appendTo('#NewSearchModalContent');
        $('#pnlRecentSearches').appendTo('#NewSearchModalContent');
        showModal('NewSearchModalView', 'modalPopup', 1, -1, WebForm_GetScrollY() + 20, '', -1, -1);
    },

    ShowFiltersModal: function () {
        $('#responsive-filters-hook').appendTo('#FiltersModalContent');
        showModal('FiltersModalView', 'modalPopup', 1, -1, WebForm_GetScrollY() + 20, '', -1, -1);
        this._ResizeSliders();
    },

    //'Overridable' - Resize all sliders (for after moving them to new context)
    _ResizeSliders: function () {
        this._priceSlider.rangeSlider('resize');
    },

    //'Overridable' - Show/hide any relevant sub-items (e.g. fare options)
    _UpdateVisibleTileSubItems: function () {

    },

    //=== Filtering ===

    FilterByPrice: function (lowPrice, highPrice) {
        this._availSet.FilterByPrice(lowPrice, highPrice);

        if (this._updateWhileSliding == true) {
            this._ShowWaitIndicator();

            var currentObject = this;
            setTimeout(function () {
                currentObject._UpdateDisplayForFiltering(false, false);
            }, currentObject.waitIndicatorTimeoutDuration);
        }
        else {
            this._UpdateCurrentItemCount();
        }
    },

    PredictFilterByPriceCount: function (lowPrice, highPrice) {
        this._CloneAvailSet();
        this._tempAvailSet.FilterByPrice(lowPrice, highPrice);
        return this._tempAvailSet.ValidItemCount();
    },

    //Called on drag of price slider handle
    PriceSliderValuesChanging: function () {

        var filterLow;
        //If not user-selected and still at start, use negative infinity (covers first time when user has dragged but not released yet)
        if (this._selectedLowPrice == -1 && this._priceSlider.rangeSlider("values").min == this._priceSlider.rangeSlider("bounds").min) {
            filterLow = Number.NEGATIVE_INFINITY;
        }
        else {
            filterLow = this._priceSlider.rangeSlider("values").min;
        }

        var filterHigh;
        //If not user-selected and still at end, use infinity (covers first time when user has dragged but not released yet)
        if (this._selectedHighPrice == -1 && this._priceSlider.rangeSlider("values").max == this._priceSlider.rangeSlider("bounds").max) {
            filterHigh = Number.POSITIVE_INFINITY;
        }
        else {
            filterHigh = this._priceSlider.rangeSlider("values").max;
        }

        this.FilterByPrice(filterLow, filterHigh);
    },

    //'Overridable' - Called on release of price slider handle
    PriceSliderValuesChanged: function () {
        //Save user selections, unless it's a min or max value and they never changed it previously
        if ((this._priceSlider.rangeSlider("values").min == this._priceSlider.rangeSlider("bounds").min && this._selectedLowPrice == -1) == false) {
            this._selectedLowPrice = this._priceSlider.rangeSlider("values").min;
        }
        if ((this._priceSlider.rangeSlider("values").max == this._priceSlider.rangeSlider("bounds").max && this._selectedHighPrice == -1) == false) {
            this._selectedHighPrice = this._priceSlider.rangeSlider("values").max;
        }

        //If not updating while sliding, update once after value changed
        if (this._updateWhileSliding == false) {
            this._ShowWaitIndicator();

            var currentObject = this;
            setTimeout(function () {
                currentObject._UpdateDisplayForFiltering(false, false);
            }, currentObject.waitIndicatorTimeoutDuration);
        }
    },

    //Change price slider range to correlate to current valid items
    _UpdatePriceSliderRange: function () {

        //Get current price range of items, ignoring price filtering.  If you don't, new valid range could get restricted based on current range selection.
        var lowestPrice = this._availSet.LowestValidPriceIgnoringPrice();
        var highestPrice = this._availSet.HighestValidPriceIgnoringPrice();

        //Adjust to nearest step
        var stepSize = this._priceSlider.rangeSlider("option", "step");
        var sliderMin = Math.floor(lowestPrice / stepSize) * stepSize;
        var sliderMax = Math.ceil(highestPrice / stepSize) * stepSize;
        this._priceSlider.rangeSlider({ bounds: { min: sliderMin, max: sliderMax } });
        if (typeof (UpdateSliderAccessibility) == "function") {
            UpdateSliderAccessibility(this._priceSlider, "price");  //Keep ARIA in sync when bounds changed
        }

        //Move handles to as close to last user-selected position as possible
        var handleLow = sliderMin;
        if (this._selectedLowPrice != -1) {
            if (this._selectedLowPrice >= sliderMin && this._selectedLowPrice <= sliderMax) {
                handleLow = this._selectedLowPrice;
            }
            else if (this._selectedLowPrice < sliderMin) {
                handleLow = sliderMin;
            }
            else {
                handleLow = sliderMax - stepSize;  //One step below top (shouldn't happen)
            }
        }

        var handleHigh = sliderMax;
        if (this._selectedHighPrice != -1) {
            if (this._selectedHighPrice >= sliderMin && this._selectedHighPrice <= sliderMax) {
                handleHigh = this._selectedHighPrice;
            }
            else if (this._selectedHighPrice < sliderMin) {
                handleHigh = sliderMin + stepSize;  //One step above bottom (shouldn't happen)
            }
            else {
                handleHigh = sliderMax;
            }
        }

        this._priceSlider.rangeSlider("values", handleLow, handleHigh);

        //Disable slider if valid range is small enough to only cover one step
        if (sliderMax - sliderMin <= stepSize) {
            this._priceSlider.rangeSlider("disable");
        }
        else {
            this._priceSlider.rangeSlider("enable");
        }

        //Re-filter based on new valid range and/or handle position.
        //If no user-selected price, use +/- infinity.  If user-selected price is outside valid range, use it.  Otherwise, use value slider is being set to.  This will not affect
        //the items *currently* shown, because items out of the valid price range will be filtered out for other reasons (which caused the range to be restricted in the first place).  It will
        //make the predictive counts for other filters correct, though, due to the way non-user-selected handle positions get moved to the end of the slider's valid range when other
        //filters are applied and the valid price range updates.
        var filterLow;
        if (this._selectedLowPrice == -1) {
            filterLow = Number.NEGATIVE_INFINITY;
        }
        else if (this._selectedLowPrice < handleLow) {
            filterLow = this._selectedLowPrice;
        }
        else {
            filterLow = handleLow;
        }

        var filterHigh;
        if (this._selectedHighPrice == -1) {
            filterHigh = Number.POSITIVE_INFINITY;
        }
        else if (this._selectedHighPrice > handleHigh) {
            filterHigh = this._selectedHighPrice;
        }
        else {
            filterHigh = handleHigh;
        }

        this._availSet.FilterByPrice(filterLow, filterHigh);
    },

    FilterByName: function (text) {
        this._ShowWaitIndicator();

        var currentObject = this;
        setTimeout(function () {
            currentObject._availSet.FilterByName(text);
            currentObject._UpdateDisplayForFiltering(true, false);
        }, currentObject.waitIndicatorTimeoutDuration);
    },

    ValidItemCount: function () {
        return this._availSet.ValidItemCount();
    },

    //Remove all currently applied filters
    ClearAllFilters: function () {
        this._ShowWaitIndicator();

        var currentObject = this;
        setTimeout(function () {
            currentObject._availSet.ClearAllFilters();
            currentObject._ResetAllFilterControls();
            currentObject._ClearSavedFilterState();
            currentObject._UpdateDisplayForFiltering(true, true);
        }, currentObject.waitIndicatorTimeoutDuration);
    },

    //'Overridable' - Reset all filter controls to default state
    _ResetAllFilterControls: function () {
        this._ResetPriceControl();
        this._ResetNameControl();
    },

    //'Overridable' - Reset specified filter controls to default state
    _ResetSpecifiedFilterControls: function (resetPrice, resetName) {
        if (resetPrice == true) {
            this._ResetPriceControl();
        }
        if (resetName == true) {
            this._ResetNameControl();
        }
    },

    _ResetPriceControl: function () {
        //Reset price slider
        if (this._priceSlider.length > 0) {
            var sliderBounds = this._priceSlider.rangeSlider("bounds");
            this._priceSlider.rangeSlider("values", sliderBounds.min, sliderBounds.max);
        }

        //Clear user's price selections
        this._selectedLowPrice = -1;
        this._selectedHighPrice = -1;
    },

    _ResetNameControl: function () {
        //Clear name input
        if (this._nameInput.length > 0) {
            this._nameInput.val("");
        }
    },

    //Creates new temp avail set object and clones base AvailSet properties of current avail set object into it.
    _CloneAvailSet: function () {
        this._ClearTempAvailSet();

        //Clone items
        for (var i = 0; i < this._availSet.Items.length; i++) {
            this._tempAvailSet.Items.push(jQuery.extend(true, {}, this._availSet.Items[i]));
        }
    },

    //'Abstract' method that sets temp avail set object to a new/blank object of the appropriate child type (i.e. VehicleAvailSet)
    _ClearTempAvailSet: function () {
        throw Error('Unimplemented abstract method: AvailDisplay._ClearTempAvailSet()');
    },

    //'Overridable'
    _UpdatePredictiveCounts: function () {
        //Update base AvailDisplay filter option counts here

        //Only show names of valid items in name input autocomplete
        if (this._nameInput.length > 0) {
            var validNames = new Array();
            var validItems = this._availSet.ValidItems();
            for (i = 0; i < validItems.length; i++) {
                validNames.push(validItems[i].Name);
            }
            this._nameInput.autocomplete({
                source: validNames
            });
        }
    },

    //Set reset button enabled state per active filters
    _UpdateClearButtons: function () {

        if (this._clearButton.length > 0) { //New accessible 1-button version
            if (this._AnyFiltersActive() == true) {
                this._clearButton.prop("disabled", false);
            }
            else {
                this._clearButton.prop("disabled", true);
            }
        }
        else {
            if (this._AnyFiltersActive() == true) {
                this._enabledClearButton.show();
                this._disabledClearButton.hide();
            }
            else {
                this._enabledClearButton.hide();
                this._disabledClearButton.show();
            }
        }
    },

	_UpdateNoItemsMessage: function () {
        var validItemCount = this._UpdateCurrentItemCount();

        //Show/hide 'no results' message
        if (validItemCount == 0) {
            this._ShowNoItemsMessage();
        }
        else {
            this._HideNoItemsMessage();
        }
	},

    //'Overridable' - Show the No Items message
    _ShowNoItemsMessage: function () {
        if (this._noResultsMessageElement.length > 0) {
            this._noResultsMessageElement.show();
        }
    },
	
    //'Overridable' - Hide the No Items message
    _HideNoItemsMessage: function () {
        if (this._noResultsMessageElement.length > 0) {
            this._noResultsMessageElement.hide();
        }
    },

    //Whether any filters are currently applied to the display
    _AnyFiltersActive: function () {
        if (this._AnyNonOptionedFiltersActive() == true || this._availSet.AnyFilterOptionsActive() == true) {
            return true;
        }
        else {
            return false;
        }
    },

    //Whether any main-specific (i.e. gutter-specific) filters are currently applied to the display
    _AnyMainFiltersActive: function () {
        if (this._AnyNonOptionedFiltersActive() == true || this._availSet.AnyMainFilterOptionsActive() == true) {
            return true;
        }
        else {
            return false;
        }
    },

    //'Overridable' - Whether any filters that don't have specific options are currently applied
    _AnyNonOptionedFiltersActive: function () {
        if (this._FilteredByPrice() == true || this._FilteredByName() == true) {
            return true;
        }
        else {
            return false;
        }
    },

    //Whether price filter is in use
    _FilteredByPrice: function () {
        var filteredByPrice = false;
        if (this._priceSlider.length > 0) {
            var sliderBounds = this._priceSlider.rangeSlider("bounds");
            if (sliderBounds.min != this._priceSlider.rangeSlider("min") || sliderBounds.max != this._priceSlider.rangeSlider("max")) {
                filteredByPrice = true;
            }
        }
        return filteredByPrice;
    },

    //Whether name filter is in use
    _FilteredByName: function () {
        var filteredByName = false;
        if (this._nameInput.length > 0 && this._nameInput.val() != "") {
            filteredByName = true;
        }
        return filteredByName;
    },

    //Hide filtered out avail tiles and update filtering controls, predictive counts, etc.
    // - updateValidPrices: whether to update the price control with the current valid price ranges/options (use true when changing filters besides price)
    // - updateSorting: whether to re-sort (use true when filtering changed sort data, e.g. basic econ filter changes item prices)
    _UpdateDisplayForFiltering: function (updateValidPrices, updateSorting) {
        if (this._availSet.Items.length == 0) {
            return;
        }
        this._UpdateTotalPages();

        this._page = 1;
        if (this.SaveStateEnabled == true && this._initInProgress == false) {
            this.AvailStateManager.SetPageNumber(1);
        }

        //If needed, update price range based on valid items
        if (updateValidPrices == true && this._priceSlider.length > 0) {
            this._UpdatePriceSliderRange();
        }

        this._UpdateVisibleTiles();
        this._UpdatePagingControls();

		this._UpdateNoItemsMessage();

        //Update count predictions for filters
        this._UpdatePredictiveCounts();

        this._UpdateClearButtons();
        this._HideWaitIndicator();

        //Re-sort if filtering may have changed sort data
        if (updateSorting == true) {
            this.ReSort();
        }
    },

    //Update displayed number of currently valid items
    _UpdateCurrentItemCount: function () {
        var validItemCount = this._availSet.ValidItemCount();
        if (this._validItemCountElement.length > 0) {
            this._validItemCountElement.html(validItemCount);
        }

        return validItemCount;
    },

    //'Overridable' - Re-checks boxes & re-filters relevant items in a multi-select filter based on given state data
    RestoreCheckboxFilters: function (filterType, filterStates, checkboxPrefix, expandTriggerId, optionsAreaId, optionElementType) {
        for (var i = 0; i < filterStates.length; i++) {
            if (filterStates[i].Selected == true) {
                var checkbox = $("#" + checkboxPrefix + filterStates[i].Id);
                checkbox.prop("checked", true);

                //Auto expand if needed
                if (checkbox.is(":visible") == false) {
                    if (expandTriggerId != null && expandTriggerId != "") {
                        $('#' + expandTriggerId).hide();
                    }
                    if (optionsAreaId != null && optionsAreaId != "") {
                        $("#" + optionsAreaId + " " + optionElementType).show();
                    }
                }
            }
        }
    },

    //'Overridable' - Restores user filter selections
    _RestoreFilters: function () {
        var currentObject = this;
        setTimeout(function () {
            currentObject._RestoreSliders();
        }, 1);
    },

    //'Overridable' - restores slider selections
    _RestoreSliders: function () {

    },

    //'Overridable' - Restores collapsible panel states
    _RestorePanelStates: function () {

    },

    _RestorePaging: function () {
        var savedSize = this.AvailStateManager.GetPageSize();
        var savedPage = this.AvailStateManager.GetPageNumber();
        if (savedSize > -1) {
            this.ChangePageSize(savedSize);
        }
        if (savedPage > -1) {
            var currentObject = this;
            setTimeout(function () {
                currentObject.GoToPage(savedPage);
            }, 1);
        }
    },

    _RestoreSorting: function () {
        var savedSort = this.AvailStateManager.GetSort();
        if (savedSort != "") {
            this.Sort(savedSort);   //Restore saved sort
        }
        else {
            if (this._sortInputs.length > 0) {
                this.Sort(this._sortInputs[0].val());   //Otherwise use default
            }
        }
    },

    //Restores state for given panel tied to an option collection
    _RestorePanelState: function (triggerId, multiSelectFilterState) {

        //Force open if it has active filters
        var multiSelectFilterStates = [multiSelectFilterState];
        if (this._AnyMultiSelectFiltersActive(multiSelectFilterStates) == true) {

            //Update saved state via reference
            multiSelectFilterState.Open = true;
            this.AvailStateManager.SaveState();
        }

        //Toggle panel if necessary
        if ((IsPanelExpanded(triggerId) == true && multiSelectFilterState.Open == false) || (IsPanelExpanded(triggerId) == false && multiSelectFilterState.Open == true)) {
            $("#" + triggerId).trigger("click");
        }
    },

    //Restores state for given panel tied to multiple option collections
    _RestorePanelStateGroup: function (triggerId, multiSelectFilterStates, savedOpen) {

        //Force open if it has active filters
        var newOpenVal = savedOpen;
        if (this._AnyMultiSelectFiltersActive(multiSelectFilterStates) == true) {

            //Can't update saved state via boolean (no reference)
            newOpenVal = true;
        }

        //Toggle panel if necessary
        if ((IsPanelExpanded(triggerId) == true && newOpenVal == false) || (IsPanelExpanded(triggerId) == false && newOpenVal == true)) {
            $("#" + triggerId).trigger("click");
        }

        return newOpenVal;  //Caller must update saved value
    },

    //Whether any filters in the given multiSelect states are active
    _AnyMultiSelectFiltersActive: function (multiSelectFilterStates) {
        for (var i = 0; i < multiSelectFilterStates.length; i++) {
            for (var j = 0; j < multiSelectFilterStates[i].States.length; j++) {
                if (multiSelectFilterStates[i].States[j].Selected == true) {
                    return true;
                }
            }
        }

        return false;
    },

    //'Overridable' - Clears filter selections
    _ClearSavedFilterState: function () {

    },


    //=== Sorting ===

    Sort: function (sortType) {
        this._ShowWaitIndicator();
        this._SortItems(sortType);

        if (this.SaveStateEnabled == true && this._initInProgress == false) {
            this.AvailStateManager.SetSort(sortType);
        }

        this._UpdateDisplayForSorting(sortType);
    },

    //Re-apply current sort
    ReSort: function () {
        if (this._sortInputs[0] != undefined) {
            this.Sort(this._sortInputs[0].val());
        }
    },

    //'Overridable' method that sorts items as specified
    _SortItems: function (sortType) {
        if (sortType == "PriceAsc") {
            this._availSet.Items.sort(this._SortByPriceAsc);
        }
        else if (sortType == "PriceDsc") {
            this._availSet.Items.sort(this._SortByPriceDsc);
        }
        else if (sortType == "NameAsc") {
            this._availSet.Items.sort(this._SortByNameAsc);
        }
        else if (sortType == "NameDsc") {
            this._availSet.Items.sort(this._SortByNameDsc);
        }
        else if (sortType == "PreferredAsc") {
            this._availSet.Items.sort(this._SortByPreferredAsc);
        }
        else if (sortType == "PreferredDsc") {
            this._availSet.Items.sort(this._SortByPreferredDsc);
        }
    },

    _SortByPriceAsc: function (itemA, itemB) {
        if (itemA.Price > itemB.Price) {
            return 1;
        }
        else if (itemA.Price == itemB.Price) {
            return 0;
        }
        else {
            return -1;
        }
    },

    _SortByPriceDsc: function (itemA, itemB) {
        if (itemA.Price > itemB.Price) {
            return -1;
        }
        else if (itemA.Price == itemB.Price) {
            return 0;
        }
        else {
            return 1;
        }
    },

    _SortByNameAsc: function (itemA, itemB) {
        var normalizedA = NormalizeDiacritics(itemA.Name).toLowerCase();
        var normalizedB = NormalizeDiacritics(itemB.Name).toLowerCase();

        if (normalizedA > normalizedB) {
            return 1;
        }
        else if (normalizedA == normalizedB) {
            return Avail.AvailDisplay.prototype._SortByPriceAsc.call(this, itemA, itemB);
        }
        else {
            return -1;
        }
    },

    _SortByNameDsc: function (itemA, itemB) {
        var normalizedA = NormalizeDiacritics(itemA.Name).toLowerCase();
        var normalizedB = NormalizeDiacritics(itemB.Name).toLowerCase();

        if (normalizedA > normalizedB) {
            return -1;
        }
        else if (normalizedA == normalizedB) {
            return Avail.AvailDisplay.prototype._SortByPriceAsc.call(this, itemA, itemB);
        }
        else {
            return 1;
        }
    },

    _SortByPreferredAsc: function (itemA, itemB) {
        if (itemA.PreferredRanking > itemB.PreferredRanking) {
            return 1;
        }
        else if (itemA.PreferredRanking == itemB.PreferredRanking) {
            return Avail.AvailDisplay.prototype._SortByPriceAsc.call(this, itemA, itemB);
        }
        else {
            return -1;
        }
    },

    _SortByPreferredDsc: function (itemA, itemB) {
        if (itemA.PreferredRanking > itemB.PreferredRanking) {
            return -1;
        }
        else if (itemA.PreferredRanking == itemB.PreferredRanking) {
            return Avail.AvailDisplay.prototype._SortByPriceAsc.call(this, itemA, itemB);
        }
        else {
            return 1;
        }
    },

    //Go to page 1 and show only valid avail tiles
    _UpdateDisplayForSorting: function (sortType) {
        if (this._availSet.Items.length == 0) {
            return;
        }

        this._page = 1;
        if (this.SaveStateEnabled == true && this._initInProgress == false) {
            this.AvailStateManager.SetPageNumber(1);
        }

        this._UpdateVisibleTiles();
        this._UpdatePagingControls();

        //Sync all inputs
        for (var i = 0; i < this._sortInputs.length; i++) {
            this._sortInputs[i].val(sortType);
        }
        this._HideWaitIndicator();
    },

    RegisterSortInput: function (id) {
        this._sortInputs.push($("#" + id));
    },


    //=== Paging ===

    ShowNextPage: function () {
        if (this._page < this._totalPages) {
            this.GoToPage(this._page + 1)
        }
    },

    ShowPreviousPage: function () {
        if (this._page > 1) {
            this.GoToPage(this._page - 1)
        }
    },

    GoToPage: function (pageNumber) {
        this._ShowWaitIndicator();

        this._page = pageNumber;
        if (this.SaveStateEnabled == true) {
            this.AvailStateManager.SetPageNumber(pageNumber);
        }

        this._UpdateDisplayForPaging();
        this._UpdatePagingControls();
    },

    ChangePageSize: function (pageSize) {
        this._pageSize = pageSize;
        if (this.SaveStateEnabled == true) {
            this.AvailStateManager.SetPageSize(pageSize);
        }

        this._UpdateTotalPages();

        //Sync all inputs
        for (var i = 0; i < this._pageSizeInputs.length; i++) {
            this._pageSizeInputs[i].val(pageSize);
        }

        this.GoToPage(1);
    },

    ScrollToTile: function (tileId) {
        var currentObject = this;
        this.ClearAllFilters();
        setTimeout(function () {
            currentObject.GoToPage(currentObject._GetPageNumForTile(tileId));
            $('html, body').scrollTop($("#" + tileId).offset().top);
        }, 20);
    },

    _GetPageNumForTile: function (tileId) {
        var itemCurrentIndex = 0;
        for (var i = 0; i < this._availSet.Items.length; i++) {
            if (this._availSet.Items[i].TileId == tileId) {
                itemCurrentIndex = i;
                break;
            }
        }

        var pageNum = Math.floor(itemCurrentIndex / this._pageSize) + 1;
        return pageNum;
    },

    RegisterPageSizeInput: function (id) {
        this._pageSizeInputs.push($("#" + id));
    },

    RegisterPagingControl: function (control) {
        this._pagingControls.push(control);
    },

    //Update paging controls to show correct number of total items and currently showing items
    _UpdatePagingControls: function () {
        for (var i = 0; i < this._pagingControls.length; i++) {
            var pagingControl = this._pagingControls[i];
            var totalItems = this.ValidItemCount();
            var lastItemNum = this._pageEndIndex + 1;
            if (lastItemNum > totalItems) {
                lastItemNum = totalItems;
            }
            pagingControl.TotalItemsLabel.html(totalItems);
            pagingControl.ItemRangeLabel.html((this._pageStartIndex + 1) + "-" + lastItemNum);

            //Manage buttons
            if (pagingControl.PreviousButton.length > 0 && pagingControl.NextButton.length > 0) {

                //1. Re-enable
                if (lastItemNum != totalItems) {
                    pagingControl.NextButton.prop("disabled", false);
                    if (pagingControl.NextButtonTooltip.length > 0 && ($(window).width() > this._maxPhoneWidth && $(window).height() > this._maxPhoneWidth)) {
                        CreateTooltip(pagingControl.NextButton[0].id, pagingControl.NextButtonTooltip[0].id);
                    }
                }
                if (this._pageStartIndex != 0) {
                    pagingControl.PreviousButton.prop("disabled", false);
                    if (pagingControl.PreviousButtonTooltip.length > 0 && ($(window).width() > this._maxPhoneWidth && $(window).height() > this._maxPhoneWidth)) {
                        CreateTooltip(pagingControl.PreviousButton[0].id, pagingControl.PreviousButtonTooltip[0].id);
                    }
                }

                //2. Move focus
                if (lastItemNum == totalItems) {
                    if (pagingControl.NextButton.is(":focus")) {
                        pagingControl.PreviousButton.focus().focusout();    //focusout hides tooltip; can't manually close non-delegated tooltips.
                    }
                }
                if (this._pageStartIndex == 0) {
                    if (pagingControl.PreviousButton.is(":focus")) {
                        pagingControl.NextButton.focus().focusout();
                    }
                }

                //3. Disable
                if (lastItemNum == totalItems) {
                    pagingControl.NextButton.prop("disabled", true).mouseout();   //Mouseout hides tooltip on disabled element
                }
                if (this._pageStartIndex == 0) {
                    pagingControl.PreviousButton.prop("disabled", true).mouseout();
                }
            }
        }
    },

    //Show only valid avail tiles for current page
    _UpdateDisplayForPaging: function () {
        if (this._availSet.Items.length == 0) {
            return;
        }
        this._UpdateVisibleTiles();
        this._HideWaitIndicator();
    },

    _UpdateTotalPages: function () {
        this._totalPages = Math.ceil(this._availSet.ValidItems().length / this._pageSize);
    }
}

Avail.AvailDisplay.registerClass("Avail.AvailDisplay", null);

if (typeof (Sys) !== "undefined") Sys.Application.notifyScriptLoaded();
//END Trisept.UI.Web.Availability.AvailDisplay.js
//START Trisept.UI.Web.Availability.AvailDisplayConfig.js
Type.registerNamespace("Avail");

//Contains init/config data for an AvailDisplay
Avail.AvailDisplayConfig = function () {

    //Contains set of items correlating to displayed tiles
    this.AvailSet = null;

    //ID of element surrounding avail tiles
    this.TileContainerId = "";

    //ID of element so show when all items are filtered out
    this.NoResultsMessageId = "";

    //ID of element that holds current count of valid items
    this.ValidItemCountId = "";

    //ID of element to show as wait indicator
    this.WaitIndicatorId = "";

    //ID of element to show as filter callout
    this.FilterCalloutId = "";

    //Items shown per page by default
    this.DefaultPageSize = 10;

    //ID of element that marks top of an avail "page" (for anchoring)
    this.TopOfPageId = "";

    //ID of element price slider is attached to
    this.PriceSliderId = "";

    //Whether to update predictive filter counts while moving a slider handle (warning: more CPU intensive), or only after releasing it.
    this.UpdateWhileSliding = false;

    //ID of textbox used for name filtering
    this.NameInputId = "";

    //Distance units to use in calculations ("MI" or "KM")
    this.DistanceUnits = "MI";

    //Distance unit text for displayed values (e.g "miles")
    this.DistanceUnitText = "mi";

    //Currency code for prices
    this.CurrencyCode = "";

    //Currency symbol for prices
    this.CurrencySymbol = "";

    //DEPRECATED: IDs of filtering clear buttons.  Use ClearButtonId instead: one button is better for accessibility than two.
    this.EnabledClearButtonId = "";  //Shows when applicable
    this.DisabledClearButtonId = "";    //Shows when not applicable

    this.ClearButtonId = ""; //ID of single button that gets enabled/disabled

    //Whether to persist state across postbacks
    this.SaveState = false;
    this.StateCookieDomain = "";
}

Avail.AvailDisplayConfig.registerClass("Avail.AvailDisplayConfig", null);

// Notify ScriptManager that this is the end of the script.
if (typeof (Sys) !== "undefined") Sys.Application.notifyScriptLoaded();
//END Trisept.UI.Web.Availability.AvailDisplayConfig.js
//START Trisept.UI.Web.Availability.AvailSet.js
Type.registerNamespace("Avail");

Avail.AvailSet = function (items) {
    //NOTE: If adding properties, modify AvailDisplay._CloneAvailSet() accordingly
    this.Items = items;
}

Avail.AvailSet.prototype = {

    //=== General ===

    GetItemByTileId: function (tileId) {
        for (var i = 0; i < this.Items.length; i++) {
            var item = this.Items[i];
            if (item.TileId == tileId) {
                return item;
            }
        }
        return null;
    },


    //=== Filtering ===

    //Filter items for given prices
    FilterByPrice: function (lowPrice, highPrice) {
        for (var i = 0; i < this.Items.length; i++) {
            var item = this.Items[i];
            item.ValidForPrice = false;
            if (item.Price >= lowPrice && item.Price <= highPrice) {
                item.ValidForPrice = true;
            }
        }
    },

    //Filter items for given name text
    FilterByName: function (text) {
        if (text != null && text.length > 0) {
            for (var i = 0; i < this.Items.length; i++) {
                var item = this.Items[i];
                item.ValidForName = false;
                if (NormalizeDiacritics(item.Name.toUpperCase()).indexOf(NormalizeDiacritics(text.toUpperCase())) != -1) {
                    item.ValidForName = true;
                }
            }
        }
        else {
            //No text entered means all items are valid
            for (var i = 0; i < this.Items.length; i++) {
                this.Items[i].ValidForName = true;
            }
        }
    },

    //Get items currently valid for applied filters
    ValidItems: function () {
        var validItems = [];
        for (var i = 0; i < this.Items.length; i++) {
            var item = this.Items[i];
            if (item.IsValid() == true) {
                validItems.push(item);
            }
        }
        return validItems;
    },

    //Get number of items currently valid for applied filters
    ValidItemCount: function () {
        var count = 0;
        for (var i = 0; i < this.Items.length; i++) {
            if (this.Items[i].IsValid() == true) {
                count++;
            }
        }
        return count;
    },

    //Get lowest price of any currently valid item for applied filters
    LowestValidItemPrice: function () {
        var lowPrice = -1;
        for (var i = 0; i < this.Items.length; i++) {
            if (this.Items[i].IsValid() == true) {
                if (lowPrice == -1 || this.Items[i].Price < lowPrice) {
                    lowPrice = this.Items[i].Price;
                }
            }
        }
        return lowPrice;
    },

    //'Overridable' - Whether any of this avail set's filter options are being used
    AnyFilterOptionsActive: function () {
        //Check base-level filter options here.  Price not handled here because there aren't predefined 'options'.
    },

    //'Overridable' - Whether any of this avail set's main-specific (i.e. gutter-specific) filter options are being used
    AnyMainFilterOptionsActive: function () {
        //Check base-level filter options here.  Price not handled here because there aren't predefined 'options'.
    },

    //Lowest price of currently valid items, ignoring price filter
    LowestValidPriceIgnoringPrice: function () {
        var lowPrice = -1;
        for (var i = 0; i < this.Items.length; i++) {
            var item = this.Items[i];
            if (item.IsValidIgnoringPrice() == true && (lowPrice == -1 || item.Price < lowPrice)) {
                lowPrice = item.Price;
            }
        }
        return lowPrice;
    },

    //Highest price of currently valid items, ignoring price filter
    HighestValidPriceIgnoringPrice: function () {
        var highPrice = -1;
        for (var i = 0; i < this.Items.length; i++) {
            var item = this.Items[i];
            if (item.IsValidIgnoringPrice() == true && (highPrice == -1 || item.Price > highPrice)) {
                highPrice = item.Price;
            };
        }
        return highPrice;
    },

    //Reset all filters to default state
    ClearAllFilters: function () {
        for (var i = 0; i < this.Items.length; i++) {
            var item = this.Items[i];
            item.ResetAllFilterFlags();
        }

        this._ResetAllFilterOptions();
    },

    //'Overridable' - Reset all filter options to initial state
    _ResetAllFilterOptions: function () {
        //Reset base-level filter options here.  Price and name not handled here because there aren't predefined 'options'.
    },

    //'Overridable' - Reset specified filter options to initial state
    _ResetSpecifiedFilterOptions: function () {
        //Reset base-level filter options here if specified.  Price and name not handled here because there aren't predefined 'options'.
    }

}

Avail.AvailSet.registerClass("Avail.AvailSet", null);

if (typeof(Sys) !== "undefined") Sys.Application.notifyScriptLoaded();
//END Trisept.UI.Web.Availability.AvailSet.js
//START Trisept.UI.Web.Availability.FilterCalloutState.js
Type.registerNamespace("Avail");

//Manages filter callout state
Avail.FilterCalloutState = function () {
    this._expirationDays = 30;  //Number of days before callout shows again
    this._lastHiddenKey = "availFilterCalloutLastHidden";
}

Avail.FilterCalloutState.prototype = {

    //Returns date callout was last hidden (or null)
    GetFilterCalloutLastHidden: function () {
        try {
            if (!localStorage.getItem(this._lastHiddenKey)) {
                return null;
            }
            else {
                return localStorage.getItem(this._lastHiddenKey);
            }
        }
        catch (e) {
            return null; //If localStorage is not supported (e.g. Safari in Private mode)
        }
    },

    //Sets date callout was last hidden to now
    UpdateFilterCalloutLastHidden: function () {
        try {
            localStorage.setItem(this._lastHiddenKey, new Date());
        }
        catch (e) {
            //Safari throws error in private mode; ignore
        }
    },

    //Clears date callout was last hidden
    ClearFilterCalloutLastHidden: function () {
        try {
            localStorage.removeItem(this._lastHiddenKey);
        }
        catch (e) {
            //Safari throws error in private mode; ignore
        }
    },

    //Whether callout has expired and needs to be hidden again
    IsFilterCalloutExpired: function () {
        if (this.GetFilterCalloutLastHidden() == null) {
            return false;
        }

        var timePassedMs = new Date().getTime() - Date.parse(this.GetFilterCalloutLastHidden());
        var expirationTimeMs = this._expirationDays * 24 * 60 * 60 * 1000;
        if (timePassedMs > expirationTimeMs) {
            return true;
        }
        else {
            return false;
        }
    }
}
Avail.FilterCalloutState.registerClass("Avail.FilterCalloutState", null);

if (typeof(Sys) !== "undefined") Sys.Application.notifyScriptLoaded();
//END Trisept.UI.Web.Availability.FilterCalloutState.js
//START Trisept.UI.Web.Availability.Item.js
Type.registerNamespace("Avail");

Avail.Item = function (tileId, sequence, itemId, price, name, preferredRanking) {

    this.TileId = tileId;   //Client ID of corresponding tile
    this.Sequence = sequence;   //Index number (should be unique and sequential within item set)
    this.ItemId = itemId;       //ID of item for selection (first/main room for hotels)
    this.Price = price;
    this.Name = name;   //Name of item (could be blank if unused for a component)
    this.PreferredRanking = preferredRanking;   //Priority number

    this.Tile = $("#" + this.TileId);

    //Filter variables.  If adding one, modify IsValid(), ResetAllFilterFlags(), ResetSpecifiedFilterFlags() and IsValidIgnoringPrice() accordingly.
    this.ValidForPrice = true;
    this.ValidForName = true;

    this.IsSelected = false;
}

Avail.Item.prototype = {

    //Whether item is valid for current filters.
    IsValid: function () {
        if (this.ValidForPrice == true && this.ValidForName == true) {
            return true;
        }
        else {
            return false;
        }
    },

    //Whether item is valid for current filters, except ignoring price
    IsValidIgnoringPrice: function () {
        //If other base filters (besides price) are added, check them here, too
        if (this.ValidForName == true && this._IsValidForSpecificFilters() == true) {
            return true;
        }
        else {
            return false;
        }
    },

    //'Abstract' method that determines if item is valid for current filters that are specific to the child class
    _IsValidForSpecificFilters: function () {
        throw Error('Unimplemented abstract method: Item._IsValidForSpecificFilters()');
    },

    //Reset all filter flags to initial state
    ResetAllFilterFlags: function () {
        this.ValidForPrice = true;
        this.ValidForName = true;
    },

    //Reset specified filter flags to initial state
    ResetSpecifiedFilterFlags: function (resetPrice, resetName) {
        if (resetPrice == true) {
            this.ValidForPrice = true;
        }
        if (resetName == true) {
            this.ValidForName = true;
        }
    },

    //Mark item's tile as selected or not selected
    SetSelected: function (isSelected) {
        if (isSelected == true) {
            this.IsSelected = true;
            this.Tile.addClass(AvailabilityScriptStrings.SelectedCssClass);
        } else {
            this.IsSelected = false;
            this.Tile.removeClass(AvailabilityScriptStrings.SelectedCssClass);
        }
    },

    PricePerPersonFormatted: function () {
        //Only used during call to UpdateRoomSelected(), which seems obsolete because selecting a room now redirects.  Return 0 to avoid error; for now there is no price-per-person logic needed.
        return 0;
    }

}

Avail.Item.registerClass("Avail.Item", null);

if (typeof(Sys) !== "undefined") Sys.Application.notifyScriptLoaded();
//END Trisept.UI.Web.Availability.Item.js
//START Trisept.UI.Web.Availability.FilterOptionCollection.js
Type.registerNamespace("Avail");

Avail.FilterOptionCollection = function (config) {
    this.FilterOptions = config.FilterOptions;

    //Initialize associated DOM objects for each option
    for (var i = 0; i < this.FilterOptions.length; i++) {
        var option = this.FilterOptions[i];
        option.Input = $("#" + config.InputIdPrefix + option.OptionId);
        option.PredictiveCountArea = $("#" + config.PredictiveCountAreaIdPrefix + option.OptionId);
        option.PredictiveCountLabel = $("#" + config.PredictiveCountLabelIdPrefix + option.OptionId);
        option.PredictiveLowPriceLabel = $("#" + config.PredictiveLowPriceLabelIdPrefix + option.OptionId);
    }

    this.AllMustMatch = config.AllMustMatch;
    this.SingularCountTemplate = config.SingularCountTemplate;
    this.PluralCountTemplate = config.PluralCountTemplate;

    //Create dictionary of names by optionId
    this.Names = {};
    for (var i = 0; i < this.FilterOptions.length; i++) {
        var filterOption = this.FilterOptions[i];
        this.Names[filterOption.OptionId] = filterOption.Name;
    }
}

Avail.FilterOptionCollection.prototype = {

    GetSelected: function () {
        var result = [];
        for (var i = 0; i < this.FilterOptions.length; i++) {
            var option = this.FilterOptions[i];
            if (option.Selected == true) {
                result.push(option);
            }
        }
        return result;
    },

    GetOptionById: function (optionId) {
        for (var i = 0; i < this.FilterOptions.length; i++) {
            var option = this.FilterOptions[i];
            if (option.OptionId == optionId) {
                return option;
            }
        }
        return null;
    },

    //Get name by option ID
    GetOptionName: function (optionId) {
        if (this.Names[optionId] != undefined && this.Names[optionId] != "") {
            return this.Names[optionId];
        }
        else {
            return "";
        }
    },

    UpdatePredictiveCountLabels: function () {
        var anyOptionsSelected = this.GetSelected().length > 0;

        for (var i = 0; i < this.FilterOptions.length; i++) {
            var option = this.FilterOptions[i];
            var countText = "";

            //Use "+n" format for "OR"-type groups with an option selected
            if (anyOptionsSelected && this.AllMustMatch == false) {
                if (option.PredictiveCount == 0) {
                    countText = "+" + option.PredictiveCount;
                }
                else {
                    countText = "+" + option.PredictiveCountDifference;
                }
            }
            else {
                countText = option.PredictiveCount;
            }

            //Update label using correct template if needed
            if (option.PredictiveCount == 1 && this.SingularCountTemplate != null && this.SingularCountTemplate != "") {
                option.UpdatePredictiveCountLabel(countText, this.SingularCountTemplate);
            }
            else if (option.PredictiveCount > 1 && this.PluralCountTemplate != null && this.PluralCountTemplate != "") {
                option.UpdatePredictiveCountLabel(countText, this.PluralCountTemplate);
            }
            else {
                option.UpdatePredictiveCountLabel(countText, null);
            }

            //Disable irrelevant options
            if (option.PredictiveCount == 0) {
                this.DisableInputDueToPrediction(option);
            }
            else {
                this.EnableInputDueToPrediction(option);
            }

        }
    },

    UpdatePredictiveLowPriceLabels: function (currencyCode, currencySymbol) {
        for (var i = 0; i < this.FilterOptions.length; i++) {
            var option = this.FilterOptions[i];
            if (option.LowestPrice > -1) {
                option.UpdatePredictiveLowPriceLabel(option.LowestPrice, currencyCode, currencySymbol);
            }
        }
    },

    //'Overridable'
    DisableInputDueToPrediction: function (option) {
        option.DisableInput();
    },

    //'Overridable'
    EnableInputDueToPrediction: function (option) {
        option.EnableInput();
    },

    //Unselect all options and their inputs
    ClearSelections: function () {
        for (var i = 0; i < this.FilterOptions.length; i++) {
            var option = this.FilterOptions[i];
            if (option.Selected == true) {
                option.ToggleSelected();
                option.ToggleInput();
            }
        }
    }

}

Avail.FilterOptionCollection.registerClass("Avail.FilterOptionCollection", null);

if (typeof(Sys) !== "undefined") Sys.Application.notifyScriptLoaded();
//END Trisept.UI.Web.Availability.FilterOptionCollection.js
//START Trisept.UI.Web.Availability.FilterOptionCollectionConfig.js
Type.registerNamespace("Avail");

//Contains init/config data for a FilterOptionCollection
Avail.FilterOptionCollectionConfig = function () {

    this.FilterOptions = null;
    this.InputIdPrefix = "";
    this.PredictiveCountAreaIdPrefix = "";
    this.PredictiveCountLabelIdPrefix = "";
    this.PredictiveLowPriceLabelIdPrefix = "";

    //Use false for "OR"-type groups, where any selected option just needs to match.  Use true for "AND"-type groups where all selected options must match
    this.AllMustMatch = false;

    //Label template when count is 1 (e.g. "{count} option")
    this.SingularCountTemplate = "";

    //Label template when count is more than 1 (e.g. "{count} options")
    this.PluralCountTemplate = "";
}

Avail.FilterOptionCollectionConfig.registerClass("Avail.FilterOptionCollectionConfig", null);

// Notify ScriptManager that this is the end of the script.
if (typeof (Sys) !== "undefined") Sys.Application.notifyScriptLoaded();
//END Trisept.UI.Web.Availability.FilterOptionCollectionConfig.js
//START Trisept.UI.Web.Availability.FilterOption.js
Type.registerNamespace("Avail");

Avail.FilterOption = function (optionId, name, selectedByDefault) {
    this.OptionId = optionId;   //Unique ID for filter option (e.g. incremental number, airline code).  Used for specifying filters and as suffix on related elements.
    this.Name = name;   //Name of filter option.  Not required, but useful for sorting (e.g. by airline name).
    this.Selected = selectedByDefault;

    this.PredictiveCount = 0;   //Number of total valid items if this option was toggled
    this.PredictiveCountDifference = 0; //Difference in number of total valid items if this option was toggled

    this.LowestPrice = -1;  //Lowest price of valid items if this option was toggled

    this.Input = null;
    this.PredictiveCountLabel = null;
    this.PredictiveCountArea = null;
    this.PredictiveLowPriceLabel = null;
}

Avail.FilterOption.prototype = {

    //Toggle whether filter option is selected for this avail set
    ToggleSelected: function () {
        if (this.Selected == false) {
            this.Selected = true;
        }
        else {
            this.Selected = false;
        }
    },

    //Set whether filter option is selected for this avail set
    SetSelected: function (isSelected) {
        this.Selected = isSelected;
    },

    //"Overridable" - When applicable, flip state of input (e.g. check/uncheck checkbox) without triggering OnClick event
    ToggleInput: function () {

    },

    //"Overridable" - Make the filter option read-only
    DisableInput: function () {

    },

    //"Overridable" - Make the filter option editable
    EnableInput: function () {

    },

    UpdatePredictiveCountLabel: function (countText, countTemplate) {
        if (this.PredictiveCountLabel.length > 0) {

            var finalText = countText;
            if (countTemplate != null && countTemplate != "") {
                finalText = countTemplate.replace("{count}", countText);
            }
            this.PredictiveCountLabel.html(finalText);

            //Hide count for selected options
            if (this.Selected == true) {
                this.PredictiveCountArea.hide();
            }
            else {
                this.PredictiveCountArea.show();
            }
        }
    },

    UpdatePredictiveLowPriceLabel: function (lowPrice, currencyCode, currencySymbol) {
        if (this.PredictiveLowPriceLabel.length > 0) {
            this.PredictiveLowPriceLabel.html(currencySymbol + $.number(Math.ceil(lowPrice), 0, '.', ','));   //Skip currency code; always round up; format
        }
    }

}

Avail.FilterOption.registerClass("Avail.FilterOption", null);

if (typeof(Sys) !== "undefined") Sys.Application.notifyScriptLoaded();
//END Trisept.UI.Web.Availability.FilterOption.js
//START Trisept.UI.Web.Availability.CheckboxFilterOption.js
Type.registerNamespace("Avail");

//Represents a filter option attached to a checkbox control
Avail.CheckboxFilterOption = function (optionId, name, selectedByDefault) {
    Avail.CheckboxFilterOption.initializeBase(this, [optionId, name, selectedByDefault]);
}

Avail.CheckboxFilterOption.prototype = {

    //Overrides - Check/uncheck checkbox (does not trigger OnClick)
    ToggleInput: function () {
        if (this.Input.length > 0) {
            if (this.Input.is(":checked")) {
                this.Input.prop('checked', false);
            }
            else {
                this.Input.prop('checked', true);
            }
        }
    },

    //Overrides - Make the checkbox read-only
    DisableInput: function () {
        if (this.Input.length > 0) {
            $("label[for='" + this.Input[0].id + "']").addClass("disabledFilterOption");
            this.Input.prop('disabled', true);
        }
    },

    //Overrides - Make the checkbox editable
    EnableInput: function () {
        if (this.Input.length > 0) {
            $("label[for='" + this.Input[0].id + "']").removeClass("disabledFilterOption");
            this.Input.prop('disabled', false);
        }
    }
}

Avail.CheckboxFilterOption.registerClass("Avail.CheckboxFilterOption", Avail.FilterOption, Sys.IDisposable);

// Notify ScriptManager that this is the end of the script.
if (typeof (Sys) !== "undefined") Sys.Application.notifyScriptLoaded();
//END Trisept.UI.Web.Availability.CheckboxFilterOption.js
//START Trisept.UI.Web.Availability.PagingControl.js
Type.registerNamespace("Avail");

//Contains references to a set of paging label elements
Avail.PagingControl = function (totalItemsLabelId, itemRangeLabelId, previousButtonId, nextButtonId, previousButtonTooltipId, nextButtonTooltipId) {
    this.TotalItemsLabel = $("#" + totalItemsLabelId);
    this.ItemRangeLabel = $("#" + itemRangeLabelId);
    this.PreviousButton = $("#" + previousButtonId);
    this.NextButton = $("#" + nextButtonId);
    this.PreviousButtonTooltip = $("#" + previousButtonTooltipId);
    this.NextButtonTooltip = $("#" + nextButtonTooltipId);
}

Avail.PagingControl.registerClass("Avail.PagingControl", null);

if (typeof(Sys) !== "undefined") Sys.Application.notifyScriptLoaded();
//END Trisept.UI.Web.Availability.PagingControl.js
//START Trisept.UI.Web.Availability.availability2.js
Type.registerNamespace("Avail");

Avail.SelectItemByIdForEmail = function (ctype, id, itin, c, usageDate) {
    var action, url, featurePrice;
    if (c.checked == true) { action = "ADD"; } else { action = "REMOVE"; }
    var dt = new Date();
    var time = new Date().getTime();
    if (ctype == "F") {
        url = "RecommendedComponentsHandler.ashx?itin=" + itin + "&id=" + id + "&ctype=" + ctype + "&act=" + action + "&usageDate=" + usageDate + "&t=" + dt + " " + time;
    }
    else {
        url = "RecommendedComponentsHandler.ashx?itin=" + itin + "&id=" + id + "&ctype=" + ctype + "&act=" + action + "&t=" + dt + " " + time;
    }
    if (window.XMLHttpRequest) {
        xmlhttp = new XMLHttpRequest();
    } else {
        xmlhttp = new ActiveXObject("Microsoft.XMLHTTP");
    }

    xmlhttp.onreadystatechange = function () {
        if (xmlhttp.readyState == 4) {
            if (xmlhttp.responseText != '') {
                alert(xmlhttp.responseText);
                c.checked = false;
            }
        }
    }
    xmlhttp.open("GET", url, true);
    xmlhttp.send();
}

Avail.UpdateAvailabilityScriptStringsPrices = function (arg) {
    AvailabilityScriptStrings.TotalPrice = arg.T;
    AvailabilityScriptStrings.BundledPrice = arg.B;
    AvailabilityScriptStrings.ModifiablesPrice = arg.M;
}

    //Update price for items in avail display from asmx service response
Avail.UpdateAvailDisplayPrices = function (arg) {
        var modPrice = (AvailabilityScriptStrings.ModifiablesInPrice ? 0.0 : arg.M);
        var priceDiff = arg.T - AvailabilityScriptStrings.TotalPrice - modPrice;
        if (priceDiff != 0) {
            var arr = availDisplay.Items();
            for (var x = 0; x < arr.length; x++) {
                if (typeof (useLoyaltyPoints) == 'undefined' || useLoyaltyPoints == null || useLoyaltyPoints == false) {
                    arr[x].Price = (arr[x].Price + priceDiff);
                }
            }
        }
 }

if (typeof(Sys) !== "undefined") Sys.Application.notifyScriptLoaded();
//END Trisept.UI.Web.Availability.availability2.js
//START Trisept.UI.Web.Availability.AvailStateManager.js
Type.registerNamespace("Avail");

//Manages all user page state data (serialized data classes can't have methods)
Avail.AvailStateManager = function (cookieDomain) {
    this._availStateStoreKey = "AvailState";
    this._availStateCookieKey = "AvailStateCreated";
    this._cookieDomain = cookieDomain;

    this._currentItinSequence = this._GetItinSequence();
    this._currentStopNum = this._GetStopNumber();

    this.AvailState;
    this._initializeAvailState();

    this.CurrentItin;

    //Quick references to current data
    if (this._currentItinSequence != undefined) {
        this.CurrentItin = this.GetItin(this._currentItinSequence);

        if (this._currentStopNum == undefined) {
            this._currentStopNum = 1;
        }
    }
}

Avail.AvailStateManager.prototype = {

    _initializeAvailState: function () {

        //Remove last session's localStorage if session cookie gone.  Can't use sessionStorage because it's per tab.
        if (Cookies.get(this._availStateCookieKey) == undefined) {
            localStorage.removeItem(this._availStateStoreKey);
            Cookies.set(this._availStateCookieKey, "true", { path: '/', domain: this._cookieDomain });
        }

        //Recreate from saved state or create new
        var savedState = this._GetSavedState();
        if (savedState != null) {
            this.AvailState = savedState;
        }
        else {
            this.AvailState = new Avail.AvailState();
            this.SaveState();
        }
    },

    _GetItinSequence: function () {
        var result = null;
        var itinParam = GetQueryStringParam("itin");
        if (itinParam != null) {
            var itinInt = parseInt(itinParam);
            if (itinInt != NaN) {
                result = itinInt;
            }
        }
        return result;
    },

    _GetStopNumber: function () {
        var result = null;
        var stopParam = GetQueryStringParam("stop");
        if (stopParam != null) {
            var stopInt = parseInt(stopParam);
            if (stopInt != NaN) {
                result = stopInt;
            }
        }
        return result;
    },

    _GetSavedState: function () {
        try {
            return $.parseJSON(localStorage.getItem(this._availStateStoreKey));
        }
        catch (e) {
            return null;
        }
    },

    SaveState: function () {
        try {
            localStorage.setItem(this._availStateStoreKey, JSON.stringify(this.AvailState));
        }
        catch (e) {

        }
    },

    //Get state for specified itin.  Saves a new blank state if one doesn't exist.
    GetItin: function (itinSeq) {
        var itins = this.AvailState.Itins;
        for (var i = 0; i < itins.length; i++) {
            if (itins[i].ItinSeq == itinSeq) {
                return itins[i];    //Existing
            }
        }

        //Create and retry
        this.AvailState.Itins.push(new Avail.ItinState(itinSeq));
        this.SaveState();
        return this.GetItin(itinSeq);
    },

    //'Must Override' - Get paging state for current stop/category.  Child classes need to pull from appropriate collection
    GetPagingState: function () {

    },

    //'Must Override' - Get sorting state for current stop/category.  Child classes need to pull from appropriate collection
    GetSortingState: function () {

    },

    ToggleMultiSelection: function (multiSelection, id) {
        try {
            var existingItem = null;
            for (var i = 0; i < multiSelection.States.length; i++) {
                if (multiSelection.States[i].Id == id) {
                    existingItem = multiSelection.States[i];
                    break;
                }
            }

            if (existingItem == null) {
                var newItem = new Avail.ToggleableFilterState(id, true);
                multiSelection.States.push(newItem);
            }
            else {
                existingItem.Selected = !existingItem.Selected;
            }
        }
        catch (e) {
            //In case property is new since session started
        }
    },

    _ClearStopFilters: function (stopFilters) {
        stopFilters.Name = "";
        stopFilters.Price.Low = -1;
        stopFilters.Price.High = -1;
    },

    GetPageNumber: function () {
        return this.GetPagingState().Page;
    },

    SetPageNumber: function (pageNum) {
        this.GetPagingState().Page = pageNum;
        this.SaveState();
    },

    GetPageSize: function () {
        return this.GetPagingState().PageSize;
    },

    SetPageSize: function (pageSize) {
        this.GetPagingState().PageSize = pageSize;
        this.SaveState();
    },

    GetSort: function () {
        return this.GetSortingState().Sort;
    },

    SetSort: function (sortType) {
        this.GetSortingState().Sort = sortType;
        this.SaveState();
    }

}
Avail.AvailStateManager.registerClass("Avail.AvailStateManager", null);

if (typeof (Sys) !== "undefined") Sys.Application.notifyScriptLoaded();
//END Trisept.UI.Web.Availability.AvailStateManager.js
//START Trisept.UI.Web.Availability.AvailState.js
Type.registerNamespace("Avail");

Avail.AvailState = function () {
    this.Itins = [];
}
Avail.AvailState.registerClass("Avail.AvailState", null);

if (typeof (Sys) !== "undefined") Sys.Application.notifyScriptLoaded();
//END Trisept.UI.Web.Availability.AvailState.js
//START Trisept.UI.Web.Availability.ItinState.js
Type.registerNamespace("Avail");

Avail.ItinState = function (itinSeq, savedItinState) {
    this.ItinSeq = itinSeq;
    this.AirLegs = [];
    this.HotelStops = [];
    this.FeatureStops = [];
    this.VehicleStops = [];
}
Avail.ItinState.registerClass("Avail.ItinState", null);

if (typeof (Sys) !== "undefined") Sys.Application.notifyScriptLoaded();
//END Trisept.UI.Web.Availability.ItinState.js
//START Trisept.UI.Web.Availability.StopState.js
Type.registerNamespace("Avail");

Avail.StopState = function (stopNumber) {
    this.StopNumber = stopNumber; 
}
Avail.StopState.registerClass("Avail.StopState", null);

if (typeof (Sys) !== "undefined") Sys.Application.notifyScriptLoaded();
//END Trisept.UI.Web.Availability.StopState.js
//START Trisept.UI.Web.Availability.SortingState.js
Type.registerNamespace("Avail");

Avail.SortingState = function () {
    this.Sort = "";
}
Avail.SortingState.registerClass("Avail.SortingState", null);

if (typeof (Sys) !== "undefined") Sys.Application.notifyScriptLoaded();
//END Trisept.UI.Web.Availability.SortingState.js
//START Trisept.UI.Web.Availability.PagingState.js
Type.registerNamespace("Avail");

Avail.PagingState = function () {
    this.Page = -1;
    this.PageSize = -1;
}
Avail.PagingState.registerClass("Avail.PagingState", null);

if (typeof (Sys) !== "undefined") Sys.Application.notifyScriptLoaded();
//END Trisept.UI.Web.Availability.PagingState.js
//START Trisept.UI.Web.Availability.StopFiltersState.js
Type.registerNamespace("Avail");

Avail.StopFiltersState = function () {
    this.Name = "";
    this.Price = new Avail.RangeFilterState();
}
Avail.StopFiltersState.registerClass("Avail.StopFiltersState", null);

if (typeof (Sys) !== "undefined") Sys.Application.notifyScriptLoaded();
//END Trisept.UI.Web.Availability.StopFiltersState.js
//START Trisept.UI.Web.Availability.FilterState.js
Type.registerNamespace("Avail");

Avail.FilterState = function (startsOpen) {
    if (startsOpen != false) {
        startsOpen == true;
    }

    this.Open = startsOpen;
}
Avail.FilterState.registerClass("Avail.FilterState", null);

if (typeof (Sys) !== "undefined") Sys.Application.notifyScriptLoaded();
//END Trisept.UI.Web.Availability.FilterState.js
//START Trisept.UI.Web.Availability.ToggleableFilterState.js
Type.registerNamespace("Avail");

Avail.ToggleableFilterState = function (id, selected) {
    this.Id = id;
    this.Selected = selected;
}
Avail.ToggleableFilterState.registerClass("Avail.ToggleableFilterState", null);

if (typeof (Sys) !== "undefined") Sys.Application.notifyScriptLoaded();
//END Trisept.UI.Web.Availability.ToggleableFilterState.js
//START Trisept.UI.Web.Availability.RangeFilterState.js
Type.registerNamespace("Avail");

Avail.RangeFilterState = function () {
    Avail.RangeFilterState.initializeBase(this);

    this.Low = -1;
    this.High = -1;
}
Avail.RangeFilterState.registerClass("Avail.RangeFilterState", Avail.FilterState, Sys.IDisposable);

if (typeof (Sys) !== "undefined") Sys.Application.notifyScriptLoaded();
//END Trisept.UI.Web.Availability.RangeFilterState.js
//START Trisept.UI.Web.Availability.MultiSelectFilterState.js
Type.registerNamespace("Avail");

Avail.MultiSelectFilterState = function (startsOpen) {
    Avail.MultiSelectFilterState.initializeBase(this, [startsOpen]);

    this.States = [];
}
Avail.MultiSelectFilterState.registerClass("Avail.MultiSelectFilterState", Avail.FilterState, Sys.IDisposable);

if (typeof (Sys) !== "undefined") Sys.Application.notifyScriptLoaded();
//END Trisept.UI.Web.Availability.MultiSelectFilterState.js
//START Trisept.UI.Web.Availability.AirAvailDisplay.js
Type.registerNamespace("Avail");

Avail.AirAvailDisplay = function (airAvailDisplayConfig) {
    Avail.AirAvailDisplay.initializeBase(this, [airAvailDisplayConfig]);

    this._flightNumberInput = $("#" + airAvailDisplayConfig.FlightNumberInputId);
    this._basicEconomyShowInput = $("#" + airAvailDisplayConfig.BasicEconomyShowInputId);
    this._basicEconomyHideInput = $("#" + airAvailDisplayConfig.BasicEconomyHideInputId);
    this._showBasicEconPrefPrompt = airAvailDisplayConfig.ShowBasicEconPrefPrompt;
    this._preFilterBasicEconomy = airAvailDisplayConfig.PreFilterBasicEconomy;

    //Clear buttons for "main" filters (e.g. ones in gutter, not matrix)
    this._enabledMainClearButton = $("#" + airAvailDisplayConfig.EnabledMainClearButtonId); //DEPRECATED: Use _mainClearButton instead
    this._disabledMainClearButton = $("#" + airAvailDisplayConfig.DisabledMainClearButtonId);   //DEPRECATED: Use _mainClearButton instead
    this._mainClearButton = $("#" + availDisplayConfig.MainClearButtonId);

    //Clear buttons for matrix-specific filters
    this._enabledMatrixClearButton = $("#" + airAvailDisplayConfig.EnabledMatrixClearButtonId); //DEPRECATED: Use _matrixClearButton instead
    this._disabledMatrixClearButton = $("#" + airAvailDisplayConfig.DisabledMatrixClearButtonId);   //DEPRECATED: Use _matrixClearButton instead
    this._matrixClearButton = $("#" + availDisplayConfig.MatrixClearButtonId);

    //Matrix elements
    this._matrixContainer = $("#" + airAvailDisplayConfig.MatrixContainerId);
    this._matrixTableId = airAvailDisplayConfig.MatrixTableId;
    this._matrixTable = $("#" + airAvailDisplayConfig.MatrixTableId);
    this._matrixCellIdPrefix = airAvailDisplayConfig.MatrixCellIdPrefix;
    this._matrixSelectedCssClass = airAvailDisplayConfig.MatrixSelectedCssClass;
    this._matrixHoverCssClass = availDisplayConfig.MatrixHoverCssClass;
    this._matrixColumnHeaderCssClass = availDisplayConfig.MatrixColumnHeaderCssClass;
    this._matrixRowHeaderCssClass = availDisplayConfig.MatrixRowHeaderCssClass;
    this._matrixScrollRightTrigger = $("#" + airAvailDisplayConfig.MatrixScrollRightId);
    this._matrixScrollLeftTrigger = $("#" + airAvailDisplayConfig.MatrixScrollLeftId);

    this._matrixScrollPos = 0;

    //Shop-by-trip section elements
    this._showOutboundArrivalTrigger = $("#" + airAvailDisplayConfig.ShowOutboundArrivalId);
    this._hideOutboundArrivalTrigger = $("#" + airAvailDisplayConfig.HideOutboundArrivalId);
    this._outboundArrivalArea = $("#" + airAvailDisplayConfig.OutboundArrivalAreaId);
    this._showInboundArrivalTrigger = $("#" + airAvailDisplayConfig.ShowInboundArrivalId);
    this._hideInboundArrivalTrigger = $("#" + airAvailDisplayConfig.HideInboundArrivalId);
    this._inboundArrivalArea = $("#" + airAvailDisplayConfig.InboundArrivalAreaId);

	this._noResultsResetFiltersMessageElement = $("#" + availDisplayConfig.NoResultsResetFiltersMessageId);
	this._noResultsResetFiltersButtonElement = $("#" + availDisplayConfig.NoResultsResetFiltersButtonId);
	this._noResultsClearBEMessageElement = $("#" + availDisplayConfig.NoResultsClearBEMessageId);
	this._noResultsClearBEButtonElement = $("#" + availDisplayConfig.NoResultsClearBEButtonId);

    if (this.SaveStateEnabled == true) {
        this.AvailStateManager = new Avail.AirAvailStateManager(airAvailDisplayConfig.StateCookieDomain, airAvailDisplayConfig.StopsPanelStartsOpen, airAvailDisplayConfig.CarrierPanelStartsOpen, airAvailDisplayConfig.TimePanelStartsOpen, airAvailDisplayConfig.OutArrStartsOpen, airAvailDisplayConfig.InArrStartsOpen, airAvailDisplayConfig.PreFilterBasicEconomy);
    }
}

Avail.AirAvailDisplay.prototype = {

    //=== General ===

    //Show/hide air-specific sub-items
    _UpdateVisibleTileSubItems: function () {
        Avail.AvailDisplay.prototype._UpdateVisibleTileSubItems.call(this);

        for (var i = 0; i < this._availSet.Items.length; i++) {
            var item = this._availSet.Items[i];

            for (var j = 0; j < item.FareOptions.length; j++) {
                var fareOption = item.FareOptions[j];

                if (fareOption.ValidForBasicEconomy == true) {
                    fareOption.Element.show();
                }
                else {
                    fareOption.Element.hide();
                }
            }
        }
    },

    ShowPreFilterBasicEconomyPrefPrompt: function (isFiltered) {
        if (this._showBasicEconPrefPrompt == true && isFiltered == true) {
            showModal('', 'modalPopup', 3, -1, WebForm_GetScrollY() + 20, this._availDisplayConfig.BasicEconPrefPromptUrl, 500, 500, '', '', '', false, 'CloseBasicEconPrefPromptModal');
        }
    },

    //=== Filtering ===

    FilterByFlightNumber: function (number) {
        this._ShowWaitIndicator();

        var currentObject = this;
        setTimeout(function () {
            currentObject._availSet.FilterByFlightNumber(number);
            currentObject._UpdateDisplayForFiltering(true, false);

            if (currentObject.SaveStateEnabled == true) {
                currentObject.AvailStateManager.SetFlightNumberFilter(number);
            }
        }, currentObject.waitIndicatorTimeoutDuration);
    },

    //Updates filtering by number of stops w/o clearing any filters (allows multiple selections)
    ToggleStopsFilterOption: function (optionId) {
        this._ShowWaitIndicator();

        var currentObject = this;
        setTimeout(function () {
            currentObject._availSet.ToggleStopsFilterOption(optionId);
            currentObject._UpdateDisplayForFiltering(true, false);

            if (currentObject.SaveStateEnabled == true) {
                currentObject.AvailStateManager.ToggleAirStopsFilterOption(optionId);
            }
        }, currentObject.waitIndicatorTimeoutDuration);
    },

    InitializeStopsFilterOption: function (optionId, isSelected) {
        this._ShowWaitIndicator();

        var currentObject = this;
        setTimeout(function () {
            currentObject._availSet.SetStopsFilterOption(optionId, isSelected);
            currentObject._UpdateDisplayForFiltering(true, false);
        }, currentObject.waitIndicatorTimeoutDuration);
    },

    PredictToggleStopsFilterOptionCount: function (optionId) {
        this._CloneAvailSet();
        this._tempAvailSet.ToggleStopsFilterOption(optionId);
        var count = this._tempAvailSet.ValidItemCount();    //Base number of valid items if this option was toggled

        //'OR'-type: Must be at least one valid item actually matching this option
        if (count > 0 && this._tempAvailSet.StopsOptionCollection.GetOptionById(optionId).Selected == true) {
            if (this._tempAvailSet.HasValidItemsForStops(optionId) == false) {
                count = 0;
            }
        }

        return count;
    },

    //Updates filtering by carrier w/o clearing any filters (allows multiple selections)
    ToggleCarrierFilterOption: function (optionId) {
        this._ShowWaitIndicator();

        var currentObject = this;
        setTimeout(function () {
            currentObject._availSet.ToggleCarrierFilterOption(optionId);
            currentObject._UpdateDisplayForFiltering(true, false);

            if (currentObject.SaveStateEnabled == true) {
                currentObject.AvailStateManager.ToggleAirCarrierFilterOption(optionId);
            }
        }, currentObject.waitIndicatorTimeoutDuration);
    },

    InitializeCarrierFilterOption: function (optionId, isSelected) {
        this._ShowWaitIndicator();

        var currentObject = this;
        setTimeout(function () {
            currentObject._availSet.SetCarrierFilterOption(optionId, isSelected);
            currentObject._UpdateDisplayForFiltering(true, false);
        }, currentObject.waitIndicatorTimeoutDuration);
    },

    PredictToggleCarrierFilterOptionCount: function (optionId) {
        this._CloneAvailSet();
        this._tempAvailSet.ToggleCarrierFilterOption(optionId);
        var count = this._tempAvailSet.ValidItemCount();    //Base number of valid items if this option was toggled

        //'OR'-type: Must be at least one valid item actually matching this option
        if (count > 0 && this._tempAvailSet.CarrierOptionCollection.GetOptionById(optionId).Selected == true) {
            if (this._tempAvailSet.HasValidItemsForCarrier(optionId) == false) {
                count = 0;
            }
        }

        return count;
    },

    ToggleOutboundDepartureFilterOption: function (optionId) {
        this._ShowWaitIndicator();

        var currentObject = this;
        setTimeout(function () {
            currentObject._availSet.ToggleOutboundDepartureFilterOption(optionId);
            currentObject._UpdateDisplayForFiltering(true, false);

            if (currentObject.SaveStateEnabled == true) {
                currentObject.AvailStateManager.ToggleAirOutboundDepartureFilterOption(optionId);
            }
        }, currentObject.waitIndicatorTimeoutDuration);
    },

    InitializeOutboundDepartureFilterOption: function (optionId, isSelected) {
        this._ShowWaitIndicator();

        var currentObject = this;
        setTimeout(function () {
            currentObject._availSet.SetOutboundDepartureFilterOption(optionId, isSelected);
            currentObject._UpdateDisplayForFiltering(true, false);
        }, currentObject.waitIndicatorTimeoutDuration);
    },

    PredictToggleOutboundDepartureFilterOptionCount: function (optionId) {
        this._CloneAvailSet();
        this._tempAvailSet.ToggleOutboundDepartureFilterOption(optionId);
        var count = this._tempAvailSet.ValidItemCount();    //Base number of valid items if this option was toggled

        //'OR'-type: Must be at least one valid item actually matching this option
        if (count > 0 && this._tempAvailSet.OutboundDepartureOptionCollection.GetOptionById(optionId).Selected == true) {
            if (this._tempAvailSet.HasValidItemsForOutboundDeparture(optionId) == false) {
                count = 0;
            }
        }

        return count;
    },

    ToggleOutboundArrivalFilterOption: function (optionId) {
        this._ShowWaitIndicator();

        var currentObject = this;
        setTimeout(function () {
            currentObject._availSet.ToggleOutboundArrivalFilterOption(optionId);
            currentObject._UpdateDisplayForFiltering(true, false);

            if (currentObject.SaveStateEnabled == true) {
                currentObject.AvailStateManager.ToggleAirOutboundArrivalFilterOption(optionId);
            }
        }, currentObject.waitIndicatorTimeoutDuration);
    },

    InitializeOutboundArrivalFilterOption: function (optionId, isSelected) {
        this._ShowWaitIndicator();

        var currentObject = this;
        setTimeout(function () {
            currentObject._availSet.SetOutboundArrivalFilterOption(optionId, isSelected);
            currentObject._UpdateDisplayForFiltering(true, false);
        }, currentObject.waitIndicatorTimeoutDuration);
    },

    PredictToggleOutboundArrivalFilterOptionCount: function (optionId) {
        this._CloneAvailSet();
        this._tempAvailSet.ToggleOutboundArrivalFilterOption(optionId);
        var count = this._tempAvailSet.ValidItemCount();    //Base number of valid items if this option was toggled

        //'OR'-type: Must be at least one valid item actually matching this option
        if (count > 0 && this._tempAvailSet.OutboundArrivalOptionCollection.GetOptionById(optionId).Selected == true) {
            if (this._tempAvailSet.HasValidItemsForOutboundArrival(optionId) == false) {
                count = 0;
            }
        }

        return count;
    },

    ToggleInboundDepartureFilterOption: function (optionId) {
        this._ShowWaitIndicator();

        var currentObject = this;
        setTimeout(function () {
            currentObject._availSet.ToggleInboundDepartureFilterOption(optionId);
            currentObject._UpdateDisplayForFiltering(true, false);

            if (currentObject.SaveStateEnabled == true) {
                currentObject.AvailStateManager.ToggleAirInboundDepartureFilterOption(optionId);
            }
        }, currentObject.waitIndicatorTimeoutDuration);
    },

    InitializeInboundDepartureFilterOption: function (optionId, isSelected) {
        this._ShowWaitIndicator();

        var currentObject = this;
        setTimeout(function () {
            currentObject._availSet.SetInboundDepartureFilterOption(optionId, isSelected);
            currentObject._UpdateDisplayForFiltering(true, false);
        }, currentObject.waitIndicatorTimeoutDuration);
    },

    PredictToggleInboundDepartureFilterOptionCount: function (optionId) {
        this._CloneAvailSet();
        this._tempAvailSet.ToggleInboundDepartureFilterOption(optionId);
        var count = this._tempAvailSet.ValidItemCount();    //Base number of valid items if this option was toggled

        //'OR'-type: Must be at least one valid item actually matching this option
        if (count > 0 && this._tempAvailSet.InboundDepartureOptionCollection.GetOptionById(optionId).Selected == true) {
            if (this._tempAvailSet.HasValidItemsForInboundDeparture(optionId) == false) {
                count = 0;
            }
        }

        return count;
    },

    ToggleInboundArrivalFilterOption: function (optionId) {
        this._ShowWaitIndicator();

        var currentObject = this;
        setTimeout(function () {
            currentObject._availSet.ToggleInboundArrivalFilterOption(optionId);
            currentObject._UpdateDisplayForFiltering(true, false);

            if (currentObject.SaveStateEnabled == true) {
                currentObject.AvailStateManager.ToggleAirInboundArrivalFilterOption(optionId);
            }
        }, currentObject.waitIndicatorTimeoutDuration);
    },

    InitializeInboundArrivalFilterOption: function (optionId, isSelected) {
        this._ShowWaitIndicator();

        var currentObject = this;
        setTimeout(function () {
            currentObject._availSet.SetInboundArrivalFilterOption(optionId, isSelected);
            currentObject._UpdateDisplayForFiltering(true, false);
        }, currentObject.waitIndicatorTimeoutDuration);
    },

    PredictToggleInboundArrivalFilterOptionCount: function (optionId) {
        this._CloneAvailSet();
        this._tempAvailSet.ToggleInboundArrivalFilterOption(optionId);
        var count = this._tempAvailSet.ValidItemCount();    //Base number of valid items if this option was toggled

        //'OR'-type: Must be at least one valid item actually matching this option
        if (count > 0 && this._tempAvailSet.InboundArrivalOptionCollection.GetOptionById(optionId).Selected == true) {
            if (this._tempAvailSet.HasValidItemsForInboundArrival(optionId) == false) {
                count = 0;
            }
        }

        return count;
    },

    SetBasicEconomyFilter: function (isFiltered) {
        this._ShowWaitIndicator();

        var isFilteredBool = false;
        if (isFiltered == true || isFiltered == 'true') {
            isFilteredBool = true;
        }

        var currentObject = this;
        setTimeout(function () {
            currentObject._availSet.SetBasicEconomyFilter(isFilteredBool);
            currentObject._UpdateDisplayForFiltering(true, true);

            if (currentObject.SaveStateEnabled == true) {
                currentObject.AvailStateManager.SetBasicEconomyFilter(isFilteredBool);
            }
        }, currentObject.waitIndicatorTimeoutDuration);

    },

    InitializeBasicEconomyFilter: function (isFiltered) {
        this._ShowWaitIndicator();

        var isFilteredBool = true;
        if (isFiltered == true || isFiltered == 'true') {
            isFilteredBool = true;
        }

        var currentObject = this;
        setTimeout(function () {
            currentObject._availSet.SetBasicEconomyFilter(isFilteredBool);
            currentObject._UpdateDisplayForFiltering(true, true);
        }, currentObject.waitIndicatorTimeoutDuration);
    },

    //Update user default setting (e.g. from popup where they can change it)
    UpdatePreFilterBasicEconomyFlag: function (preFilter) {
        this._showBasicEconPrefPrompt = false;
        this._preFilterBasicEconomy = preFilter;
        this._UpdateClearButtons();
        if (this.SaveStateEnabled == true) {
            this.AvailStateManager.UpdatePreFilterBasicEconomyFlag(preFilter);
        }
    },

    //Clears any matrix filters and applies a single number-of-stops filter (used by matrix row headers)
    FilterByOneMatrixStopsOption: function (optionId) {
        this.ClearMatrixFilters();

        //Don't trigger click directly; don't want to run other things like HideFilterCallout()
        this.ToggleStopsFilterOption(optionId);
        this._availSet.StopsOptionCollection.GetOptionById(optionId).ToggleInput();
    },

    //Clears any matrix filters and applies a single carrier filter (used by matrix column headers)
    FilterByOneMatrixCarrierOption: function (optionId) {
        this.ClearMatrixFilters();

        //Don't trigger click directly; don't want to run other things like HideFilterCallout()
        this.ToggleCarrierFilterOption(optionId);
        this._availSet.CarrierOptionCollection.GetOptionById(optionId).ToggleInput();
    },

    //Clears any matrix filters and applies a single number-of-stops filter and a single carrier filter (used by matrix cells)
    FilterByOneStopsAndCarrierOption: function (stopsOptionId, carrierOptionId) {
        this.ClearMatrixFilters();

        this._availSet.StopsAndCarrierOptionCollection.GetOptionById(stopsOptionId + "-" + carrierOptionId).ToggleSelected();    //Mark combo option as selected

        //Don't trigger clicks directly; don't want to run other things like HideFilterCallout()
        this.ToggleStopsFilterOption(stopsOptionId);
        this._availSet.StopsOptionCollection.GetOptionById(stopsOptionId).ToggleInput();

        this.ToggleCarrierFilterOption(carrierOptionId);
        this._availSet.CarrierOptionCollection.GetOptionById(carrierOptionId).ToggleInput();
    },

    PredictFilterByOneStopsAndCarrierOption: function (optionId, currentCount) {
        this._CloneAvailSet();
        var option = this._availSet.StopsAndCarrierOptionCollection.GetOptionById(optionId);

        this._tempAvailSet.ClearSpecifiedFilters(false, false, true, true, false, false, false, false, false, false); //Clear matrix filters
        this._tempAvailSet.ToggleStopsFilterOption(option.StopsOptionId);
        this._tempAvailSet.ToggleCarrierFilterOption(option.CarrierOptionId);

        option.PredictiveCount = this._tempAvailSet.ValidItemCount();    //Base number of valid items if this option was toggled;
        option.PredictiveCountDifference = option.PredictiveCount - currentCount;
        option.LowestPrice = this._tempAvailSet.LowestValidItemPrice();
    },

    //Called on release of price slider handle
    PriceSliderValuesChanged: function () {
        Avail.AvailDisplay.prototype.PriceSliderValuesChanged.call(this);

        //Save price slider state selections
        if (this.SaveStateEnabled == true) {
            this.AvailStateManager.SetAirLowPriceFilter(this._selectedLowPrice);
            this.AvailStateManager.SetAirHighPriceFilter(this._selectedHighPrice);
        }
    },

    //Update count predictions for all filter options
    _UpdatePredictiveCounts: function () {
        Avail.AvailDisplay.prototype._UpdatePredictiveCounts.call(this);

        var currentCount = this._availSet.ValidItemCount();

        if (this._availSet.StopsOptionCollection != null) {
            for (var i = 0; i < this._availSet.StopsOptionCollection.FilterOptions.length; i++) {
                var option = this._availSet.StopsOptionCollection.FilterOptions[i];
                option.PredictiveCount = this.PredictToggleStopsFilterOptionCount(option.OptionId);
                option.PredictiveCountDifference = option.PredictiveCount - currentCount;
            }
            this._availSet.StopsOptionCollection.UpdatePredictiveCountLabels();
        }

        if (this._availSet.CarrierOptionCollection != null) {
            for (var i = 0; i < this._availSet.CarrierOptionCollection.FilterOptions.length; i++) {
                var option = this._availSet.CarrierOptionCollection.FilterOptions[i];
                option.PredictiveCount = this.PredictToggleCarrierFilterOptionCount(option.OptionId);
                option.PredictiveCountDifference = option.PredictiveCount - currentCount;
            }
            this._availSet.CarrierOptionCollection.UpdatePredictiveCountLabels();
        }

        if (this._availSet.OutboundDepartureOptionCollection != null) {
            for (var i = 0; i < this._availSet.OutboundDepartureOptionCollection.FilterOptions.length; i++) {
                var option = this._availSet.OutboundDepartureOptionCollection.FilterOptions[i];
                option.PredictiveCount = this.PredictToggleOutboundDepartureFilterOptionCount(option.OptionId);
                option.PredictiveCountDifference = option.PredictiveCount - currentCount;
            }
            this._availSet.OutboundDepartureOptionCollection.UpdatePredictiveCountLabels();
        }

        if (this._availSet.OutboundArrivalOptionCollection != null) {
            for (var i = 0; i < this._availSet.OutboundArrivalOptionCollection.FilterOptions.length; i++) {
                var option = this._availSet.OutboundArrivalOptionCollection.FilterOptions[i];
                option.PredictiveCount = this.PredictToggleOutboundArrivalFilterOptionCount(option.OptionId);
                option.PredictiveCountDifference = option.PredictiveCount - currentCount;
            }
            this._availSet.OutboundArrivalOptionCollection.UpdatePredictiveCountLabels();
        }

        if (this._availSet.InboundDepartureOptionCollection != null) {
            for (var i = 0; i < this._availSet.InboundDepartureOptionCollection.FilterOptions.length; i++) {
                var option = this._availSet.InboundDepartureOptionCollection.FilterOptions[i];
                option.PredictiveCount = this.PredictToggleInboundDepartureFilterOptionCount(option.OptionId);
                option.PredictiveCountDifference = option.PredictiveCount - currentCount;
            }
            this._availSet.InboundDepartureOptionCollection.UpdatePredictiveCountLabels();
        }

        if (this._availSet.InboundArrivalOptionCollection != null) {
            for (var i = 0; i < this._availSet.InboundArrivalOptionCollection.FilterOptions.length; i++) {
                var option = this._availSet.InboundArrivalOptionCollection.FilterOptions[i];
                option.PredictiveCount = this.PredictToggleInboundArrivalFilterOptionCount(option.OptionId);
                option.PredictiveCountDifference = option.PredictiveCount - currentCount;
            }
            this._availSet.InboundArrivalOptionCollection.UpdatePredictiveCountLabels();
        }

        //Matrix
        if (this._availSet.StopsAndCarrierOptionCollection != null) {
            for (var i = 0; i < this._availSet.StopsAndCarrierOptionCollection.FilterOptions.length; i++) {
                var option = this._availSet.StopsAndCarrierOptionCollection.FilterOptions[i];
                this.PredictFilterByOneStopsAndCarrierOption(option.OptionId, currentCount);
            }
            this._availSet.StopsAndCarrierOptionCollection.UpdatePredictiveCountLabels();
            this._availSet.StopsAndCarrierOptionCollection.UpdatePredictiveLowPriceLabels(this._currencyCode, this._currencySymbol);
        }
    },

    //Remove all currently applied filters
    ClearAllFilters: function () {
        Avail.AvailDisplay.prototype.ClearAllFilters.call(this);
        this._ClearMatrixSelectionHighlighting();

        //After clearing, re-apply user defaults
        if (this._preFilterBasicEconomy == true) {
            this.SetBasicEconomyFilter(true);
        }
    },

    //Clear just filters used by air matrix
    ClearMatrixFilters: function () {
        this._ClearSpecifiedFilters(false, false, true, true, false, false, false, false, false, false);
        this._ClearMatrixSelectionHighlighting();
    },

    //Clear just filters used exclusively by main (i.e. gutter) controls (use when matrix is showing)
    ClearMainFilters: function () {
        this._ClearSpecifiedFilters(true, true, false, false, true, true, true, true, true, true);
    },

    //Reset just the air filters specified
    _ClearSpecifiedFilters: function (resetPrice, resetName, resetStops, resetCarrier, resetOutboundDeparture, resetOutboundArrival, resetInboundDeparture, resetInboundArrival, resetFlightNumber, resetBasicEconomy) {
        this._ShowWaitIndicator();

        var currentObject = this;
        setTimeout(function () {
            currentObject._availSet.ClearSpecifiedFilters(resetPrice, resetName, resetStops, resetCarrier, resetOutboundDeparture, resetOutboundArrival, resetInboundDeparture, resetInboundArrival, resetFlightNumber, resetBasicEconomy);
            currentObject._ResetSpecifiedFilterControls(resetPrice, resetName, resetStops, resetCarrier, resetOutboundDeparture, resetOutboundArrival, resetInboundDeparture, resetInboundArrival, resetFlightNumber, resetBasicEconomy);
            currentObject._UpdateDisplayForFiltering(true, resetBasicEconomy);

            if (currentObject.SaveStateEnabled == true) {
                currentObject.AvailStateManager.ClearSpecifiedAirLegFilters(resetPrice, resetName, resetStops, resetCarrier, resetOutboundDeparture, resetOutboundArrival, resetInboundDeparture, resetInboundArrival, resetBasicEconomy);
            }
        }, currentObject.waitIndicatorTimeoutDuration);
    },

    //Reset filter controls to default state
    _ResetAllFilterControls: function () {
        Avail.AvailDisplay.prototype._ResetAllFilterControls.call(this);    //Base class resets its controls

        //Reset air-specific controls (sliders, etc)
        this._ResetFlightNumberControl();
        this._ResetBasicEconomyControl();
    },

    //Reset just the air filter controls specified to default state
    _ResetSpecifiedFilterControls: function (resetPrice, resetName, resetStops, resetCarrier, resetOutboundDeparture, resetOutboundArrival, resetInboundDeparture, resetInboundArrival, resetFlightNumber, resetBasicEconomy) {
        Avail.AvailDisplay.prototype._ResetSpecifiedFilterControls.call(this, resetPrice, resetName);

        //Reset specified air-specific controls (sliders, etc)
        if (resetFlightNumber == true) {
            this._ResetFlightNumberControl();
        }
        if (resetBasicEconomy == true) {
            this._ResetBasicEconomyControl();
        }
    },

    _ResetFlightNumberControl: function () {
        //Clear number input
        if (this._flightNumberInput.length > 0) {
            this._flightNumberInput.val("");
        }
    },

    _ResetBasicEconomyControl: function () {
        if (this._preFilterBasicEconomy == true) {
            this._basicEconomyHideInput.prop('checked', true);
        }
        else {
            this._basicEconomyShowInput.prop('checked', true);
        }
    },

    _UpdateClearButtons: function () {
        Avail.AvailDisplay.prototype._UpdateClearButtons.call(this);    //Base class handles main reset button

        //Set air-specific reset buttons enabled state per active filters
        var matrixInUse = this._availSet.AnyMatrixFilterOptionsActive();

        if (this._clearButton.length > 0) { //New accessible 1-button version
            if (matrixInUse == true) {
                this._matrixClearButton.prop("disabled", false);
            }
            else {
                this._matrixClearButton.prop("disabled", true);
            }

            if (this._AnyMainFiltersActive() == true) {
                this._mainClearButton.prop("disabled", false);
            }
            else {
                this._mainClearButton.prop("disabled", true);
            }
        }
        else {
            if (matrixInUse == true) {
                this._enabledMatrixClearButton.show();
                this._disabledMatrixClearButton.hide();
            }
            else {
                this._enabledMatrixClearButton.hide();
                this._disabledMatrixClearButton.show();
            }

            if (this._AnyMainFiltersActive() == true) {
                this._enabledMainClearButton.show();
                this._disabledMainClearButton.hide();
            }
            else {
                this._enabledMainClearButton.hide();
                this._disabledMainClearButton.show();
            }
        }
    },

    _ShowNoItemsMessage: function () {
        Avail.AvailDisplay.prototype._ShowNoItemsMessage.call(this);
        if (this._IsOnlyBEFilterActive() && this._IsNonBEFilterActive()) {
			this._noResultsResetFiltersMessageElement.hide();
			this._noResultsResetFiltersButtonElement.show();
			this._noResultsClearBEMessageElement.show();
			this._noResultsClearBEButtonElement.show();
		}
		else if (this._IsOnlyBEFilterActive()) {
			this._noResultsResetFiltersMessageElement.hide();
			this._noResultsResetFiltersButtonElement.hide();
			this._noResultsClearBEMessageElement.show();
			this._noResultsClearBEButtonElement.show();
		}
		else {
			this._noResultsResetFiltersMessageElement.show();
			this._noResultsResetFiltersButtonElement.show();
			this._noResultsClearBEMessageElement.hide();
			this._noResultsClearBEButtonElement.hide();
		}
    },

	//Whether any elements are filtered out only due to the basic economy filter
	_IsOnlyBEFilterActive: function () {
		for (var i = 0; i < this._availSet.Items.length; i++) {
            var availItem = this._availSet.Items[i];
			if (!availItem.ValidForBasicEconomy && availItem._IsValidForNonBEFilters()) {
				return true;
			}
		}
		return false;
	},

	//Whether any elements are filtered out by non basic economy filters
	_IsNonBEFilterActive: function () {
		for (var i = 0; i < this._availSet.Items.length; i++) {
            var availItem = this._availSet.Items[i];
			if (!availItem._IsValidForNonBEFilters()) {
				return true;
			}
		}
		return false;
	},

    //Whether any filters that don't have specific options are currently applied
    _AnyNonOptionedFiltersActive: function () {
        if (Avail.AvailDisplay.prototype._AnyNonOptionedFiltersActive.call(this) == true || this._FilteredByFlightNumber() == true || this._FilteredByBasicEconomy() == true) {   //Check base and air-specific filters
            return true;
        }
    },

    //Whether number filter is in use
    _FilteredByFlightNumber: function () {
        var filteredByFlightNumber = false;
        if (this._flightNumberInput.length > 0 && this._flightNumberInput.val() != "") {
            filteredByFlightNumber = true;
        }
        return filteredByFlightNumber;
    },

    //Whether basic economy filter is in use
    _FilteredByBasicEconomy: function () {
        if ((this._preFilterBasicEconomy == false && this._basicEconomyHideInput.prop('checked') == true) || (this._preFilterBasicEconomy == true && this._basicEconomyShowInput.prop('checked') == true)) {
            return true;
        }
        else {
            return false;
        }
    },

    //Clone data semi-manually.  Cloning entire AvailSet object won't work, because arrays of custom objects will just be shared references and not deep copies.
    _CloneAvailSet: function () {
        Avail.AvailDisplay.prototype._CloneAvailSet.call(this);    //Base class will clone its properties

        //Clone properties specific to AirAvailSet

        if (this._availSet.StopsOptionCollection != null) {
            var stopsOptionsCopy = [];
            for (var i = 0; i < this._availSet.StopsOptionCollection.FilterOptions.length; i++) {
                stopsOptionsCopy.push(jQuery.extend(true, {}, this._availSet.StopsOptionCollection.FilterOptions[i]));
            }
            var config = new Avail.FilterOptionCollectionConfig();
            config.FilterOptions = stopsOptionsCopy;
            this._tempAvailSet.StopsOptionCollection = new Avail.FilterOptionCollection(config);
        }

        if (this._availSet.CarrierOptionCollection != null) {
            var carrierOptionsCopy = [];
            for (var i = 0; i < this._availSet.CarrierOptionCollection.FilterOptions.length; i++) {
                carrierOptionsCopy.push(jQuery.extend(true, {}, this._availSet.CarrierOptionCollection.FilterOptions[i]));
            }
            var config = new Avail.FilterOptionCollectionConfig();
            config.FilterOptions = carrierOptionsCopy;
            this._tempAvailSet.CarrierOptionCollection = new Avail.FilterOptionCollection(config);
        }

        if (this._availSet.OutboundDepartureOptionCollection != null) {
            var outboundDepartureOptionsCopy = [];
            for (var i = 0; i < this._availSet.OutboundDepartureOptionCollection.FilterOptions.length; i++) {
                outboundDepartureOptionsCopy.push(jQuery.extend(true, {}, this._availSet.OutboundDepartureOptionCollection.FilterOptions[i]));
            }
            var config = new Avail.FilterOptionCollectionConfig();
            config.FilterOptions = outboundDepartureOptionsCopy;
            this._tempAvailSet.OutboundDepartureOptionCollection = new Avail.FilterOptionCollection(config);
        }

        if (this._availSet.OutboundArrivalOptionCollection != null) {
            var outboundArrivalOptionsCopy = [];
            for (var i = 0; i < this._availSet.OutboundArrivalOptionCollection.FilterOptions.length; i++) {
                outboundArrivalOptionsCopy.push(jQuery.extend(true, {}, this._availSet.OutboundArrivalOptionCollection.FilterOptions[i]));
            }
            var config = new Avail.FilterOptionCollectionConfig();
            config.FilterOptions = outboundArrivalOptionsCopy;
            this._tempAvailSet.OutboundArrivalOptionCollection = new Avail.FilterOptionCollection(config);
        }

        if (this._availSet.InboundDepartureOptionCollection != null) {
            var inboundDepartureOptionsCopy = [];
            for (var i = 0; i < this._availSet.InboundDepartureOptionCollection.FilterOptions.length; i++) {
                inboundDepartureOptionsCopy.push(jQuery.extend(true, {}, this._availSet.InboundDepartureOptionCollection.FilterOptions[i]));
            }
            var config = new Avail.FilterOptionCollectionConfig();
            config.FilterOptions = inboundDepartureOptionsCopy;
            this._tempAvailSet.InboundDepartureOptionCollection = new Avail.FilterOptionCollection(config);
        }

        if (this._availSet.InboundArrivalOptionCollection != null) {
            var inboundArrivalOptionsCopy = [];
            for (var i = 0; i < this._availSet.InboundArrivalOptionCollection.FilterOptions.length; i++) {
                inboundArrivalOptionsCopy.push(jQuery.extend(true, {}, this._availSet.InboundArrivalOptionCollection.FilterOptions[i]));
            }
            var config = new Avail.FilterOptionCollectionConfig();
            config.FilterOptions = inboundArrivalOptionsCopy;
            this._tempAvailSet.InboundArrivalOptionCollection = new Avail.FilterOptionCollection(config);
        }

        if (this._availSet.StopsAndCarrierOptionCollection != null) {
            var stopsAndCarrierOptionsCopy = [];
            for (var i = 0; i < this._availSet.StopsAndCarrierOptionCollection.FilterOptions.length; i++) {
                stopsAndCarrierOptionsCopy.push(jQuery.extend(true, {}, this._availSet.StopsAndCarrierOptionCollection.FilterOptions[i]));
            }
            var config = new Avail.FilterOptionCollectionConfig();
            config.FilterOptions = stopsAndCarrierOptionsCopy;
            this._tempAvailSet.StopsAndCarrierOptionCollection = new Avail.FilterOptionCollection(config);
        }
    },

    //Sets temp avail set object to a new/blank AirAvailSet
    _ClearTempAvailSet: function () {
        this._tempAvailSet = new Avail.AirAvailSet([]);
    },

    //Activate air-specific filters automatically (e.g. profile settings)
    PreSelectFilters: function () {
        Avail.AvailDisplay.prototype.PreSelectFilters.call(this);

        if (this._preFilterBasicEconomy == true) {
            this._basicEconomyHideInput.trigger("click");
        }
    },

    //Re-filters relevant items in a multi-select filter based on given state data
    RestoreCheckboxFilters: function (filterType, filterStates, checkboxPrefix, expandTriggerId, optionsAreaId, optionElementType) {
        Avail.AvailDisplay.prototype.RestoreCheckboxFilters.call(this, filterType, filterStates, checkboxPrefix, expandTriggerId, optionsAreaId, optionElementType);    //Base class handles checkbox and general stuff

        //Re-set air-specific filters
        for (var i = 0; i < filterStates.length; i++) {
            if (filterStates[i].Selected == true) {
                if (filterType == "Stops") {
                    this.InitializeStopsFilterOption(filterStates[i].Id, true);
                }
                else if (filterType == "Carrier") {
                    this.InitializeCarrierFilterOption(filterStates[i].Id, true);
                }
                else if (filterType == "OutboundDeparture") {
                    this.InitializeOutboundDepartureFilterOption(filterStates[i].Id, true);
                }
                else if (filterType == "OutboundArrival") {
                    this.InitializeOutboundArrivalFilterOption(filterStates[i].Id, true);
                }
                else if (filterType == "InboundDeparture") {
                    this.InitializeInboundDepartureFilterOption(filterStates[i].Id, true);
                }
                else if (filterType == "InboundArrival") {
                    this.InitializeInboundArrivalFilterOption(filterStates[i].Id, true);
                }
            }
        }
    },

    //Restores air-specific user filter selections
    _RestoreFilters: function () {
        Avail.AvailDisplay.prototype._RestoreFilters.call(this);

        if (this.AvailStateManager.CurrentAirLeg.Filters.Number != "") {
            this._flightNumberInput.val(this.AvailStateManager.CurrentAirLeg.Filters.Number);
            this.FilterByFlightNumber(this.AvailStateManager.CurrentAirLeg.Filters.Number);
        }

        this.RestoreCheckboxFilters("Stops", this.AvailStateManager.CurrentAirLeg.Filters.Stops.States, this._availDisplayConfig.StopsCheckboxIdPrefix, "", "", "");
        this.RestoreCheckboxFilters("OutboundDeparture", this.AvailStateManager.CurrentAirLeg.Filters.OutDepTimes.States, this._availDisplayConfig.OutDepTimeCheckboxIdPrefix, "", "", "");
        this.RestoreCheckboxFilters("OutboundArrival", this.AvailStateManager.CurrentAirLeg.Filters.OutArrTimes.States, this._availDisplayConfig.OutArrTimeCheckboxIdPrefix, "", "", "");
        this.RestoreCheckboxFilters("InboundDeparture", this.AvailStateManager.CurrentAirLeg.Filters.InDepTimes.States, this._availDisplayConfig.InDepTimeCheckboxIdPrefix, "", "", "");
        this.RestoreCheckboxFilters("InboundArrival", this.AvailStateManager.CurrentAirLeg.Filters.InArrTimes.States, this._availDisplayConfig.InArrTimeCheckboxIdPrefix, "", "", "");
        this.RestoreCheckboxFilters("Carrier", this.AvailStateManager.CurrentAirLeg.Filters.Carriers.States, this._availDisplayConfig.CarrierCheckboxIdPrefix, this._availDisplayConfig.CarrierExpandMoreId, this._availDisplayConfig.CarrierOptionsId, this._availDisplayConfig.CheckboxOptionType);

        this._RestoreAirMatrix();
        this._RestoreBasicEconomy();
    },

    //Restores hotel-specific slider selections
    _RestoreSliders: function () {
        Avail.AvailDisplay.prototype._RestoreSliders.call(this);

        if (this.AvailStateManager.CurrentAirLeg.Filters.Price.Low > -1 || this.AvailStateManager.CurrentAirLeg.Filters.Price.High > -1) {

            var newMin = this._priceSlider.rangeSlider("values").min;
            if (this.AvailStateManager.CurrentAirLeg.Filters.Price.Low > -1) {
                newMin = this.AvailStateManager.CurrentAirLeg.Filters.Price.Low;
            }

            var newMax = this._priceSlider.rangeSlider("values").max;
            if (this.AvailStateManager.CurrentAirLeg.Filters.Price.High > -1) {
                newMax = this.AvailStateManager.CurrentAirLeg.Filters.Price.High;
            }

            //Simulate dragging slider
            this._priceSlider.rangeSlider("values", newMin, newMax);
            this.PriceSliderValuesChanging();
            this.PriceSliderValuesChanged();
        }
    },

    //Restores air-specific panel states
    _RestorePanelStates: function () {
        Avail.AvailDisplay.prototype._RestorePanelStates.call(this);

        this._RestorePanelState(this._availDisplayConfig.StopsPanelTriggerId, this.AvailStateManager.CurrentAirLeg.Filters.Stops);
        this._RestorePanelState(this._availDisplayConfig.CarrierPanelTriggerId, this.AvailStateManager.CurrentAirLeg.Filters.Carriers);
        this._RestorePanelState(this._availDisplayConfig.OutArrPanelTriggerId, this.AvailStateManager.CurrentAirLeg.Filters.OutArrTimes);
        this._RestorePanelState(this._availDisplayConfig.InArrPanelTriggerId, this.AvailStateManager.CurrentAirLeg.Filters.InArrTimes);

        var timeStates = [];
        timeStates.push(this.AvailStateManager.CurrentAirLeg.Filters.OutDepTimes);
        timeStates.push(this.AvailStateManager.CurrentAirLeg.Filters.OutArrTimes);
        timeStates.push(this.AvailStateManager.CurrentAirLeg.Filters.InDepTimes);
        timeStates.push(this.AvailStateManager.CurrentAirLeg.Filters.InArrTimes);

        //Manually update state on groups
        this.AvailStateManager.CurrentAirLeg.Filters.TimeOpen = this._RestorePanelStateGroup(this._availDisplayConfig.TimePanelTriggerId, timeStates, this.AvailStateManager.CurrentAirLeg.Filters.TimeOpen);
        this.AvailStateManager.SaveState();
    },

    //Restore matrix highlighting to match stop/carrier filters
    _RestoreAirMatrix: function () {

        var activeStopsOption = null;
        for (var i = 0; i < this.AvailStateManager.CurrentAirLeg.Filters.Stops.States.length; i++) {
            if (this.AvailStateManager.CurrentAirLeg.Filters.Stops.States[i].Selected == true) {
                activeStopsOption = this.AvailStateManager.CurrentAirLeg.Filters.Stops.States[i];
                break;
            }
        }

        var activeCarrierOption = null;
        for (var i = 0; i < this.AvailStateManager.CurrentAirLeg.Filters.Carriers.States.length; i++) {
            if (this.AvailStateManager.CurrentAirLeg.Filters.Carriers.States[i].Selected == true) {
                activeCarrierOption = this.AvailStateManager.CurrentAirLeg.Filters.Carriers.States[i];
                break;
            }
        }

        if (activeStopsOption != null && activeCarrierOption != null) {
            this.HighlightMatrixCell('airMatrix_' + activeStopsOption.Id + '-' + activeCarrierOption.Id, 'on', true);
        }
        else if (activeStopsOption != null) {
            this.HighlightMatrixRow('airMatrix_' + activeStopsOption.Id + '-X', 'on', true);
        }
        else if (activeCarrierOption != null) {
            this.HighlightMatrixColumn('airMatrix_X-' + activeCarrierOption.Id, 'on', true);
        }
    },

    //Restore basic economy filter state
    _RestoreBasicEconomy: function () {
        var basicEconomyState = this.AvailStateManager.CurrentAirLeg.Filters.BasicEcon;
        if (basicEconomyState != undefined) {
            if (basicEconomyState == false) {
                this._basicEconomyShowInput.trigger("click");
            }
            else {
                this._basicEconomyHideInput.trigger("click");
            }
            this.SetBasicEconomyFilter(basicEconomyState);
        }
    },

    //Clears air filter selections
    _ClearSavedFilterState: function () {
        Avail.AvailDisplay.prototype._ClearSavedFilterState.call(this);

        if (this.SaveStateEnabled == true) {
            this.AvailStateManager.ClearAirLegFilters();
        }
    },


    //=== Sorting ===

    _SortItems: function (sortType) {
        if (sortType == "CarrierAsc") {
            this._availSet.Items.sort(this.SortByCarrierAsc(this));
        }
        else if (sortType == "CarrierDsc") {
            this._availSet.Items.sort(this.SortByCarrierDsc(this));
        }
        else if (sortType == "DurationAsc") {
            this._availSet.Items.sort(this.SortByDurationAsc);
        }
        else if (sortType == "DurationDsc") {
            this._availSet.Items.sort(this.SortByDurationDsc);
        }
        else if (sortType == "TimeAsc") {
            this._availSet.Items.sort(this.SortByOutboundDepartureAsc);
        }
        else if (sortType == "TimeDsc") {
            this._availSet.Items.sort(this.SortByOutboundDepartureDsc);
        }
        else if (sortType == "ArrivalAsc") {
            this._availSet.Items.sort(this.SortByOutboundArrivalAsc);
        }
        else if (sortType == "ArrivalDsc") {
            this._availSet.Items.sort(this.SortByOutboundArrivalDsc);
        }
        else if (sortType == "StopsAsc") {
            this._availSet.Items.sort(this.SortByStopsAsc);
        }
        else if (sortType == "StopsDsc") {
            this._availSet.Items.sort(this.SortByStopsDsc);
        }
        else if (sortType == "PriceAsc") {
            this._availSet.Items.sort(this.SortByPriceAsc); //Override base
        }
        else {
            Avail.AvailDisplay.prototype._SortItems.call(this, sortType);    //Not an air-specific sort; call base
        }
    },

    SortByCarrierAsc: function (availDisplay) {
        return function (itemA, itemB) {
            var carrierNameA = availDisplay._availSet.CarrierOptionCollection.GetOptionName(itemA.CarrierId);
            var carrierNameB = availDisplay._availSet.CarrierOptionCollection.GetOptionName(itemB.CarrierId);

            if ((carrierNameA) > (carrierNameB)) {
                return 1;
            }
            else if ((carrierNameA) == (carrierNameB)) {
                return Avail.AvailDisplay.prototype._SortByPriceAsc.call(this, itemA, itemB);
            }
            else {
                return -1;
            }
        };
    },

    SortByCarrierDsc: function (availDisplay) {
        return function (itemA, itemB) {
            var carrierNameA = availDisplay._availSet.CarrierOptionCollection.GetOptionName(itemA.CarrierId);
            var carrierNameB = availDisplay._availSet.CarrierOptionCollection.GetOptionName(itemB.CarrierId);

            if ((carrierNameA) > (carrierNameB)) {
                return -1;
            }
            else if ((carrierNameA) == (carrierNameB)) {
                return Avail.AvailDisplay.prototype._SortByPriceAsc.call(this, itemA, itemB);
            }
            else {
                return 1;
            }
        };
    },

    SortByDurationAsc: function (itemA, itemB) {
        if (itemA.Duration > itemB.Duration) {
            return 1;
        } else if (itemA.Duration == itemB.Duration) {
            return Avail.AvailDisplay.prototype._SortByPriceAsc.call(this, itemA, itemB);
        } else {
            return -1;
        }
    },

    SortByDurationDsc: function (itemA, itemB) {
        if (itemA.Duration > itemB.Duration) {
            return -1;
        } else if (itemA.Duration == itemB.Duration) {
            return Avail.AvailDisplay.prototype._SortByPriceAsc.call(this, itemA, itemB);
        } else {
            return 1;
        }
    },

    SortByOutboundDepartureAsc: function (itemA, itemB) {
        if (itemA.OutboundDeparture > itemB.OutboundDeparture) {
            return 1;
        } else if (itemA.OutboundDeparture == itemB.OutboundDeparture) {
            return Avail.AvailDisplay.prototype._SortByPriceAsc.call(this, itemA, itemB);
        } else {
            return -1;
        }
    },

    SortByOutboundDepartureDsc: function (itemA, itemB) {
        if (itemA.OutboundDeparture > itemB.OutboundDeparture) {
            return -1;
        } else if (itemA.OutboundDeparture == itemB.OutboundDeparture) {
            return Avail.AvailDisplay.prototype._SortByPriceAsc.call(this, itemA, itemB);
        } else {
            return 1;
        }
    },

    SortByOutboundArrivalAsc: function (itemA, itemB) {
        if (itemA.OutboundArrival > itemB.OutboundArrival) {
            return 1;
        } else if (itemA.OutboundArrival == itemB.OutboundArrival) {
            return Avail.AvailDisplay.prototype._SortByPriceAsc.call(this, itemA, itemB);
        } else {
            return -1;
        }
    },

    SortByOutboundArrivalDsc: function (itemA, itemB) {
        if (itemA.OutboundArrival > itemB.OutboundArrival) {
            return -1;
        } else if (itemA.OutboundArrival == itemB.OutboundArrival) {
            return Avail.AvailDisplay.prototype._SortByPriceAsc.call(this, itemA, itemB);
        } else {
            return 1;
        }
    },

    SortByStopsAsc: function (itemA, itemB) {
        if (itemA.Stops > itemB.Stops) {
            return 1;
        } else if (itemA.Stops == itemB.Stops) {
            return Avail.AvailDisplay.prototype._SortByPriceAsc.call(this, itemA, itemB);
        } else {
            return -1;
        }
    },

    SortByStopsDsc: function (itemA, itemB) {
        if (itemA.Stops > itemB.Stops) {
            return -1;
        } else if (itemA.Stops == itemB.Stops) {
            return Avail.AvailDisplay.prototype._SortByPriceAsc.call(this, itemA, itemB);
        } else {
            return 1;
        }
    },

    //Override base
    SortByPriceAsc: function (itemA, itemB) {
        if (itemA.PreferredRanking > itemB.PreferredRanking) {  //First use preferred for charters
            return 1;
        }
        else if (itemA.PreferredRanking == itemB.PreferredRanking) {
            return Avail.AvailDisplay.prototype._SortByPriceAsc.call(this, itemA, itemB);   //Then price like normal
        }
        else {
            return -1;
        }
    },

    //=== Matrix Display ===

    //-- headerCellId: ID of the triggering header cell
    //-- state: whether to apply or disable highlighting ("on" or "off")
    //-- keepHighlight: whether to disregard "off" commands and keep the highlighting (otherwise mouseout events would cancel sticky highlighting applied by a click)
    HighlightMatrixRow: function (headerCellId, state, keepHighlight) {
        var headerCell = $("#" + headerCellId);
        if (headerCell.find(".enabled").css("display") != "none") { //Don't highlight if cell is disabled due to filtering
            var bodyCells = headerCell.closest("tr").find("td");
            var allCells = headerCell.add(bodyCells);
            this._ApplyMatrixCellHighlighting(allCells, state, keepHighlight)
        }
    },

    //-- headerCellId: ID of the triggering header cell
    //-- state: whether to apply or disable highlighting ("on" or "off")
    //-- keepHighlight: whether to disregard "off" commands and keep the highlighting (otherwise mouseout events would cancel sticky highlighting applied by a click)
    HighlightMatrixColumn: function (headerCellId, state, keepHighlight) {
        var headerCell = $("#" + headerCellId);
        if (headerCell.find(".enabled").css("display") != "none") { //Don't highlight if cell is disabled due to filtering
            var cellIndex = headerCell.index() + 1;
            var bodyCells = $("#" + this._matrixTableId + " td:nth-child(" + cellIndex + ")");
            var allCells = headerCell.add(bodyCells);
            this._ApplyMatrixCellHighlighting(allCells, state, keepHighlight)
        }
    },

    //-- cellId: ID of the triggering body cell
    //-- state: whether to apply or disable highlighting ("on" or "off")
    //-- keepHighlight: whether to disregard "off" commands and keep the highlighting (otherwise mouseout events would cancel sticky highlighting applied by a click)
    HighlightMatrixCell: function (cellId, state, keepHighlight) {
        var cell = $("#" + cellId);

        if (cell.find(".enabled").css("visibility") != "hidden") {   //Don't highlight if cell is disabled due to filtering
            var columnHeaderCell = $("#" + this._matrixTableId + " ." + this._matrixColumnHeaderCssClass).eq(cell.index() - 1);    //Header column is counted, so subtract 1
            var rowHeaderCell = $("#" + this._matrixTableId + " ." + this._matrixRowHeaderCssClass).eq(cell.closest("tr").index()); //Header row is ignored automatically

            if ($.trim(cell.text()) != "") {
                var allCells = cell.add(columnHeaderCell).add(rowHeaderCell);
                this._ApplyMatrixCellHighlighting(allCells, state, keepHighlight)
            }
        }
    },

    _ApplyMatrixCellHighlighting: function (cells, state, keepHighlight) {
        if (state == "on") {
            if (keepHighlight) {
                cells.addClass(this._matrixSelectedCssClass);   //Set highlight to stick (can only be disabled by clearing filters)
            }
            else {
                cells.addClass(this._matrixHoverCssClass);
            }
        }
        else {
            cells.removeClass(this._matrixHoverCssClass);
        }
    },

    _ClearMatrixSelectionHighlighting: function () {
        if (this._matrixTable.length > 0) {
            $("#" + this._matrixTableId + " ." + this._matrixSelectedCssClass).removeClass(this._matrixSelectedCssClass);
        }
    },

    ScrollAirMatrixLeft: function () {
        this._matrixScrollPos -= 1;
        var targetCell = $("#" + this._matrixTableId + " tr").eq(0).find("th").eq(this._matrixScrollPos)
        var scrollTo = 0;

        if (this._matrixScrollPos == 0) {
            scrollTo = 0;
        }
        else {
            var borderWidth = targetCell.outerWidth(false) - targetCell.width();
            scrollTo = (this._matrixContainer.scrollLeft() + targetCell.position().left) - borderWidth;
        }

        if (scrollTo <= 0) {
            $("#scrollAirMatrixRight").focus();
        }

        var currentObject = this;
        this._matrixContainer.animate({ scrollLeft: scrollTo }, 'fast', function () {
            currentObject._AdjustMatrixScrollButtons();
        });
    },

    ScrollAirMatrixRight: function () {
        this._matrixScrollPos += 1;
        var targetCell = $("#" + this._matrixTableId + " tr").eq(0).find("th").eq(this._matrixScrollPos)
        var borderWidth = targetCell.outerWidth(false) - targetCell.width();
        var scrollTo = (this._matrixContainer.scrollLeft() + targetCell.position().left) - borderWidth;

        if (scrollTo >= (this._matrixContainer.get(0).scrollWidth - this._matrixContainer.width())) {
            $("#scrollAirMatrixLeft").focus();
        }

        var currentObject = this;
        this._matrixContainer.animate({ scrollLeft: scrollTo }, 'fast', function () {
            currentObject._AdjustMatrixScrollButtons();
        });
    },

    _AdjustMatrixScrollButtons: function () {
        if (this._matrixContainer.length > 0) {
            if (this._matrixContainer.scrollLeft() == 0) {
                this._matrixScrollLeftTrigger.hide();
            }
            else {
                this._matrixScrollLeftTrigger.show();
            }

            if (this._matrixContainer.scrollLeft() == (this._matrixContainer.get(0).scrollWidth - this._matrixContainer.width())) {
                this._matrixScrollRightTrigger.hide();
            }
            else {
                this._matrixScrollRightTrigger.show();
            }
        }
    },

    //=== Other Display ===

    ShowOutboundArrival: function () {
        this._showOutboundArrivalTrigger.hide();
        this._outboundArrivalArea.slideToggle('fast', function () { });
        this._hideOutboundArrivalTrigger.show();
    },

    HideOutboundArrival: function () {
        this._hideOutboundArrivalTrigger.hide();
        this._outboundArrivalArea.slideToggle('fast', function () { });
        this._showOutboundArrivalTrigger.show();
    },

    ShowInboundArrival: function () {
        this._showInboundArrivalTrigger.hide();
        this._inboundArrivalArea.slideToggle('fast', function () { });
        this._hideInboundArrivalTrigger.show();
    },

    HideInboundArrival: function () {
        this._hideInboundArrivalTrigger.hide();
        this._inboundArrivalArea.slideToggle('fast', function () { });
        this._showInboundArrivalTrigger.show();
    },

    //Swap trigger visibility; expand and scroll to panel
    ExpandAirSelection: function (itemIndex) {
        $('#expandAir' + itemIndex).hide();
        $('#collapseAir' + itemIndex).show();
        $('html, body').animate({ scrollTop: $('#_f' + itemIndex).offset().top }, 'slow');
        $('#airSelectionZone' + itemIndex).slideToggle('slow', function () { });
    },

    //Collapse panel; re-swap trigger visibility
    CollapseAirSelection: function (itemIndex) {
        $('#airSelectionZone' + itemIndex).slideToggle('slow', function () {
            $('#expandAir' + itemIndex).show();
            $('#collapseAir' + itemIndex).hide();
        });
    }

}

Avail.AirAvailDisplay.registerClass("Avail.AirAvailDisplay", Avail.AvailDisplay, Sys.IDisposable);

//Adjust matrix on create and window resize
$(document).ready(function () {
    availDisplay._AdjustMatrixScrollButtons();
});
$(window).resize(function () {
    availDisplay._AdjustMatrixScrollButtons();
});

// Notify ScriptManager that this is the end of the script.
if (typeof (Sys) !== "undefined") Sys.Application.notifyScriptLoaded();
//END Trisept.UI.Web.Availability.AirAvailDisplay.js
//START Trisept.UI.Web.Availability.AirAvailDisplayConfig.js
Type.registerNamespace("Avail");

//Contains init/config data for an AirAvailDisplay
Avail.AirAvailDisplayConfig = function () {
    Avail.AirAvailDisplayConfig.initializeBase(this);

    this.FlightNumberInputId = "";

    this.BasicEconomyShowInputId = "";
    this.BasicEconomyHideInputId = "";
    this.PreFilterBasicEconomy = false;
    this.ShowBasicEconPrefPrompt = false;
    this.BasicEconPrefPromptUrl = "";

    //DEPRECATED: IDs of clear buttons for "main" filters (e.g. ones in gutter, not matrix)
    this.EnabledMainClearButtonId = "";  //Shows when applicable
    this.DisabledMainClearButtonId = "";    //Shows when not applicable

    this.MainClearButtonId = ""; //ID of single button that gets enabled/disabled for "main" filters

    //DEPRECATED: IDs of clear buttons for matrix-specific filters
    this.EnabledMatrixClearButtonId = "";  //Shows when applicable
    this.DisabledMatrixClearButtonId = "";    //Shows when not applicable

    this.MatrixClearButtonId = ""; //ID of single button that gets enabled/disabled for matrix-specific filters

    //ID of element containing the flight matrix control
    this.MatrixContainerId = "";

    //ID of table element containing the flight matrix control
    this.MatrixTableId = "";

    //Prefix used in matrix interior cell IDs (e.g. "prefix_" means IDs are "prefix_0x0", "prefix_0x1", etc.)
    this.MatrixCellIdPrefix = "";

    //CSS class to apply to matrix cells when selected
    this.MatrixSelectedCssClass = "";

    //CSS class to apply to matrix cells when hovered over
    this.MatrixHoverCssClass = "";

    //CSS classes used to mark applicable cells for row/column headers in matrix
    this.MatrixColumnHeaderCssClass = "";
    this.MatrixRowHeaderCssClass = "";

    //IDs of elements that trigger matrix scrolling
    this.MatrixScrollRightId = "";
    this.MatrixScrollLeftId = "";

    //IDs of controls for showing/hiding shop-by-trip sections
    this.ShowOutboundArrivalId = "";
    this.HideOutboundArrivalId = "";
    this.OutboundArrivalAreaId = "";
    this.ShowInboundArrivalId = "";
    this.HideInboundArrivalId = "";
    this.InboundArrivalAreaId = "";


    //Checkbox IDs & ref.
    this.CheckboxOptionType = "li";

    this.OutDepTimeCheckboxIdPrefix = "outboundDepartureCheckBox_";
    this.OutArrTimeCheckboxIdPrefix = "outboundArrivalCheckBox_";
    this.InDepTimeCheckboxIdPrefix = "inboundDepartureCheckBox_";
    this.InArrTimeCheckboxIdPrefix = "inboundArrivalCheckBox_";
    this.StopsCheckboxIdPrefix = "stopsCheckBox_";

    this.CarrierCheckboxIdPrefix = "carrierCheckBox_";
    this.CarrierExpandMoreId = "expandMoreCarrierOptions";
    this.CarrierOptionsId = "carrierOptionsArea";

    //Panel IDs and state
    this.StopsPanelTriggerId = "StopsPanelTrigger";
    this.CarrierPanelTriggerId = "CarrierPanelTrigger";
    this.TimePanelTriggerId = "TimePanelTrigger";
    this.OutArrPanelTriggerId = "OutArrPanelTrigger";
    this.InArrPanelTriggerId = "InArrPanelTrigger";

    this.StopsPanelStartsOpen = true;
    this.CarrierPanelStartsOpen = true;
    this.TimePanelStartsOpen = true;
    this.OutArrStartsOpen = false;
    this.InArrStartsOpen = false;
}

Avail.AirAvailDisplayConfig.registerClass("Avail.AirAvailDisplayConfig", Avail.AvailDisplayConfig, Sys.IDisposable);

// Notify ScriptManager that this is the end of the script.
if (typeof (Sys) !== "undefined") Sys.Application.notifyScriptLoaded();
//END Trisept.UI.Web.Availability.AirAvailDisplayConfig.js
//START Trisept.UI.Web.Availability.AirAvailSet.js
Type.registerNamespace("Avail");

Avail.AirAvailSet = function (airItems, stopsOptionCollection, carrierOptionCollection, outboundDepartureOptionCollection, outboundArrivalOptionCollection, inboundDepartureOptionCollection, inboundArrivalOptionCollection, stopsAndCarrierOptionCollection) {

    Avail.AirAvailSet.initializeBase(this, [airItems]);

    //NOTE: If adding properties to AirAvailSet, modify AirAvailDisplay._CloneAvailSet() accordingly
    this.StopsOptionCollection = stopsOptionCollection;
    this.CarrierOptionCollection = carrierOptionCollection;
    this.OutboundDepartureOptionCollection = outboundDepartureOptionCollection;
    this.OutboundArrivalOptionCollection = outboundArrivalOptionCollection;
    this.InboundDepartureOptionCollection = inboundDepartureOptionCollection;
    this.InboundArrivalOptionCollection = inboundArrivalOptionCollection;
    this.StopsAndCarrierOptionCollection = stopsAndCarrierOptionCollection;
}

Avail.AirAvailSet.prototype = {

    //=== General ===


    //=== Filtering ===

    //Filter items where any segment matches flight num
    FilterByFlightNumber: function (number) {
        if (number != null && number.length > 0) {
            for (var i = 0; i < this.Items.length; i++) {
                var item = this.Items[i];
                item.ValidForFlightNumber = false;

                for (var j = 0; j < item.FlightNumbers.length; j++) {
                    if (item.FlightNumbers[j].toUpperCase() == number.toUpperCase()) {
                        item.ValidForFlightNumber = true;
                        break;
                    }
                }
            }
        }
        else {
            //No text entered means all items are valid
            for (var i = 0; i < this.Items.length; i++) {
                this.Items[i].ValidForFlightNumber = true;
            }
        }
    },

    ToggleStopsFilterOption: function (optionId) {
        this.StopsOptionCollection.GetOptionById(optionId).ToggleSelected();
        this._UpdateStopsFilterOption(optionId);
    },

    SetStopsFilterOption: function (optionId, isSelected) {
        this.StopsOptionCollection.GetOptionById(optionId).SetSelected(isSelected);
        this._UpdateStopsFilterOption(optionId);
    },

    _UpdateStopsFilterOption: function (optionId) {
        var selectedOptions = this.StopsOptionCollection.GetSelected();

        //Filter out items not matching a selected stops option
        for (var i = 0; i < this.Items.length; i++) {
            var item = this.Items[i];
            item.ValidForStops = false;

            if (selectedOptions.length > 0) {
                var itemSelected = false;

                for (var j = 0; j < selectedOptions.length && itemSelected == false; j++) {
                    var selectedOption = selectedOptions[j];

                    if (selectedOption.MatchesAirItem(item)) {
                        item.ValidForStops = true;
                        itemSelected = true;
                    }
                }
            }
            else {
                //No filters means show all items
                item.ValidForStops = true;
            }
        }
    },

    //Whether any currently valid items actually match specifically for the given stops option.  Useful for 'OR'-type option count predictions when one option is
    //already selected because there must be at least one valid item matching the option (not just other items that match because multiple selections are made).
    HasValidItemsForStops: function (optionId) {
        var currentOption = this.StopsOptionCollection.GetOptionById(optionId);
        var validItems = this.ValidItems();

        for (var i = 0; i < validItems.length; i++) {
            if (currentOption.MatchesAirItem(validItems[i])) {
                return true;
            }
        }
        return false;
    },

    ToggleCarrierFilterOption: function (optionId) {
        this.CarrierOptionCollection.GetOptionById(optionId).ToggleSelected();
        this._UpdateCarrierFilterOption(optionId);
    },

    SetCarrierFilterOption: function (optionId, isSelected) {
        this.CarrierOptionCollection.GetOptionById(optionId).SetSelected(isSelected);
        this._UpdateCarrierFilterOption(optionId);
    },

    _UpdateCarrierFilterOption: function (optionId) {
        var selectedOptions = this.CarrierOptionCollection.GetSelected();

        //Filter out items not matching a selected carrier
        for (var i = 0; i < this.Items.length; i++) {
            var item = this.Items[i];
            item.ValidForCarrier = false;

            if (selectedOptions.length > 0) {
                var itemSelected = false;

                for (var j = 0; j < selectedOptions.length && itemSelected == false; j++) {
                    var selectedOption = selectedOptions[j];

                    if (selectedOption.OptionId == item.CarrierId) {
                        item.ValidForCarrier = true;
                        itemSelected = true;
                    }
                }
            }
            else {
                //No filters means show all items
                item.ValidForCarrier = true;
            }
        }
    },

    //Whether any currently valid items actually match specifically for the given carrier.  Useful for 'OR'-type option count predictions when one option is
    //already selected because there must be at least one valid item matching the option (not just other items that match because multiple selections are made).
    HasValidItemsForCarrier: function (optionId) {
        var currentOption = this.CarrierOptionCollection.GetOptionById(optionId);
        var validItems = this.ValidItems();

        for (var i = 0; i < validItems.length; i++) {
            if (currentOption.OptionId == validItems[i].CarrierId) {
                return true;
            }
        }
        return false;
    },

    ToggleOutboundDepartureFilterOption: function (optionId) {
        this.OutboundDepartureOptionCollection.GetOptionById(optionId).ToggleSelected();
        this._UpdateOutboundDepartureFilterOption(optionId);
    },

    SetOutboundDepartureFilterOption: function (optionId, isSelected) {
        this.OutboundDepartureOptionCollection.GetOptionById(optionId).SetSelected(isSelected);
        this._UpdateOutboundDepartureFilterOption(optionId);
    },

    _UpdateOutboundDepartureFilterOption: function (optionId) {
        var selectedOptions = this.OutboundDepartureOptionCollection.GetSelected();

        //Filter out items not matching a selected outbound departure option
        for (var i = 0; i < this.Items.length; i++) {
            var item = this.Items[i];
            item.ValidForOutboundDeparture = false;

            if (selectedOptions.length > 0) {
                var itemSelected = false;

                for (var j = 0; j < selectedOptions.length && itemSelected == false; j++) {
                    var selectedOption = selectedOptions[j];

                    if (selectedOption.MatchesTime(item.OutboundDeparture)) {
                        item.ValidForOutboundDeparture = true;
                        itemSelected = true;
                    }
                }
            }
            else {
                //No filters means show all items
                item.ValidForOutboundDeparture = true;
            }
        }
    },

    //Whether any currently valid items actually match specifically for the given outbound departure option.  Useful for 'OR'-type option count predictions when one option is
    //already selected because there must be at least one valid item matching the option (not just other items that match because multiple selections are made).
    HasValidItemsForOutboundDeparture: function (optionId) {
        var currentOption = this.OutboundDepartureOptionCollection.GetOptionById(optionId);
        var validItems = this.ValidItems();

        for (var i = 0; i < validItems.length; i++) {
            if (currentOption.MatchesTime(validItems[i].OutboundDeparture)) {
                return true;
            }
        }
        return false;
    },

    ToggleOutboundArrivalFilterOption: function (optionId) {
        this.OutboundArrivalOptionCollection.GetOptionById(optionId).ToggleSelected();
        this._UpdateOutboundArrivalFilterOption(optionId);
    },

    SetOutboundArrivalFilterOption: function (optionId, isSelected) {
        this.OutboundArrivalOptionCollection.GetOptionById(optionId).ToggleSelected(isSelected);
        this._UpdateOutboundArrivalFilterOption(optionId);
    },

    _UpdateOutboundArrivalFilterOption: function (optionId) {
        var selectedOptions = this.OutboundArrivalOptionCollection.GetSelected();

        //Filter out items not matching a selected outbound arrival option
        for (var i = 0; i < this.Items.length; i++) {
            var item = this.Items[i];
            item.ValidForOutboundArrival = false;

            if (selectedOptions.length > 0) {
                var itemSelected = false;

                for (var j = 0; j < selectedOptions.length && itemSelected == false; j++) {
                    var selectedOption = selectedOptions[j];

                    if (selectedOption.MatchesTime(item.OutboundArrival)) {
                        item.ValidForOutboundArrival = true;
                        itemSelected = true;
                    }
                }
            }
            else {
                //No filters means show all items
                item.ValidForOutboundArrival = true;
            }
        }
    },

    //Whether any currently valid items actually match specifically for the given outbound arrival option.  Useful for 'OR'-type option count predictions when one option is
    //already selected because there must be at least one valid item matching the option (not just other items that match because multiple selections are made).
    HasValidItemsForOutboundArrival: function (optionId) {
        var currentOption = this.OutboundArrivalOptionCollection.GetOptionById(optionId);
        var validItems = this.ValidItems();

        for (var i = 0; i < validItems.length; i++) {
            if (currentOption.MatchesTime(validItems[i].OutboundArrival)) {
                return true;
            }
        }
        return false;
    },

    ToggleInboundDepartureFilterOption: function (optionId) {
        this.InboundDepartureOptionCollection.GetOptionById(optionId).ToggleSelected();
        this._UpdateInboundDepartureFilterOption(optionId);
    },

    SetInboundDepartureFilterOption: function (optionId, isSelected) {
        this.InboundDepartureOptionCollection.GetOptionById(optionId).SetSelected(isSelected);
        this._UpdateInboundDepartureFilterOption(optionId);
    },

    _UpdateInboundDepartureFilterOption: function (optionId) {
        var selectedOptions = this.InboundDepartureOptionCollection.GetSelected();

        //Filter out items not matching a selected outbound departure option
        for (var i = 0; i < this.Items.length; i++) {
            var item = this.Items[i];
            item.ValidForInboundDeparture = false;

            if (selectedOptions.length > 0) {
                var itemSelected = false;

                for (var j = 0; j < selectedOptions.length && itemSelected == false; j++) {
                    var selectedOption = selectedOptions[j];

                    if (selectedOption.MatchesTime(item.InboundDeparture)) {
                        item.ValidForInboundDeparture = true;
                        itemSelected = true;
                    }
                }
            }
            else {
                //No filters means show all items
                item.ValidForInboundDeparture = true;
            }
        }
    },

    //Whether any currently valid items actually match specifically for the given inbound departure option.  Useful for 'OR'-type option count predictions when one option is
    //already selected because there must be at least one valid item matching the option (not just other items that match because multiple selections are made).
    HasValidItemsForInboundDeparture: function (optionId) {
        var currentOption = this.InboundDepartureOptionCollection.GetOptionById(optionId);
        var validItems = this.ValidItems();

        for (var i = 0; i < validItems.length; i++) {
            if (currentOption.MatchesTime(validItems[i].InboundDeparture)) {
                return true;
            }
        }
        return false;
    },

    ToggleInboundArrivalFilterOption: function (optionId) {
        this.InboundArrivalOptionCollection.GetOptionById(optionId).ToggleSelected();
        this._UpdateInboundArrivalFilterOption(optionId);
    },

    SetInboundArrivalFilterOption: function (optionId, isSelected) {
        this.InboundArrivalOptionCollection.GetOptionById(optionId).SetSelected(isSelected);
        this._UpdateInboundArrivalFilterOption(optionId);
    },

    _UpdateInboundArrivalFilterOption: function (optionId) {
        var selectedOptions = this.InboundArrivalOptionCollection.GetSelected();

        //Filter out items not matching a selected outbound departure option
        for (var i = 0; i < this.Items.length; i++) {
            var item = this.Items[i];
            item.ValidForInboundArrival = false;

            if (selectedOptions.length > 0) {
                var itemSelected = false;

                for (var j = 0; j < selectedOptions.length && itemSelected == false; j++) {
                    var selectedOption = selectedOptions[j];

                    if (selectedOption.MatchesTime(item.InboundArrival)) {
                        item.ValidForInboundArrival = true;
                        itemSelected = true;
                    }
                }
            }
            else {
                //No filters means show all items
                item.ValidForInboundArrival = true;
            }
        }
    },

    //Whether any currently valid items actually match specifically for the given inbound arrival option.  Useful for 'OR'-type option count predictions when one option is
    //already selected because there must be at least one valid item matching the option (not just other items that match because multiple selections are made).
    HasValidItemsForInboundArrival: function (optionId) {
        var currentOption = this.InboundArrivalOptionCollection.GetOptionById(optionId);
        var validItems = this.ValidItems();

        for (var i = 0; i < validItems.length; i++) {
            if (currentOption.MatchesTime(validItems[i].InboundArrival)) {
                return true;
            }
        }
        return false;
    },

    SetBasicEconomyFilter: function (isFiltered) {

        //Filter out items not matching current filter status
        for (var i = 0; i < this.Items.length; i++) {
            var item = this.Items[i];

            //Update each fare option
            for (var j = 0; j < item.FareOptions.length; j++) {
                var fareOption = item.FareOptions[j];

                if (isFiltered == true && fareOption.IsBasicEconomy == true) {
                    fareOption.ValidForBasicEconomy = false;
                }
                else {
                    fareOption.ValidForBasicEconomy = true;
                }
            }

            //Update overall low price
            item.UpdatePricePerSubItems();

            //Only invalid overall if filter is ON and ALL fares are basic econ
            item.ValidForBasicEconomy = true;
            if (isFiltered == true && item.HasOnlyBasicEconomyOptions() == true) {
                item.ValidForBasicEconomy = false;
            }
        }
    },

    //Whether any of this avail set's filter options are being used
    AnyFilterOptionsActive: function () {
        if (Avail.AvailSet.prototype.AnyFilterOptionsActive.call(this) == true ||
                (this.StopsOptionCollection != null && this.StopsOptionCollection.GetSelected().length > 0) ||
                (this.CarrierOptionCollection != null && this.CarrierOptionCollection.GetSelected().length > 0) ||
                (this.OutboundDepartureOptionCollection != null && this.OutboundDepartureOptionCollection.GetSelected().length > 0) ||
                (this.OutboundArrivalOptionCollection != null && this.OutboundArrivalOptionCollection.GetSelected().length > 0) ||
                (this.InboundDepartureOptionCollection != null && this.InboundDepartureOptionCollection.GetSelected().length > 0) ||
                (this.InboundArrivalOptionCollection != null && this.InboundArrivalOptionCollection.GetSelected().length > 0)
        ) {
            return true;
        }
        else {
            return false;
        }
    },

    //Whether any of the matrix-specific air filter options are being used
    AnyMatrixFilterOptionsActive: function () {
        if ((this.StopsOptionCollection != null && this.StopsOptionCollection.GetSelected().length > 0) ||
            (this.CarrierOptionCollection != null && this.CarrierOptionCollection.GetSelected().length > 0)
        ) {
            return true;
        }
        else {
            return false;
        }
    },

    //Whether any of the main-specific (i.e. gutter-specific) air filter options are being used
    AnyMainFilterOptionsActive: function () {
        if (Avail.AvailSet.prototype.AnyMainFilterOptionsActive.call(this) == true ||
                (this.OutboundDepartureOptionCollection != null && this.OutboundDepartureOptionCollection.GetSelected().length > 0) ||
                (this.OutboundArrivalOptionCollection != null && this.OutboundArrivalOptionCollection.GetSelected().length > 0) ||
                (this.InboundDepartureOptionCollection != null && this.InboundDepartureOptionCollection.GetSelected().length > 0) ||
                (this.InboundArrivalOptionCollection != null && this.InboundArrivalOptionCollection.GetSelected().length > 0)
        ) {
            return true;
        }
        else {
            return false;
        }
    },

    //Reset specified air filters to default state
    ClearSpecifiedFilters: function (resetPrice, resetName, resetStops, resetCarrier, resetOutboundDeparture, resetOutboundArrival, resetInboundDeparture, resetInboundArrival, resetFlightNumber, resetBasicEconomy) {
        for (var i = 0; i < this.Items.length; i++) {
            var item = this.Items[i];
            item.ResetSpecifiedFilterFlags(resetPrice, resetName, resetStops, resetCarrier, resetOutboundDeparture, resetOutboundArrival, resetInboundDeparture, resetInboundArrival, resetFlightNumber, resetBasicEconomy);
        }

        this._ResetSpecifiedFilterOptions(resetStops, resetCarrier, resetOutboundDeparture, resetOutboundArrival, resetInboundDeparture, resetInboundArrival);
    },

    //Reset all filter options to initial state
    _ResetAllFilterOptions: function () {
        Avail.AvailSet.prototype._ResetAllFilterOptions.call(this);

        if (this.StopsOptionCollection != null) {
            this.StopsOptionCollection.ClearSelections();
        }
        if (this.CarrierOptionCollection != null) {
            this.CarrierOptionCollection.ClearSelections();
        }
        if (this.OutboundDepartureOptionCollection != null) {
            this.OutboundDepartureOptionCollection.ClearSelections();
        }
        if (this.OutboundArrivalOptionCollection != null) {
            this.OutboundArrivalOptionCollection.ClearSelections();
        }
        if (this.InboundDepartureOptionCollection != null) {
            this.InboundDepartureOptionCollection.ClearSelections();
        }
        if (this.InboundArrivalOptionCollection != null) {
            this.InboundArrivalOptionCollection.ClearSelections();
        }
        if (this.StopsAndCarrierOptionCollection != null) {
            this.StopsAndCarrierOptionCollection.ClearSelections();
        }
    },

    //Reset specified filter options to initial state
    _ResetSpecifiedFilterOptions: function (resetStops, resetCarrier, resetOutboundDeparture, resetOutboundArrival, resetInboundDeparture, resetInboundArrival) {
        Avail.AvailSet.prototype._ResetSpecifiedFilterOptions.call(this);

        if (resetStops == true) {
            if (this.StopsOptionCollection != null) {
                this.StopsOptionCollection.ClearSelections();
            }
        }
        if (resetCarrier == true) {
            if (this.CarrierOptionCollection != null) {
                this.CarrierOptionCollection.ClearSelections();
            }
        }
        if (resetOutboundDeparture == true) {
            if (this.OutboundDepartureOptionCollection != null) {
                this.OutboundDepartureOptionCollection.ClearSelections();
            }
        }
        if (resetOutboundArrival == true) {
            if (this.OutboundArrivalOptionCollection != null) {
                this.OutboundArrivalOptionCollection.ClearSelections();
            }
        }
        if (resetInboundDeparture == true) {
            if (this.InboundDepartureOptionCollection != null) {
                this.InboundDepartureOptionCollection.ClearSelections();
            }
        }
        if (resetInboundArrival == true) {
            if (this.InboundArrivalOptionCollection != null) {
                this.InboundArrivalOptionCollection.ClearSelections();
            }
        }

        if (resetStops == true || resetCarrier == true) {
            if (this.StopsAndCarrierOptionCollection != null) {
                this.StopsAndCarrierOptionCollection.ClearSelections();
            }
        }
    }

}

Avail.AirAvailSet.registerClass("Avail.AirAvailSet", Avail.AvailSet, Sys.IDisposable);

// Notify ScriptManager that this is the end of the script.
if (typeof (Sys) !== "undefined") Sys.Application.notifyScriptLoaded();
//END Trisept.UI.Web.Availability.AirAvailSet.js
//START Trisept.UI.Web.Availability.AirItem.js
Type.registerNamespace("Avail");

Avail.AirItem = function (tileId, sequence, itemId, price, name, preferredRanking, carrierId, stops, duration, outboundDeparture, outboundArrival, inboundDeparture, inboundArrival, flightNumbers, fareOptions) {
    Avail.AirItem.initializeBase(this, [tileId, sequence, itemId, price, name, preferredRanking]);

    this.CarrierId = carrierId;
    this.Stops = stops;
    this.Duration = duration;
    this.OutboundDeparture = outboundDeparture;
    this.OutboundArrival = outboundArrival;
    this.InboundDeparture = inboundDeparture;
    this.InboundArrival = inboundArrival;
    this.FlightNumbers = flightNumbers || [];   //Optional
    this.FareOptions = fareOptions || []; //Optional

    //Filter variables.  If adding one, modify IsValid(), ResetAllFilterFlags() and ResetSpecifiedFilterFlags() accordingly.
    this.ValidForStops = true;
    this.ValidForCarrier = true;
    this.ValidForOutboundDeparture = true;
    this.ValidForOutboundArrival = true;
    this.ValidForInboundDeparture = true;
    this.ValidForInboundArrival = true;
    this.ValidForFlightNumber = true;
    this.ValidForBasicEconomy = true;
}

Avail.AirItem.prototype = {

    //Whether item is valid for currently applied filters
    IsValid: function () {
        if (Avail.Item.prototype.IsValid.call(this) == true && this._IsValidForSpecificFilters() == true) {
            return true;
        }
        else {
            return false;
        }
    },

    //Whether item is valid for currently applied air-specific filters
    _IsValidForSpecificFilters: function () {
        if (this.ValidForStops == true && this.ValidForCarrier == true && this.ValidForOutboundDeparture == true && this.ValidForOutboundArrival == true && this.ValidForInboundDeparture == true && this.ValidForInboundArrival == true && this.ValidForFlightNumber == true && this.ValidForBasicEconomy == true) {
            return true;
        }
        else {
            return false;
        }
    },

	//Whether item is valid for currently applied non-Basic Economy filters
	_IsValidForNonBEFilters: function () {
		if (Avail.Item.prototype.IsValid.call(this) == true && this.ValidForStops == true && this.ValidForCarrier == true && this.ValidForOutboundDeparture == true && this.ValidForOutboundArrival == true && this.ValidForInboundDeparture == true && this.ValidForInboundArrival == true && this.ValidForFlightNumber == true) {
            return true;
        }
        else {
            return false;
        }
	},

    //Reset all filter flags to initial state
    ResetAllFilterFlags: function () {
        Avail.Item.prototype.ResetAllFilterFlags.call(this);

        this.ValidForStops = true;
        this.ValidForCarrier = true;
        this.ValidForOutboundDeparture = true;
        this.ValidForOutboundArrival = true;
        this.ValidForInboundDeparture = true;
        this.ValidForInboundArrival = true;
        this.ValidForFlightNumber = true;
        this.ValidForBasicEconomy = true;

        this.ResetSpecifiedFareOptionFilterFlags(true);
    },

    //Reset specified filter flags to initial state
    ResetSpecifiedFilterFlags: function (resetPrice, resetName, resetStops, resetCarrier, resetOutboundDeparture, resetOutboundArrival, resetInboundDeparture, resetInboundArrival, resetFlightNumber, resetBasicEconomy) {
        Avail.Item.prototype.ResetSpecifiedFilterFlags.call(this, resetPrice, resetName);

        if (resetStops == true) {
            this.ValidForStops = true;
        }
        if (resetCarrier == true) {
            this.ValidForCarrier = true;
        }
        if (resetOutboundDeparture == true) {
            this.ValidForOutboundDeparture = true;
        }
        if (resetOutboundArrival == true) {
            this.ValidForOutboundArrival = true;
        }
        if (resetInboundDeparture == true) {
            this.ValidForInboundDeparture = true;
        }
        if (resetInboundArrival == true) {
            this.ValidForInboundArrival = true;
        }
        if (resetFlightNumber == true) {
            this.ValidForFlightNumber = true;
        }
        if (resetBasicEconomy == true) {
            this.ValidForBasicEconomy = true;
        }

        this.ResetSpecifiedFareOptionFilterFlags(resetBasicEconomy);
    },

    //Reset specified filter flags on fares to initial state
    ResetSpecifiedFareOptionFilterFlags: function (resetBasicEconomy) {
        for (var i = 0; i < this.FareOptions.length; i++) {
            if (resetBasicEconomy == true) {
                this.FareOptions[i].ValidForBasicEconomy = true;
            }
        }

        this.UpdatePricePerSubItems();
    },

    //Whether ALL fare options are basic econ
    HasOnlyBasicEconomyOptions: function () {
        for (var i = 0; i < this.FareOptions.length; i++) {
            if (this.FareOptions[i].IsBasicEconomy == false) {
                return false;
            }
        }
        return true;
    },

    //Make low price reflect valid sub-items
    UpdatePricePerSubItems: function () {
        if (this.FareOptions.length > 0) {
            this.Price = this._GetLowestValidSubItemPrice();
        }
    },

    //Get lowest price of any valid sub-item
    _GetLowestValidSubItemPrice: function () {
        var lowest = -1;
        for (var i = 0; i < this.FareOptions.length; i++) {
            var fareOption = this.FareOptions[i];
            if (fareOption.IsValid() && (lowest == -1 || fareOption.Price < lowest)) {
                lowest = fareOption.Price;
            }
        }
        return lowest;
    }
}

Avail.AirItem.registerClass("Avail.AirItem", Avail.Item, Sys.IDisposable);

// Notify ScriptManager that this is the end of the script.
if (typeof (Sys) !== "undefined") Sys.Application.notifyScriptLoaded();
//END Trisept.UI.Web.Availability.AirItem.js
//START Trisept.UI.Web.Availability.AirFareOption.js
Type.registerNamespace("Avail");

Avail.AirFareOption = function (elementId, isBasicEconomy, price) {
    this.ElementId = elementId;   //Client ID of corresponding element
    this.IsBasicEconomy = isBasicEconomy;
    this.Price = price;

    this.Element = $("#" + this.ElementId);

    //Filter variables.  If adding one, modify IsValid(), ResetAllFilterFlags() and ResetSpecifiedFilterFlags() accordingly.
    this.ValidForBasicEconomy = true;
}

Avail.AirFareOption.prototype = {

    //Whether item is valid for currently applied filters
    IsValid: function () {
        if (this.ValidForBasicEconomy == true) {
            return true;
        }
        else {
            return false;
        }
    },

    //Reset all filter flags to initial state
    ResetAllFilterFlags: function () {
        this.ValidForBasicEconomy = true;
    }
}

Avail.AirFareOption.registerClass("Avail.AirFareOption", null);

// Notify ScriptManager that this is the end of the script.
if (typeof (Sys) !== "undefined") Sys.Application.notifyScriptLoaded();
//END Trisept.UI.Web.Availability.AirFareOption.js
//START Trisept.UI.Web.Availability.AirStopsFilterOption.js
Type.registerNamespace("Avail");

Avail.AirStopsFilterOption = function (optionId, name, selectedByDefault, includeHigher) {
    Avail.AirStopsFilterOption.initializeBase(this, [optionId, name, selectedByDefault]);

    this.IncludeHigher = includeHigher; //Whether to include higher numbers of stops (e.g. "2+" given "2")
}

Avail.AirStopsFilterOption.prototype = {

    //Whether the given air item is valid for this number-of-stops filter option
    MatchesAirItem: function (airItem) {
        var itemMatches = false;

        if (this.IncludeHigher == true) {
            if (airItem.Stops >= this.OptionId) {
                itemMatches = true;
            }
        }
        else {
            if (airItem.Stops == this.OptionId) {
                itemMatches = true;
            }
        }

        return itemMatches;
    },

    //Overrides
    DisableInput: function () {
        Avail.CheckboxFilterOption.prototype.DisableInput.call(this);   //Base class disables checkbox

        //Also "disable" header matrix cell
        var targetCell = $("#" + availDisplay._matrixCellIdPrefix + this.OptionId + "-X");
        targetCell.find(".enabled").hide();
        targetCell.find(".disabled").show();
    },

    //Overrides
    EnableInput: function () {
        Avail.CheckboxFilterOption.prototype.EnableInput.call(this);   //Base class enables checkbox

        //Also "enable" header matrix cell
        var targetCell = $("#" + availDisplay._matrixCellIdPrefix + this.OptionId + "-X");
        targetCell.find(".disabled").hide();
        targetCell.find(".enabled").show();
    }

}

Avail.AirStopsFilterOption.registerClass("Avail.AirStopsFilterOption", Avail.CheckboxFilterOption, Sys.IDisposable);

// Notify ScriptManager that this is the end of the script.
if (typeof (Sys) !== "undefined") Sys.Application.notifyScriptLoaded();
//END Trisept.UI.Web.Availability.AirStopsFilterOption.js
//START Trisept.UI.Web.Availability.AirCarrierFilterOption.js
Type.registerNamespace("Avail");

Avail.AirCarrierFilterOption = function (optionId, name, selectedByDefault) {
    Avail.AirCarrierFilterOption.initializeBase(this, [optionId, name, selectedByDefault]);
}

Avail.AirCarrierFilterOption.prototype = {

    //Overrides
    DisableInput: function () {
        Avail.CheckboxFilterOption.prototype.DisableInput.call(this);   //Base class disables checkbox

        //Also "disable" header matrix cell
        var targetCell = $("#" + availDisplay._matrixCellIdPrefix + "X-" + this.OptionId);
        targetCell.find(".enabled").hide();
        targetCell.find(".disabled").show();
    },

    //Overrides
    EnableInput: function () {
        Avail.CheckboxFilterOption.prototype.EnableInput.call(this);   //Base class enables checkbox

        //Also "enable" header matrix cell
        var targetCell = $("#" + availDisplay._matrixCellIdPrefix + "X-" + this.OptionId);
        targetCell.find(".disabled").hide();
        targetCell.find(".enabled").show();
    }

}

Avail.AirCarrierFilterOption.registerClass("Avail.AirCarrierFilterOption", Avail.CheckboxFilterOption, Sys.IDisposable);

// Notify ScriptManager that this is the end of the script.
if (typeof (Sys) !== "undefined") Sys.Application.notifyScriptLoaded();
//END Trisept.UI.Web.Availability.AirCarrierFilterOption.js
//START Trisept.UI.Web.Availability.AirTimeFilterOption.js
Type.registerNamespace("Avail");

Avail.AirTimeFilterOption = function (optionId, name, selectedByDefault, startTime, endTime) {
    Avail.AirTimeFilterOption.initializeBase(this, [optionId, name, selectedByDefault]);

    this.StartTime = startTime;
    this.EndTime = endTime;
}

Avail.AirTimeFilterOption.prototype = {

    //Whether the given time (probably for a specific air item) is valid for this time filter option
    MatchesTime: function (time) {
        var itemMatches = false;

        if (this.StartTime.getTime() > this.EndTime.getTime()) {
            //If time wraps past midnight, must check separately
            if (this.StartTime.getTime() <= time.getTime() || time.getTime() <= this.EndTime.getTime()) {
                itemMatches = true;
            }
        }
        else {
            if (this.StartTime.getTime() <= time.getTime() && time.getTime() <= this.EndTime.getTime()) {
                itemMatches = true;
            }
        }

        return itemMatches;
    }

}

Avail.AirTimeFilterOption.registerClass("Avail.AirTimeFilterOption", Avail.CheckboxFilterOption, Sys.IDisposable);

// Notify ScriptManager that this is the end of the script.
if (typeof (Sys) !== "undefined") Sys.Application.notifyScriptLoaded();
//END Trisept.UI.Web.Availability.AirTimeFilterOption.js
//START Trisept.UI.Web.Availability.AirStopsAndCarrierFilterOption.js
Type.registerNamespace("Avail");

//Represents an option that's a combination of an existing stops option and carrier option
Avail.AirStopsAndCarrierFilterOption = function (optionId, name, selectedByDefault, stopsOptionId, carrierOptionId) {
    Avail.AirStopsAndCarrierFilterOption.initializeBase(this, [optionId, name, selectedByDefault]);

    this.StopsOptionId = stopsOptionId;
    this.CarrierOptionId = carrierOptionId;
}

Avail.AirStopsAndCarrierFilterOption.prototype = {

    //Overrides - disable matrix cell
    DisableInput: function () {
        if (this.Input.length > 0) {
            this.Input.find(".enabled").css("visibility", "hidden");
        }
    },

    //Overrides - enable matrix cell
    EnableInput: function () {
        if (this.Input.length > 0) {
            this.Input.find(".enabled").css("visibility", "visible");
        }
    }

}

Avail.AirStopsAndCarrierFilterOption.registerClass("Avail.AirStopsAndCarrierFilterOption", Avail.FilterOption, Sys.IDisposable);

// Notify ScriptManager that this is the end of the script.
if (typeof (Sys) !== "undefined") Sys.Application.notifyScriptLoaded();
//END Trisept.UI.Web.Availability.AirStopsAndCarrierFilterOption.js
//START Trisept.UI.Web.Availability.air2.js
Type.registerNamespace("Avail");

Avail.AddAirItem = function (itin, item, ln, af) {
    PostCartModifiedMessage(itin);
    Trisept.UI.Web.Availability.Components.AvailabilityAddItemComponent.AddAirItem(itin, item, ln, af, window["OnCompleteAddItem" + af]);
}

function UpdateDisplayForAirUpsell(itemId, legNumber) {
    if (typeof (hideAllModals) === "function") { hideAllModals(); }
    if (typeof (showAvailWait) === "function") { showAvailWait(); }
    var itemIndex = 0
    for (i = 0; i < availDisplay.Items().length; i++) {
        if(availDisplay.Items()[i].ItemId == itemId)
        {
            availDisplay.Items()[i].SetSelected(true);
            itemIndex = i;
        }
        else
        {
            availDisplay.Items()[i].SetSelected(false);
        }
    }
    availDisplay.Items()[itemIndex].ItemId = itemId;
    AvailabilityScriptStrings.TotalPrice = availDisplay.Items()[itemIndex].Price;
    Trisept.UI.Web.Availability.Components.AvailabilityAddItemComponent.DetermineNextComponent("A", AvailabilityScriptStrings.Itin, legNumber, -1, AvailabilityScriptStrings.AvailFlow, window["OnCompleteAddItem" + AvailabilityScriptStrings.AvailFlow]);
}

function UpdateDisplayForAirItemSelectionChange(itemGroupIndex, itemIndex, groupItemCount) {
    var itemInfoId = "AirItemSelectionInfo_"
    for (i = 0; i < groupItemCount; i++) {
        if (itemIndex != i) {
            document.getElementById(itemInfoId + itemGroupIndex + "_" + i).style.display = 'none';
        }
    }
    document.getElementById(itemInfoId + itemGroupIndex + "_" + itemIndex).style.display = 'block';
}

function ShowAirUpsellWait() {
    if (typeof(StartWaitScreenRotator) === 'function') {
        StartWaitScreenRotator();
    }
    showModal("AirUpsellWaitScreen", "modalWaitScreenPopup", 3, -1, -1, "", 600, 400, '', false, '', true);
} 


// Notify ScriptManager that this is the end of the script.
if (typeof(Sys) !== "undefined") Sys.Application.notifyScriptLoaded();
//END Trisept.UI.Web.Availability.air2.js
//START Trisept.UI.Web.Availability.AirFareLoader.js
Type.registerNamespace("Avail");

function AirFareLoader() {
    var _asyncLoadPage;
    var _itinSequence;
    var _legNumber;
    var _sourceFaresId;
    var _targetFaresIdPrefix;
    var _faresDisplayIdPrefix;
    var _expandFaresTriggerIdPrefix;
    var _airAreaIdPrefix;
    var _expandedTriggerText;
    var _collapsedTriggerText;
    var _expandedTriggerAriaLabel;
    var _collapsedTriggerAriaLabel;
    var _waitIndicatorId;
    var _loadedAirItems = [];

    function prepareForFareLoad(groupIndex) {
        $("#" + _waitIndicatorId).show();
        $("#" + _expandFaresTriggerIdPrefix + groupIndex).hide();
    }

    function loadFares(groupId, groupIndex, clickableCard) {
        var url = _asyncLoadPage + "?itin=" + _itinSequence + "&leg=" + _legNumber + "&groupId=" + encodeURIComponent(groupId) + "&groupIndex=" + groupIndex;
        $.ajax({
            type: "GET",
            url: url,
            cache: false
        }).done(function (html) {
            completeFareLoad(html, groupIndex, clickableCard);
        });
    }

    function completeFareLoad(html, groupIndex, clickableCard) {
        //Insert html and mark as loaded
        var fareHtml = $(html).find('#' + _sourceFaresId).html();
        $('#' + _targetFaresIdPrefix + groupIndex).html(fareHtml);
        _loadedAirItems.push(groupIndex);

        //Show fares section; change to link
        $('#' + _faresDisplayIdPrefix + groupIndex).slideToggle("fast", function () {
            moveAirItemToTop(groupIndex, clickableCard);
        });
        $("#" + _expandFaresTriggerIdPrefix + groupIndex)
            .removeClass('button')
            .addClass('link')
            .attr('aria-label', _expandedTriggerAriaLabel)
            .attr('aria-expanded', true)
            .html(_expandedTriggerText)
            .show();
        $("#" + _expandFaresTriggerIdPrefix + groupIndex).focus();
        $("#" + _waitIndicatorId).hide();
        if (document.getElementById("discountLinks_" + groupIndex)) {
            document.getElementById("discountLinks_" + groupIndex).style.display = 'block';
            document.getElementById("discountText_" + groupIndex).style.display = 'none';
        }
    }
        
    function collapseAirItemFares(groupIndex) {
        //Hide fares section; change to button
        $('#' + _faresDisplayIdPrefix + groupIndex).slideToggle();
        $("#" + _expandFaresTriggerIdPrefix + groupIndex)
            .removeClass('link')
            .addClass('button')
            .attr('aria-label', _collapsedTriggerAriaLabel)
            .attr('aria-expanded', false)
            .html(_collapsedTriggerText);
        if (document.getElementById("discountLinks_" + groupIndex)) {
            document.getElementById("discountLinks_" + groupIndex).style.display = 'none';
            document.getElementById("discountText_" + groupIndex).style.display = 'block';
        }
    }
        
    function expandAirItemFares(groupIndex, clickableCard) {
       //Show fares section; change to link
        $('#' + _faresDisplayIdPrefix + groupIndex).slideToggle("fast", function () {
            moveAirItemToTop(groupIndex, clickableCard);
        });
        $("#" + _expandFaresTriggerIdPrefix + groupIndex)
            .removeClass('button')
            .addClass('link')
            .attr('aria-label', _expandedTriggerAriaLabel)
            .attr('aria-expanded', true)
            .html(_expandedTriggerText);
        if (document.getElementById("discountLinks_" + groupIndex)) {
            document.getElementById("discountLinks_" + groupIndex).style.display = 'block';
            document.getElementById("discountText_" + groupIndex).style.display = 'none';
        }
    }

    function toggleAirItemFares(groupId, groupIndex, skipLoad, clickableCard) {
        if (skipLoad == false && _loadedAirItems.indexOf(groupIndex) === -1) {
            prepareForFareLoad(groupIndex);
            loadFares(groupId, groupIndex, clickableCard);
        }
        else {
            if ($('#' + _faresDisplayIdPrefix + groupIndex).is(':visible')) {
                collapseAirItemFares(groupIndex);
            }
            else {
                expandAirItemFares(groupIndex, clickableCard);
            }
        }
    }

    function moveAirItemToTop(groupIndex, clickableCard) {
        var ratesArea = $('#' + _faresDisplayIdPrefix + groupIndex);
        var airArea = $('#' + _airAreaIdPrefix + groupIndex);
        if (IsElementInView(ratesArea.find(".button").first(), true) == false) {  //If first button offscreen...

            //If area will fit on screen...
            if (ratesArea.outerHeight() <= $(window).height()) {
                $('html, body').animate({scrollTop: ratesArea.offset().top - ($(window).height() - ratesArea.outerHeight() - 10)}, 'fast'); //Align bottom of rates with bottom
            }
            else {
                if (clickableCard == true) {
                    $('html, body').animate({ scrollTop: airArea.position().top }, 'fast'); //Align top of air item with top
                }
                else {
                    $('html, body').animate({ scrollTop: ratesArea.position().top }, 'fast'); //Align top of rates with top
                }
            }
        }
    }

    return {
        init: function (asyncLoadPage, itinSequence, legNumber, sourceFaresId, targetFaresIdPrefix, faresDisplayIdPrefix, expandFaresTriggerIdPrefix, airAreaIdPrefix, expandedTriggerText, collapsedTriggerText, expandedTriggerAriaLabel, collapsedTriggerAriaLabel, waitIndicatorId) {
            _asyncLoadPage = asyncLoadPage;
            _itinSequence = itinSequence;
            _legNumber = legNumber;
            _sourceFaresId = sourceFaresId;
            _targetFaresIdPrefix = targetFaresIdPrefix;
            _faresDisplayIdPrefix = faresDisplayIdPrefix;
            _expandFaresTriggerIdPrefix = expandFaresTriggerIdPrefix;
            _airAreaIdPrefix = airAreaIdPrefix;
            _expandedTriggerText = expandedTriggerText;
            _collapsedTriggerText = collapsedTriggerText;
            _expandedTriggerAriaLabel = expandedTriggerAriaLabel;
            _collapsedTriggerAriaLabel = collapsedTriggerAriaLabel;
            _waitIndicatorId = waitIndicatorId;
        },

        toggleFares: function (groupId, groupIndex, skipLoad, clickableCard) {
            toggleAirItemFares(groupId, groupIndex, skipLoad, clickableCard);
        }
    }
}

// Notify ScriptManager that this is the end of the script.
if (typeof(Sys) !== "undefined") Sys.Application.notifyScriptLoaded();
//END Trisept.UI.Web.Availability.AirFareLoader.js
//START Trisept.UI.Web.Availability.AirAvailStateManager.js
Type.registerNamespace("Avail");

//Manages user page state data for air (serialized data classes can't have methods)
Avail.AirAvailStateManager = function (cookieDomain, stopsPanelStartsOpen, carrierPanelStartsOpen, timePanelStartsOpen, outArrStartsOpen, inArrStartsOpen, basicEconomyStartsFiltered) {
    Avail.AirAvailStateManager.initializeBase(this, [cookieDomain]);

    this.StopsPanelStartsOpen = stopsPanelStartsOpen;
    this.CarrierPanelStartsOpen = carrierPanelStartsOpen;
    this.TimePanelStartsOpen = timePanelStartsOpen;
    this.OutArrStartsOpen = outArrStartsOpen;
    this.InArrStartsOpen = inArrStartsOpen;
    this.BasicEconomyStartsFiltered = basicEconomyStartsFiltered;

    this._currentLegNum = this._GetLegNumber();

    //Quick references to current data
    if (this._currentItinSequence != undefined) {
        if (this._currentLegNum == undefined) {
            this._currentLegNum = 1;
        }
        this.CurrentAirLeg = this.GetAirLeg(this._currentItinSequence, this._currentLegNum);
    }
}

Avail.AirAvailStateManager.prototype = {

    _GetLegNumber: function () {
        var result = null;
        var legParam = GetQueryStringParam("leg");
        if (legParam != null) {
            var legInt = parseInt(legParam);
            if (legInt != NaN) {
                result = legInt;
            }
        }
        return result;
    },

    //Get state for specified air leg.  Saves a new blank state if one doesn't exist.
    GetAirLeg: function (itinSeq, legNum) {
        var itin = this.GetItin(itinSeq)
        var airLegs = itin.AirLegs;
        for (var i = 0; i < airLegs.length; i++) {
            if (airLegs[i].StopNumber == legNum) {
                return airLegs[i];    //Existing
            }
        }

        //Create and retry
        itin.AirLegs.push(new Avail.AirLegState(legNum, this.StopsPanelStartsOpen, this.CarrierPanelStartsOpen, this.TimePanelStartsOpen, this.OutArrStartsOpen, this.InArrStartsOpen, this.BasicEconomyStartsFiltered));
        this.SaveState();
        return this.GetAirLeg(itinSeq, legNum);
    },

    GetPagingState: function () {
        return this.CurrentAirLeg.Paging;
    },

    GetSortingState: function () {
        return this.CurrentAirLeg.Sorting;
    },

    SetFlightNumberFilter: function (number) {
        this.CurrentAirLeg.Filters.Number = number;
        this.SaveState();
    },

    SetAirLowPriceFilter: function (price) {
        this.CurrentAirLeg.Filters.Price.Low = price;
        this.SaveState();
    },

    SetAirHighPriceFilter: function (price) {
        this.CurrentAirLeg.Filters.Price.High = price;
        this.SaveState();
    },

    ToggleAirStopsFilterOption: function (optionId) {
        this.ToggleMultiSelection(this.CurrentAirLeg.Filters.Stops, optionId);
        this.SaveState();
    },

    SetAirStopsPanelOpenState: function (isOpen) {
        this.CurrentAirLeg.Filters.Stops.Open = isOpen;
        this.SaveState();
    },

    ToggleAirCarrierFilterOption: function (optionId) {
        this.ToggleMultiSelection(this.CurrentAirLeg.Filters.Carriers, optionId);
        this.SaveState();
    },

    SetAirCarrierPanelOpenState: function (isOpen) {
        this.CurrentAirLeg.Filters.Carriers.Open = isOpen;
        this.SaveState();
    },

    ToggleAirOutboundDepartureFilterOption: function (optionId) {
        this.ToggleMultiSelection(this.CurrentAirLeg.Filters.OutDepTimes, optionId);
        this.SaveState();
    },

    ToggleAirOutboundArrivalFilterOption: function (optionId) {
        this.ToggleMultiSelection(this.CurrentAirLeg.Filters.OutArrTimes, optionId);
        this.SaveState();
    },

    SetAirOutboundArrivalPanelOpenState: function (isOpen) {
        this.CurrentAirLeg.Filters.OutArrTimes.Open = isOpen;
        this.SaveState();
    },

    ToggleAirInboundDepartureFilterOption: function (optionId) {
        this.ToggleMultiSelection(this.CurrentAirLeg.Filters.InDepTimes, optionId);
        this.SaveState();
    },

    ToggleAirInboundArrivalFilterOption: function (optionId) {
        this.ToggleMultiSelection(this.CurrentAirLeg.Filters.InArrTimes, optionId);
        this.SaveState();
    },

    SetAirInboundArrivalPanelOpenState: function (isOpen) {
        this.CurrentAirLeg.Filters.InArrTimes.Open = isOpen;
        this.SaveState();
    },

    SetAirTimePanelOpenState: function (isOpen) {
        this.CurrentAirLeg.Filters.TimeOpen = isOpen;
        this.SaveState();
    },

    SetBasicEconomyFilter: function (isFiltered) {
        this.CurrentAirLeg.Filters.BasicEcon = isFiltered;
        this.SaveState();
    },

    ClearAirLegFilters: function () {
        this._ClearStopFilters(this.CurrentAirLeg.Filters);

        this.CurrentAirLeg.Filters.Number = "";
        for (var i = 0; i < this.CurrentAirLeg.Filters.Stops.States.length; i++) {
            this.CurrentAirLeg.Filters.Stops.States[i].Selected = false;
        }
        for (var i = 0; i < this.CurrentAirLeg.Filters.Carriers.States.length; i++) {
            this.CurrentAirLeg.Filters.Carriers.States[i].Selected = false;
        }
        for (var i = 0; i < this.CurrentAirLeg.Filters.OutDepTimes.States.length; i++) {
            this.CurrentAirLeg.Filters.OutDepTimes.States[i].Selected = false;
        }
        for (var i = 0; i < this.CurrentAirLeg.Filters.OutArrTimes.States.length; i++) {
            this.CurrentAirLeg.Filters.OutArrTimes.States[i].Selected = false;
        }
        for (var i = 0; i < this.CurrentAirLeg.Filters.InDepTimes.States.length; i++) {
            this.CurrentAirLeg.Filters.InDepTimes.States[i].Selected = false;
        }
        for (var i = 0; i < this.CurrentAirLeg.Filters.InArrTimes.States.length; i++) {
            this.CurrentAirLeg.Filters.InArrTimes.States[i].Selected = false;
        }

        this.CurrentAirLeg.Filters.BasicEcon = this.BasicEconomyStartsFiltered;

        this.SaveState();
    },

    ClearSpecifiedAirLegFilters: function (price, number, stops, carrier, outboundDeparture, outboundArrival, inboundDeparture, inboundArrival, basicEconomy) {

        if (price == true) {
            this.CurrentAirLeg.Filters.Price.Low = -1;
            this.CurrentAirLeg.Filters.Price.High = -1;
        }
        if (number == true) {
            this.CurrentAirLeg.Filters.Number = "";
        }
        if (stops == true) {
            for (var i = 0; i < this.CurrentAirLeg.Filters.Stops.States.length; i++) {
                this.CurrentAirLeg.Filters.Stops.States[i].Selected = false;
            }
        }
        if (carrier == true) {
            for (var i = 0; i < this.CurrentAirLeg.Filters.Carriers.States.length; i++) {
                this.CurrentAirLeg.Filters.Carriers.States[i].Selected = false;
            }
        }
        if (outboundDeparture == true) {
            for (var i = 0; i < this.CurrentAirLeg.Filters.OutDepTimes.States.length; i++) {
                this.CurrentAirLeg.Filters.OutDepTimes.States[i].Selected = false;
            }
        }
        if (outboundArrival == true) {
            for (var i = 0; i < this.CurrentAirLeg.Filters.OutArrTimes.States.length; i++) {
                this.CurrentAirLeg.Filters.OutArrTimes.States[i].Selected = false;
            }
        }
        if (inboundDeparture == true) {
            for (var i = 0; i < this.CurrentAirLeg.Filters.InDepTimes.States.length; i++) {
                this.CurrentAirLeg.Filters.InDepTimes.States[i].Selected = false;
            }
        }
        if (inboundArrival == true) {
            for (var i = 0; i < this.CurrentAirLeg.Filters.InArrTimes.States.length; i++) {
                this.CurrentAirLeg.Filters.InArrTimes.States[i].Selected = false;
            }
        }
        if (basicEconomy == true) {
            this.CurrentAirLeg.Filters.BasicEcon = this.BasicEconomyStartsFiltered;
        }

        this.SaveState();
    },

    //Update user default setting (e.g. from popup where they can change it)
    UpdatePreFilterBasicEconomyFlag: function (startsFiltered) {
        this.BasicEconomyStartsFiltered = startsFiltered;
    },

}

Avail.AirAvailStateManager.registerClass("Avail.AirAvailStateManager", Avail.AvailStateManager, Sys.IDisposable);

if (typeof (Sys) !== "undefined") Sys.Application.notifyScriptLoaded();
//END Trisept.UI.Web.Availability.AirAvailStateManager.js
//START Trisept.UI.Web.Availability.AirLegState.js
Type.registerNamespace("Avail");

Avail.AirLegState = function (legNumber, stopsStartsOpen, carrierStartsOpen, timeStartsOpen, outArrStartsOpen, inArrStartsOpen, basicEconomyStartsFiltered) {
    Avail.AirLegState.initializeBase(this, [legNumber]);

    this.Filters = new Avail.AirLegFiltersState(stopsStartsOpen, carrierStartsOpen, timeStartsOpen, outArrStartsOpen, inArrStartsOpen, basicEconomyStartsFiltered);

    this.Sorting = new Avail.SortingState();
    this.Paging = new Avail.PagingState();
}
Avail.AirLegState.registerClass("Avail.AirLegState", Avail.StopState, Sys.IDisposable);

if (typeof (Sys) !== "undefined") Sys.Application.notifyScriptLoaded();
//END Trisept.UI.Web.Availability.AirLegState.js
//START Trisept.UI.Web.Availability.AirLegFiltersState.js
Type.registerNamespace("Avail");

Avail.AirLegFiltersState = function (stopsStartsOpen, carrierStartsOpen, timeStartsOpen, outArrStartsOpen, inArrStartsOpen, basicEconomyStartsFiltered) {
    Avail.AirLegFiltersState.initializeBase(this);

    this.Number = "";
    this.OutDepTimes = new Avail.MultiSelectFilterState();
    this.OutArrTimes = new Avail.MultiSelectFilterState(outArrStartsOpen);
    this.InDepTimes = new Avail.MultiSelectFilterState();
    this.InArrTimes = new Avail.MultiSelectFilterState(inArrStartsOpen);
    this.Carriers = new Avail.MultiSelectFilterState(carrierStartsOpen);
    this.Stops = new Avail.MultiSelectFilterState(stopsStartsOpen);

    this.TimeOpen = timeStartsOpen;

    this.BasicEcon = basicEconomyStartsFiltered;
}
Avail.AirLegFiltersState.registerClass("Avail.AirLegFiltersState", Avail.StopFiltersState, Sys.IDisposable);

if (typeof (Sys) !== "undefined") Sys.Application.notifyScriptLoaded();
//END Trisept.UI.Web.Availability.AirLegFiltersState.js
//START Trisept.UI.Web.Booking.CartNavMiniCart.js
function closeMiniCart() {
    $("#MiniCartToggle").click();
    $("#skip-to-content").focus();
}
//END Trisept.UI.Web.Booking.CartNavMiniCart.js
//START Trisept.UI.Web.Resources.Consumer.CSI.Search.RestoolClientSideErrorMessage.js
function A()
{
this.ValidOrigin=RestoolClientSideErrorMessage.ValidOrigin;
}
RestoolClientSideErrorMessage={
"strMoreThen":"cannot be greater than ","strPickUp":"Pick up ","PickupDtLessThanRetDt":"Pickup date should be less than return date","CheckinDtLessThanRetDt":"Checkin date should be less than return date","InvalidUPCCode":"The UPC code entered is not valid. Please enter a valid UPC code and try your search again.","strChkOut":"Check out ","RequiredPromoCodeErrorMessage":"Promotion code cannot be blank","DepartureDtLessThanRetDt":"Departure date should be less than return date","RequiredPickUpLocation":"No Pickup location available.","InvalidReferrerCodeErrorMessage":"Please enter a valid Referrer Code","strDropOff":"Drop off ","ReturnDtGreaterThanDepDt":"Return date should be greater than departure date","InvalidSourceCode":"Please enter a valid Source Code","DropoffDtLessThanRetDt":"Drop off date should be less than return date","PickupDtGreaterThanDepDt":"Pickup date should be greater than departure date","EnterUPCCode":"Please enter a UPC Code","CheckoutDtLessThanRetDt":"Checkout date should be less than return date","ExternalFormPostSubmitError":"Sorry, there was a problem with your search.  Please go back and try again.","InvalidCharactersInHotelName":"Resort Name contains invalid characters.","RequiredReferrerCode":"Please enter a Referrer Code","strToday":"Today\u0027s ","strChkIn":"Check in ","ValidDestination":"Please enter a valid Destination","CheckinDtGreaterThanDepDt":"Checkin date should be greater than departure date","RequiredDate":"Please enter a valid date format","ValidOrigin":"Please enter a valid Origin","CheckDate":"Please enter a valid date format","RequiredOrigin":"Please enter an Origin ","InvalidDateRange":"Please enter date between the range {0} to {1}","DropoffDtGreaterThanPiUpDt":"Drop off date should be greater than Pickup date","strLessThen":"cannot be less than ","CheckoutDtGreaterThanChkInDt":"Checkout date should be greater than Checkin date","RequiredSourceCode":"Please enter a Source Code","RequiredDestination":"Please enter a Destination ","RequiredPLCode":"Please enter a Private Label Code","InvalidSourceCodeErrorMessage":"Please enter a valid Source Code","InvalidPLCodeErrorMessage":"Please enter a valid Private Label Code","strDate":"date ","strDeparture":"Departure ","InvalidPromoCodeErrorMessage":"Please enter a valid Promo Code","DepartureDtGreaterThanTodayDt":"Departure date should be greater than today\u0027s date","strReturn":"Return "};
//END Trisept.UI.Web.Resources.Consumer.CSI.Search.RestoolClientSideErrorMessage.js
//START Trisept.UI.Web.Resources.Consumer.CSI.Shell.GlobalFormat.js
function GF()
{
this.FormatStandards = FormatStandards.DateFormat;
}
GlobalFormat={
"PastDateFormat":"d","LoyaltyVersion2Format":"#,#","priceFormatWholeNumber":"##,##0","priceFormat":"##,##0.00","DOBFormatLabel":"(MM/DD/YYYY)","LoyaltyPoints_priceFormat":"{0:n0}","DateFormat":"MM/dd/yyyy & MM/dd/yy & M/d/y & MM-dd-yyyy & MM-dd-yy & M-d-y & MM.dd.yyyy & MM.dd.yy & M.d.y & ddMMMyyyy & ddMMMyy & dMMMy & dd-MMM-yyyy & dd-MMM-yy & d-MMM-y & MMM d, yyyy & MMM d, yy & MMM d, y & dMMM & MMMd & d-MMM & MMM-d & yyyy-MM-dd & dd/MM/yy","SiteDateFormat":"d","ShowDateInUpperCase":"N"};
//END Trisept.UI.Web.Resources.Consumer.CSI.Shell.GlobalFormat.js
//START Trisept.UI.Web.Search.restool.js
var PrevDropOffLoc = "";
var PrevPickLoc = "";

function updateNearbyEntities() {
    var citycode = GetDestCityCode(rt.Des.value);
    if ((citycode != "") && (rt.Landmark.selectedIndex > 0)) {
        Trisept.UI.Web.Search.Components.Restool.RestoolConfigurationComponent.GetNearbyEntities(VenCode, PkgCode, citycode, rt.Landmark.selectedIndex, OnCompleteNearbyEntities, OnError);
    } else {
        if (rt.Landmark.selectedIndex == 0) {
            toggleLandmarkDropDown(0);
        } else {
            toggleLandmarkDropDown(1);
        }
        toggleNearbyEntitiesDropDown(1);
    }
}
function NearbyEntitiesTextChange() {
    if (rt.NearbyEntities != null) {
        rt.NearbyEntities.disabled = true;
        updateNearbyEntitiesTextChange();
    }

}
function updateNearbyEntitiesTextChange() {
    var citycode = GetDestCityCode(rt.Des.value);
    if ((citycode != "") && (rt.Landmark.selectedIndex > 0)) {
        Trisept.UI.Web.Search.Components.Restool.RestoolConfigurationComponent.GetNearbyEntities(VenCode, PkgCode, citycode, rt.Landmark.selectedIndex, OnCompleteNearbyEntities, OnError);
    } else {
        rt.NearbyEntities.options[0] = new Option("", "");
        toggleNearbyEntitiesDropDown(1);
    }
}

var hasNEBC = false;
var lspf;
function updateExternalNearbyEntities(vc, pc, dest) {
    if ((dest != "") && (hrr.NearbyEntities.length <= 1) && (!hasNEBC)) {
        hasNEBC = true;

        lspf = document.getElementById("landmarkSearchProgressField");
        if ((lspf != null) && (lspf != undefined)) { lspf.style.display = "block"; }
        Trisept.UI.Web.Search.Components.Restool.RestoolConfigurationComponent.GetNearbyEntities(vc, pc, dest, "", OnCompleteExternalNearbyEntities, OnError);
    } else {
        return;
    }
}

function enableRefineSearch(cont){var objCont=$get(cont);if (objCont!=null){objCont.disabled=false;}}

function valCity(val, c) {
    var val = val.toUpperCase();
    for (var i = 0; i < c.length; i++) {
        var city = c[i];
        if (((city.C == val) && (rt.isShortDescription != 1)) || (city.D.toUpperCase() == val) || (city.LD.toUpperCase() == val)) {
            return city;
        }
    }
    return null;
}


function resDateSelect(sender, value) {
    if (sender.arrCtrlsToUpdate != null) {
        var a = parseDateFormat(value.trim(), sender.DateFormat);

        for (var i = 0; i < sender.arrCtrlsToUpdate.length; i++) {
            if (sender.arrCtrlsToUpdate[i] != null) {
                sender.arrCtrlsToUpdate[i].value = siteDateFormat(a, sender.arrCtrlsToUpdate[i].DateFormat);
                if (rt.isReturnDateWatermark == 1) {
                    $.Watermark.SetColor(sender.arrCtrlsToUpdate[i].id, "");
                }
            }
        }
    }
    dateselectvalidations(sender);
    callvalidatorcallout(sender.arrCtrlsToUpdate);

}


function dateselectvalidations(trgt) {
    var validNumberOfNights = false;
    if (rt != null) {
        var a = parseVaxDate(trgt.value.trim());
        if (a != null) {
            if (rt.Length == null)
                rt.Length = 0;

            if (trgt.arrCtrlsToAddDayLength != null) {
                var dt = new Date(a);
                if (rt.NumberOfNights != null) {
                    if (IsValidNumberOfNights(rt.NumberOfNights.value) == true) {
                        rt.Length = parseInt(rt.NumberOfNights.value, 10);
                        validNumberOfNights = true;
                    }
                    else {
                        rt.Length = 0;
                    }
                }
                dt.setDate(a.getDate() + rt.Length);
                for (var i = 0; i < trgt.arrCtrlsToAddDayLength.length; i++) {
                    if (trgt.arrCtrlsToAddDayLength[i] != null) {
                        if (rt.NumberOfNights != null) {
                            if (rt.Length != 0) {
                                if (rt.isReturnDateWatermark == 1) {
                                } else {
                                    trgt.arrCtrlsToAddDayLength[i].value = siteDateFormat(dt, trgt.arrCtrlsToAddDayLength[i].DateFormat);
                                }
                                if (rt.Ret.id == trgt.arrCtrlsToAddDayLength[i].id)
                                    returnDateDayName(rt.Ret.value);
                            }
                        }
                        else {                            
                            if (rt.isReturnDateWatermark == 1) {
                            } else {
                                trgt.arrCtrlsToAddDayLength[i].value = siteDateFormat(dt, trgt.arrCtrlsToAddDayLength[i].DateFormat);
                            }
                            if (rt.Ret.id == trgt.arrCtrlsToAddDayLength[i].id)
                                returnDateDayName(rt.Ret.value);
                        }

                    }
                }
            }
        }

        if (rt.Dep != null)
            if (rt.Dep.id == trgt.id) {
            departureDateDayName(rt.Dep.value);
        }

        if (rt.Ret != null)
            if (rt.Ret.id == trgt.id) {
            returnDateDayName(rt.Ret.value);
            if (rt.NumberOfNights != null)
                updateNumberOfNights();
        }

    }
    
    if (rt.isReturnDateWatermark == null || rt.isReturnDateWatermark == 0) {
        if (rt.NumberOfNights != null) {
            if (validNumberOfNights) {
                callvalidatorcallout(trgt.arrCtrlsToAddDayLength);
            }
        }
        else {
            callvalidatorcallout(trgt.arrCtrlsToAddDayLength);
        }
    }

}

function callvalidatorcallout(ctrls) {
    if (ctrls == null)
        return;

    if (IsArray(ctrls)) {
        for (var i = 0; i < ctrls.length; i++) {
            if (ctrls[i] != null) {
                if (ctrls[i].Validators != null) {
                    if (ctrls[i].Validators.length > 0) {
                        var val = ctrls[i].Validators[0];
                        val.innerHTML = '';
                        val.evaluationfunction(val);
                    }
                }
            }
        }
    }
    else {
        if (ctrls.Validators != null) {
            if (ctrls.Validators.length > 0) {
                var val = ctrls.Validators[0];
                val.innerHTML = '';
                val.evaluationfunction(val);
            }
        }
    }
}

function IsArray(obj) {
    return !(obj.constructor.toString().indexOf('Array') == -1)
}

function updateNumberOfNights() {
    var nightsOut = getDateDiffDays(rt.Dep.value, rt.Ret.value);
    if (nightsOut > 0) {
        rt.NumberOfNights.value = nightsOut;
        rt.Length = parseInt(nightsOut, 10);

    }
    else {
        rt.NumberOfNights.value = "";
    }
}

function getDateDiffDays(firstDate, secondDate) {
    var date1 = parseVaxDate(firstDate);
    date1 = Date.UTC(date1.getFullYear(), date1.getMonth(), date1.getDate());
    var date2 = parseVaxDate(secondDate);
    date2 = Date.UTC(date2.getFullYear(), date2.getMonth(), date2.getDate());
    var difference = date2 - date1;
    return Math.floor(difference / 86400000); // number of milli seconds in a day
}


function departureDateDayName(depDateValue) {
    if (rt.departureDateDayNameLabel == null || depDateValue == null) return;
    var a = parseVaxDate(depDateValue);
    if (a != null) {
        rt.departureDateDayNameLabel.innerHTML = a.localeFormat("dddd");
    }
    else {
        rt.departureDateDayNameLabel.innerHTML = "";
    }
}

function returnDateDayName(retDateValue) {
    if (rt.returnDateDayNameLabel == null || retDateValue == null) return;
    var a = parseVaxDate(retDateValue);
    if (a != null) {
        rt.returnDateDayNameLabel.innerHTML = a.localeFormat("dddd");
    }
    else {
        rt.returnDateDayNameLabel.innerHTML = "";
    }
}

function ViewHoBrnds(href) {
    if (rt.HoBrnds != null) {
        OnCompleteHoBrnds(rt.HoBrnds, href);
    } else {
        // Trisept.TB.Vax.WebView.VaxAjax.GetHotelBrands(rt.Ven.value, OnCompleteHoBrnds, OnError, href);
    }
}
function ViewVehBrnds(href) {
    if (rt.VehBrnds != null) {
        OnCompleteVehBrnds(rt.VehBrnds, href);
    } else {
        // Trisept.TB.Vax.WebView.VaxAjax.GetVehicleBrands(rt.Ven.value, OnCompleteVehBrnds, OnError, href);
    }
}

function OnCompleteHoBrnds(args, href) {
    rt.HoBrnds = args;
    viewOptions(rt.HoBrnd, href, rt.HoBrnds)
}

function OnCompleteVehBrnds(args, href) {
    rt.VehBrnds = args;
    viewOptions(rt.VehBrnd, href, rt.VehBrnds)
}


function serviceWaitScreen() {
    if (rt.setWS > 0) {
        if ($get("smartSearchProgressField").style.display == "none") {
            $get("smartSearchProgressField").style.display = "block";
            var ariaUpdateProg = $("#AriaUpdateProgress");
            if (ariaUpdateProg.length > 0) {
                ariaUpdateProg.html(ariaUpdateProg.html());
            }
        }
    } else {
        if ($get("smartSearchProgressField").style.display == "block") {
            $get("smartSearchProgressField").style.display = "none";
        }
    }
}

function updateOrigins() {
    if (rt.Org != null) {
        GetVendorPackageCode();
        var cityCode = '';
        if (rt.Des != null) {
            if ((rt.Des.value != "") && (rt.DestIndex == -1)) {
                if (rt.isShortDescription == 0) {
                    cityCode = GetCityCode(rt.Des.value);
                }
            } else if ($('#' + rt.Des.id).data('defaultMarket')) {
                cityCode = GetCityCode($('#' + rt.Des.id).data('defaultMarket'));
            }
        }

        if (rt.DestIndex >= 0) {
            cityCode = rt.Dests[rt.DestIndex].C;
        }
        if (rt.isSupportOrgDestPairingOffered == 1) {
            rt.setWS = rt.setWS + 1;
            serviceWaitScreen()
        }

        var usrc = "O";
        if (cityCode == "" && rt.isShortDescription == 1)
            usrc = "OE";

        if (rt.filterOrgs != null) {
            filterOrgs = rt.filterOrgs;
        } else {
            filterOrgs = "";
        }

        var plc = rt.PLCode;

        if (rt.Orgs.length == 0 || rt.isSupportOrgDestPairingOffered == true) { //Only update if they might change
            Trisept.UI.Web.Search.Components.Restool.RestoolConfigurationComponent.GetOriginMarkets(VenCode, PkgCode, cityCode, filterOrgs, plc, OnCompleteOrgsAndDests, OnError, usrc);
        }
    }
}

function OnCompleteOrgsAndDests(args, usrc) {
    if (usrc == "O") {
        rt.Orgs = rt.OrgsDescConcat(args);
        UpdateComboBoxOrigins();
        if (typeof (ac1) != "undefined") {
            ac1.setKeywords(rt.Orgs);
        }
        rt.OrgIndex = valCityIndex(rt.Org.value, rt.Orgs);
    }
    else if (usrc == "D") {
        rt.Dests = rt.OrgsDescConcat(args);
        UpdateComboBoxDests();
        if (typeof (ac2) != "undefined") {
            ac2.setKeywords(rt.Dests);
        }
        rt.DestIndex = valCityIndex(rt.Des.value, rt.Dests);
    }
    else if (usrc == "OE") {
        rt.Orgs = rt.OrgsDescConcat(args);
        UpdateComboBoxOrigins();
        if (typeof (ac1) != "undefined") {
            ac1.setKeywords(rt.Orgs);
        }
    }
    else if (usrc == "DE") {
        rt.Dests = rt.OrgsDescConcat(args);
        UpdateComboBoxDests();
        if (typeof (ac2) != "undefined") {
            ac2.setKeywords(rt.Dests);
        }
    }
    else if (usrc == "OC") {        
        rt.COrgs = rt.CombineOrgs(args);
        rt.Orgs = rt.OrgsDescConcat(rt.COrgs);
        UpdateComboBoxOrigins();
        validateAllVendorPackageSelectedOrigin();
        if (typeof (ac1) != "undefined") {
            ac1.setKeywords(rt.Orgs);
        }
        rt.OrgIndex = valCityIndex(rt.Org.value, rt.Orgs);
    }
    else if (usrc == "OEC") {
        rt.COrgs = rt.CombineOrgs(args);
        rt.Orgs = rt.OrgsDescConcat(rt.COrgs);
        UpdateComboBoxOrigins();
        validateAllVendorPackageSelectedOrigin();
        if (typeof (ac1) != "undefined") {
            ac1.setKeywords(rt.Orgs);
        }
    }

    if (rt.isSupportOrgDestPairingOffered == 1) {
        rt.setWS = rt.setWS - 1;
        serviceWaitScreen()
    }

    if ((rt.isShortDescription == 1) && (rt.Org != null) && (rt.Des != null)) {
        if (rt.Orgs.length > 0 && rt.Dests.length > 0 && rt.Org.value.trim() == "" && rt.Des.value.trim() != "" && rt.DestIndex == -1) {
            rt.DestIndex = valCityIndex(rt.Des.value, rt.Dests);
            updateOrigins();

            updateLocation();
            //updateNearbyEntities();
            if ((rt.NearbyEntities != null) && (rt.Landmark != null) && (rt.NearbyEntities.disabled)) {
                updateNearbyEntities();
            }
            //updateNearbyEntitiesTextChange();
        }
        else if (rt.Org.value.trim() != "" && rt.Des.value.trim() == "" && rt.Orgs.length > 0 && rt.Dests.length > 0 && rt.OrgIndex == -1) {
            rt.OrgIndex = valCityIndex(rt.Org.value, rt.Orgs);
            updateDestinations();
        }
        else if (rt.Orgs.length > 0 && rt.Dests.length > 0) {
            if ((rt.Org.value != "") && (rt.Des.value != "") && (rt.OrgIndex == -1) && (rt.DestIndex == -1)) {
                rt.OrgIndex = valCityIndex(rt.Org.value, rt.Orgs);
                rt.DestIndex = valCityIndex(rt.Des.value, rt.Dests);
                if (rt.DestIndex >= 0) {
                    updateOrigins();
                    updateLocation();
                    if ((rt.NearbyEntities != null) && (rt.Landmark != null) && (rt.NearbyEntities.disabled)) {
                        updateNearbyEntities();
                    }
                    //updateNearbyEntitiesTextChange(); 
                }
                if (rt.OrgIndex >= 0) {
                    updateDestinations();
                }
            }
        }
    }
    setFarePreference();
}

//If origin combobox is present, refresh options based on current origins
function UpdateComboBoxOrigins() {
    if (rt.Org != null && typeof (UpdateComboBoxMarkets) == 'function') {
        var options = [];
        for (i = 0; i < rt.Orgs.length; i++) {
            var optionName = "";
            if (rt.isShortDescription == true) {
                optionName = rt.Orgs[i].D;
            }
            else {
                optionName = rt.Orgs[i].LD;
            }
            options.push({ "Code": rt.Orgs[i].C, "Name": optionName });
        }
        UpdateComboBoxMarkets(rt.Org.id, options);
    }
}

//If dest combobox is present, refresh options based on current dests
function UpdateComboBoxDests() {
    if (rt.Des != null && typeof (UpdateComboBoxMarkets) == 'function') {
        var options = [];
        for (i = 0; i < rt.Dests.length; i++) {
            var optionName = "";
            if (rt.isShortDescription == true) {
                optionName = rt.Dests[i].D;
            }
            else {
                optionName = rt.Dests[i].LD;
            }
            options.push({ "Code": rt.Dests[i].C, "Name": optionName });
        }
        UpdateComboBoxMarkets(rt.Des.id, options);
    }
}

//Display input for callout positioning, but keep as invisible as possible
function ShowComboRealInput(id) {
    var input = $('#' + id);
    if (input[0] != undefined && input[0].selectize != undefined) {
        input.css('height', '0');
        input.css('margin', '0');
        input.css('padding', '0');
        input.css('border', '0');
        input.css('visibility', 'hidden');
        input.show();
    }
}

function HideComboRealInput(id) {
    var input = $('#' + id);
    if (input[0] != undefined && input[0].selectize != undefined) {
        setTimeout(function () {
            input.hide();
        }, 1);
    }
}

function FocusComboRealInput(id) {
    if (comboBoxAutoFocused == false) {
        var input = $('#' + id);
        if (input[0] != undefined && input[0].selectize != undefined) {
            input[0].selectize.focus();
            comboBoxAutoFocused = true;
        }
    }
}

function setFarePreference() {
    if (rt.Org != null && rt.FarePreference != null) {
        if (rt.Org.value.trim() != "" && rt.Des.value.trim() != "") {
            if ((rt.Org.tagName === "SELECT") && (rt.Des.tagName === "SELECT")) {
                updateFarePreference();
            }
            else if ((rt.Org.tagName === "INPUT") && (rt.Org.type === "text") && (rt.Des.tagName === "SELECT")) {
                rt.OrgIndex = valCityIndex(rt.Org.value, rt.Orgs);
                if (rt.OrgIndex >= 0) {
                    updateFarePreference();
                } else { initializeFarePreference(); }
            }
            else {
                rt.OrgIndex = valCityIndex(rt.Org.value, rt.Orgs);
                rt.DestIndex = valCityIndex(rt.Des.value, rt.Dests);
                if (rt.OrgIndex >= 0 && rt.DestIndex >= 0) {
                    updateFarePreference();
                } else { initializeFarePreference(); }
            }
        } else { initializeFarePreference(); }
    }    
}

function updateDestinations() {
    if (rt.Des != null) {
        GetVendorPackageCode();
        var cityCode = '';
        if (rt.Org != null) {
            if ((rt.Org.value != "") && (rt.OrgIndex == -1)) {
                if (rt.isShortDescription == 0) {
                    cityCode = GetCityCode(rt.Org.value);
                }
            } else if ($('#' + rt.Org.id).data('defaultMarket')) {
                cityCode = GetCityCode($('#' + rt.Org.id).data('defaultMarket'));
            }
        }
        if (rt.OrgIndex >= 0) {
            cityCode = rt.Orgs[rt.OrgIndex].C;
        }
        if (rt.isSupportOrgDestPairingOffered == 1) {
            rt.setWS = rt.setWS + 1;
            serviceWaitScreen()
        }

        var usrc = "D";
        if (cityCode == "" && rt.isShortDescription == 1)
            usrc = "DE";

        var region = null;
        if ($get("__region") != null) {
            region = $get("__region").value;
        }

        var special = null;
        if ($get("__special") != null) {
            special = $get("__special").value;
        }
        var themes = null;
        if (typeof experientialThemes != 'undefined') {
            themes = experientialThemes
        }

        if (rt.filterDests != null) {
            filterDests = rt.filterDests;
        } else {
            filterDests = "";
        }

        var plc = rt.PLCode;

        if (rt.Dests.length == 0 || rt.isSupportOrgDestPairingOffered == true) { //Only update if they might change
            if (rt.isRegionsDisplay == 1) {
                Trisept.UI.Web.Search.Components.Restool.RestoolConfigurationComponent.GetDestinationWithRegionMarkets(VenCode, PkgCode, cityCode, region, themes, special, rt.filterDests, plc, OnCompleteOrgsAndDests, OnError, usrc);
            } else {
                Trisept.UI.Web.Search.Components.Restool.RestoolConfigurationComponent.GetDestinationMarkets(VenCode, PkgCode, cityCode, region, themes, special, rt.filterDests, plc, rt.supplierCode, OnCompleteOrgsAndDests, OnError, usrc);
            }
        }
    }
}

function initializeFarePreference() {
    if (rt.FarePreference != null) {
        if (!rt.FarePreference.disabled) {
            rt.FarePreference.disabled = true;
            rt.FarePreference.length = 0;
            rt.FarePreference.options[0] = new Option(FarePreference.FarePrefDefaultDescription, FarePreference.FarePrefDefaultCode);
        }
    }
}

function updateFarePreference() {
    if (rt.FarePreference != null) {
        GetVendorPackageCode();
        if ((rt.Org.tagName === "SELECT") && (rt.Des.tagName === "SELECT")) {
            Trisept.UI.Web.Search.Components.Restool.RestoolConfigurationComponent.GetFarePreference(VenCode, PkgCode, rt.Org.value, GetDestCityCode(rt.Des.value), rt.CabinPreference.value, OnCompleteFarePreferences, OnFareError);
        }
        else if ((rt.Org.tagName === "INPUT") && (rt.Org.type === "text") && (rt.Des.tagName === "SELECT")) {
            Trisept.UI.Web.Search.Components.Restool.RestoolConfigurationComponent.GetFarePreference(VenCode, PkgCode, rt.Orgs[rt.OrgIndex].C, GetDestCityCode(rt.Des.value), rt.CabinPreference.value, OnCompleteFarePreferences, OnFareError);
        }
        else 
        {
            Trisept.UI.Web.Search.Components.Restool.RestoolConfigurationComponent.GetFarePreference(VenCode, PkgCode, rt.Orgs[rt.OrgIndex].C, rt.Dests[rt.DestIndex].C, rt.CabinPreference.value, OnCompleteFarePreferences, OnFareError);
        }
    }
}

function OnCompleteFarePreferences(arg) {
    if (arg != null) {
        if (arg.length > 0) {
            rt.FarePreference.length = 0;
            rt.FarePreference.disabled = false;
            for (var i = 0; i < arg.length; i++) {
                rt.FarePreference.options[i] = new Option(arg[i].D, arg[i].C);
                if (rt.PrevFare != null) {
                    if (rt.PrevFare == arg[i].C) {
                        rt.FarePreference.options[i].selected = true;
                    }
                } 
            }
        }
    }
    if (window['ToggleAirSearchMode']) { ToggleAirSearchMode(); }
}

function OnFareError(arg) {
    initializeFarePreference();
}

function toggleLandmarkDropDown(value) {
    if (value == 0) {
        rt.NearbyEntities.length = 0;
        rt.Landmark.disabled = false;
    } else {
        rt.NearbyEntities.length = 0;
        rt.Landmark.selectedIndex = 0;
        rt.Landmark.disabled = true;
    }
}

function toggleNearbyEntitiesDropDown(value) {
    if (value == 0) {
        rt.NearbyEntities.disabled = false;
    } else {
        rt.NearbyEntities.selectedIndex = 0;
        rt.NearbyEntities.disabled = true;
    }
}

function updateLocation() {
    if (rt.VehBrnd != null) {
        var citycode = GetDestCityCode(rt.Des.value);

        PrevPickLoc = rt.PiUpLoc.value;
        PrevDropOffLoc = rt.DrOffLoc.value;

        rt.PiUpLoc.length = 0;
        rt.DrOffLoc.length = 0;

        if (citycode != '' && rt.VehBrnd.value != '~') {
            GetVendorPackageCode();
            rt.PiUpLocErrorMsg = 1;

            updatePickUpLocation(citycode);
            updateDropOffLocation(citycode);
        }
        else {
            rt.PiUpLoc.disabled = true;
            rt.DrOffLoc.disabled = true;
        }
    }
}

function updatePickUpLocation(destinationcitycode) {
    Trisept.UI.Web.Search.Components.Restool.RestoolConfigurationComponent.GetVehicalPickUpLocation(VenCode, PkgCode, destinationcitycode, rt.VehBrnd.value, OnCompletePickUpLoc, OnErrorLocation);
}

function updateDropOffLocation(destinationcitycode) {
    Trisept.UI.Web.Search.Components.Restool.RestoolConfigurationComponent.GetVehicalDropOffLocation(VenCode, PkgCode, destinationcitycode, rt.VehBrnd.value, OnCompleteDropOffLoc, OnErrorLocation);
}

function GetCityCode(str) {
    if (str.indexOf('(') != -1 && str.indexOf(')') != -1) {
        var c = str.split('(');
        str = c[c.length - 1];
        c = str.split(')');
        str = c[0].replace(/^[\s]+/, '').replace(/[\s]+$/, '').replace(/[\s]{2,}/, ' ');
        return str;
    } else if (str.length == 3) {
        return str;
    }  else {
        return "";
    }
}


function GetDestCityCode(str) {
    if (rt.isShortDescription == 1 && (rt.DestIndex > -1)) {
        return rt.Dests[rt.DestIndex].C;
    }
    else {
        return GetCityCode(str);
    }
}

var airportcode = new Array();

function OnCompletePickUpLoc(arg) {
    if (arg == null) return;
    arg = arg.objSort("D", "C");
    for (var i = 0; i < arg.length; i++) {
        if (arg[i].C.indexOf("-Y") != -1) {
            rt.PiUpLoc.options[i] = new Option(arg[i].D, arg[i].C.substring(0, arg[i].C.indexOf("-Y")));
            rt.PiUpLoc.options[i].selected = true;
        }
        else {
            rt.PiUpLoc.options[i] = new Option(arg[i].D, arg[i].C);
        }
    }

    if (PrevPickLoc != "") {
        SetSelectedValue(rt.PiUpLoc, PrevPickLoc);
        PrevPickLoc = "";
    }

    if (rt.PiUpLoc.options.length > 0)
        rt.PiUpLoc.disabled = false;
    else
        rt.PiUpLoc.disabled = true;
}

function OnCompleteDropOffLoc(arg) {

    if (arg == null) return;
    arg = arg.objSort("D", "C");
    for (var i = 0; i < arg.length; i++) {
        if (arg[i].C.indexOf("-Y") != -1) {
            rt.DrOffLoc.options[i] = new Option(arg[i].D, arg[i].C.substring(0, arg[i].C.indexOf("-Y")));
            rt.DrOffLoc.options[i].selected = true;
        }
        else {
            rt.DrOffLoc.options[i] = new Option(arg[i].D, arg[i].C);
        }

    }
    if (PrevDropOffLoc != "") {
        SetSelectedValue(rt.DrOffLoc, PrevDropOffLoc);
        PrevDropOffLoc = "";
    }

    PrevDropOffLoc = "";

    if (rt.DrOffLoc.options.length > 0)
        rt.DrOffLoc.disabled = false;
    else
        rt.DrOffLoc.disabled = true;
}

function SetSelectedValue(DropDownControl, SelValue) {
    if (SelValue == "") return;
    for (var i = 0; i < DropDownControl.options.length; i++) {
        if (DropDownControl.options[i].value == SelValue) {
            DropDownControl.options[i].selected = true;
        }
    }
}

function OnCompleteNearbyEntities(arg) {
    arg = arg.objSort("D", "C");
    rt.NearbyEntities.length = 0;
    var arrEntityLatLong;
    for (var i = 0; i < arg.length; i++) {
        arrEntityLatLong = arg[i].C.split("|");
        if (arg[i].C.indexOf("-Y") != -1) {
            rt.NearbyEntities.options[i] = new Option(arg[i].D, arg[i].C.substring(0, arg[i].C.indexOf("-Y")));
            rt.NearbyEntities.options[i].selected = true;
        }
        else {

            rt.NearbyEntities.options[i] = new Option(arrEntityLatLong[0], arg[i].C);
        }
    }

    if ((arg.length > 0) && (rt.Landmark.selectedIndex > 0)) {
        toggleNearbyEntitiesDropDown(0);
    } else {
        rt.NearbyEntities.options[0] = new Option("No entities found", "");
        rt.NearbyEntities.options[0].selected = true;
        toggleNearbyEntitiesDropDown(1);
    }
    arg.length = 0;
}

function GetBrowserName() { var browser = navigator.appName; return browser; }
function GetBrowserVersion() { var b_version = navigator.appVersion; var version = parseFloat(b_version); return version; }

function OnCompleteExternalNearbyEntities(arg) {
    arg = arg.objSort("D", "C");
    hrr.NearbyEntities.length = 0;
    var browserName = GetBrowserName();
    if (browserName.indexOf("Microsoft") >= 0) { hrr.NearbyEntities.options[0] = new Option("Select location", ""); } else { hrr.NearbyEntities.options[0] = new Option("Location", ""); }
    hrr.NearbyEntities.options[0].selected = true;

    var lastOptGroup = "";
    var arrEntityLatLong;
    for (var i = 1; i < arg.length; i++) {
        arrEntityLatLong = arg[i].C.split("|");
        if (arg[i].C.indexOf("-Y") != -1) {
            hrr.NearbyEntities.options[i] = new Option(arg[i].D, arg[i].C.substring(0, arg[i].C.indexOf("-Y")));
            hrr.NearbyEntities.options[i].selected = true;
        }
        else {
            if (arg[i].D != lastOptGroup) {
                var optGroup = document.createElement("optgroup");
                optGroup.label = arg[i].D;
                hrr.NearbyEntities.appendChild(optGroup);
            }
            //hrr.NearbyEntities.options[i] = new Option(arg[i].D + " - " + arrEntityLatLong[0],arg[i].C);
            hrr.NearbyEntities.options[i] = new Option(arrEntityLatLong[0], arg[i].C);
        }
        lastOptGroup = arg[i].D;
    }

    if (arg.length <= 0) {
        hrr.NearbyEntities.options[0] = new Option("No entities found", "");
        hrr.NearbyEntities.options[0].selected = true;
    }
    if ((lspf != null) && (lspf != undefined)) { lspf.style.display = "none"; }
    arg.length = 0;
}

function OnError(arg, usrc) {
    rt.setWS = rt.setWS - 1;
    serviceWaitScreen();
    //alert("error has occured: " + arg._message);
}

function OnErrorLocation(arg) {
    if (rt.PiUpLocErrorMsg == 1) {
        rt.PiUpLocErrorMsg = 0;
        rt.DrOffLoc.disabled = true;
        rt.PiUpLoc.disabled = true;
        if ((rt.NearbyEntities != null) && (rt.Landmark != null)) {
            toggleLandmarkDropDown(1);
            toggleNearbyEntitiesDropDown(1);
        }
        alert(RestoolClientSideErrorMessage.RequiredPickUpLocation);
    }
}
var VenCode;
var PkgCode;
function GetVendorPackageCode() {
    if (rt.Ven.id == rt.Pkg.id) {
        var i = 0;

        if (rt.Ven.tagName == "SELECT") {
            for (i = 0; i < rt.Ven.getElementsByTagName("OPTION").length; i++) {
                var ddlVenPkg = rt.Ven.getElementsByTagName("Option")[i];
                if (ddlVenPkg.selected == true) {
                    VenCode = ddlVenPkg.value.substring(0, ddlVenPkg.value.indexOf('-'));
                    PkgCode = ddlVenPkg.value.substring(ddlVenPkg.value.indexOf('-') + 1);
                    return true;
                }
            }
        }
        else {
            for (i = 0; i < rt.Ven.getElementsByTagName("INPUT").length; i++) {
                var RbnVenPkg = $get(rt.Ven.id + '_' + i);
                if (RbnVenPkg.checked == true) {
                    VenCode = RbnVenPkg.value.substring(0, RbnVenPkg.value.indexOf('-'));
                    PkgCode = RbnVenPkg.value.substring(RbnVenPkg.value.indexOf('-') + 1);
                    return true;
                }
            }
        }
    }
    else {
        VenCode = rt.Ven.value;
        PkgCode = rt.Pkg.value;
        if (typeof PkgCode === "undefined") { PkgCode = $("#" + rt.Pkg.id + " input[checked='checked']").attr("value"); }
    }
}

function HotelRefineRestool(hoLandmarkSearch) {
    this.NearbyEntities = hoLandmarkSearch;
}

function OnChange_NumberOfNights(sender) {
    var numberOfNights = sender.value.trim();
    if (numberOfNights != "") {
        if (IsValidNumberOfNights(numberOfNights)) {
            if (numberOfNights > 0) {
                var dt = parseVaxDate(rt.Dep.value);
                if (dt != null) {
                    rt.Length = parseInt(numberOfNights, 10);
                    dt.setDate(dt.getDate() + rt.Length);

                    rt.Ret.value = siteDateFormat(dt, rt.Ret.DateFormat);

                    if (rt.ChkOut != null) {
                        rt.ChkOut.value = siteDateFormat(dt, rt.ChkOut.DateFormat);
                    }
                    if (rt.DrOff != null) {
                        rt.DrOff.value = siteDateFormat(dt, rt.DrOff.DateFormat);
                    }

                    returnDateDayName(rt.Ret.value);

                    if (rt.Ret.Validators != null) {
                        if (rt.Ret.Validators.length > 0) {
                            var val = rt.Ret.Validators[0];
                            val.innerHTML = '';
                            val.evaluationfunction(val);
                        }
                    }
                }

            }
        }
    }
}

function validateNumberOfNights(sender, args) {
    var numberOfNights = args.Value.trim();
    if (numberOfNights != "") {
        if (IsValidNumberOfNights(numberOfNights) == false) {
            sender.errormessage = RestoolClientSideErrorMessage.VaildNumberOfNights;
            args.IsValid = false;
        }
        else if (numberOfNights <= 0) {
            sender.errormessage = RestoolClientSideErrorMessage.VaildNumberOfNights;
            args.IsValid = false;
        }
    }
    else {
        args.IsValid = true;
    }
}

function IsValidNumberOfNights(val) {//debugger;
    var re = new RegExp("^((0[1-9])|([1-9]0)|([1-9]?[1-9]))$");
    if (!re.test(val))
        return false;
    else
        return true;
}

/*If you modify this signature, please update both restool and external restool creation script*/
function ResTool(venId, pkgId, orgId, desId, depId, retId, chkInId, chkOutId, hoLandmarkId, hoNearbyEntities, piUpId, drOffId, piUpVehLoc, drOffVehLoc, lenId, hoBrndId, vehBrndId, roomId, depDayNameLabel, retDayNameLabel, farePreferenceId, cabinPreferenceId, numberOfNights, isFromExternalPost, isSmartSearchOffered, isSupportOrgDestPairingOffered, isShortDescription, airDepTime, airRetTime, isRegionsDisplay, filterDests, filterOrgs, hoHotelName, plCode, isReturnDateWatermark, supplierCode, landmarkInputId, landmarks) {//debugger;

    this.Ven = venId;
    this.Pkg = pkgId;
    this.Org = orgId;
    this.Orgs = new Array();
    this.COrgs = new Array();
    this.Des = desId;
    if (this.Des != null) { this.Des.onkeyup = NearbyEntitiesTextChange; }
    this.Dests = new Array();
    this.Dep = depId;
    this.Ret = retId;
    this.ChkIn = chkInId;
    this.ChkOut = chkOutId;
    this.HoBrnd = hoBrndId;
    this.Landmark = hoLandmarkId;
    this.NearbyEntities = hoNearbyEntities;
    this.HoBrnds = null;
    this.PiUp = piUpId;
    this.DrOff = drOffId;
    this.PiUpLoc = piUpVehLoc;
    this.DrOffLoc = drOffVehLoc;
    this.VehBrnd = vehBrndId;
    this.VehBrnds = null;
    // JMB Use parseVaxDate rather than simply checking for empty spaces. A watermark in either of the date fields will simply
    // return a length of null.
    if (numberOfNights == null && parseVaxDate(this.Dep.value) != null && parseVaxDate(this.Ret.value) != null) {
        this.Length = getDateDiffDays(this.Dep.value, this.Ret.value);
    }
    else {
        this.Length = null;
    }
    this.NumberOfNights = numberOfNights;
    this.IsFromExternalPost = isFromExternalPost;
    this.Room = roomId;

    this.departureDT = null;
    this.returnDT = null;
    this.chkinDT = null;
    this.chkOutDT = null;
    this.picupDT = null;
    this.drOffDT = null;
    this.AirDepTime = airDepTime
    this.AirRetTime = airRetTime

    this.OrgIndex = -1;
    this.DestIndex = -1;
    this.setWS = 0;

    this.departureDateDayNameLabel = depDayNameLabel;
    this.returnDateDayNameLabel = retDayNameLabel;

    this.PiUpLocErrorMsg = 0;
    this.isSmartSearchOffered = false;
    this.isSupportOrgDestPairingOffered = isSupportOrgDestPairingOffered;
    this.isShortDescription = isShortDescription;
    this.FarePreference = farePreferenceId;
    if (this.FarePreference != null) { this.PrevFare = this.FarePreference.value; }
    this.CabinPreference = cabinPreferenceId;


    this.Dep.arrCtrlsToUpdate = new Array(this.ChkIn, this.PiUp);
    this.Ret.arrCtrlsToUpdate = new Array(this.ChkOut, this.DrOff);
    this.Dep.arrCtrlsToAddDayLength = new Array(this.Ret, this.ChkOut, this.DrOff);
    this.isRegionsDisplay = isRegionsDisplay;
    this.filterDests = filterDests;
    this.filterOrgs = filterOrgs;
    this.hoHotelName = hoHotelName;
    this.PLCode = plCode;
    this.isReturnDateWatermark = isReturnDateWatermark;
    this.supplierCode = supplierCode;

    this.LandmarkInputId = landmarkInputId;
    this.Landmarks = landmarks;
}

ResTool.prototype.OrgsDescConcat = function populateLongDesc(bb) {
    for (var i = 0; i < bb.length; i++) {
        if (rt.isShortDescription == 1) {
            if (bb[i].R == true) {
                bb[i].LD = bb[i].D;
            } else {
                bb[i].LD = bb[i].D;
            }
        }
        else {
            if (bb[i].R == true) {
                bb[i].LD = bb[i].D;
            } else {
                bb[i].LD = bb[i].D + " (" + bb[i].C + ")";
            }
        }        
    }
    return bb;
}

ResTool.prototype.CombineOrgs = function populateCombinedOrigins(bb) {
    for (var i = 0; i < bb.length; i++) {
        bb[i].DU = false;
        for (var j = 0; j < rt.COrgs.length; j++) {
            if (rt.COrgs[j].C == bb[i].C) {
                bb[i].DU = true;
                rt.COrgs[j] = bb[i];
                break;
            }
        }
        if (!bb[i].DU) {
            rt.COrgs.push(bb[i]);
        }
    }
    return rt.COrgs.sort(sortJSON('D', false, function (a) { }));
}

//Smart Search
ResTool.prototype.SmartConcat = function populateLongCity(od) {
    if (od != null) {
        var ss = new Array();
        for (var i = 0; i < od.length; i++) {
            ss[i] = od[i].C;
            airportcode[i] = od[i].D;

            for (var j = 0; j < od[i].D.length; j++) {
                if (od[i].D[j] != null) // not taking into account if airport item is null.
                {
                    if (rt.isShortDescription == 1) {
                        airportcode[i][j] = od[i].D[j].substring(0, od[i].D[j].indexOf(" ("))
                    }
                }
                else {
                    airportcode[i] = new Array()
                }
            }
        }

    }
    else {
        var ss = new Array();
        airportcode = new Array();
    }
    return ss;
}

ResTool.prototype.GetLandmarkById = function (id) {
    for (var i = 0; i < rt.Landmarks.length; i++) {
        var landmark = rt.Landmarks[i];
        if (landmark.Id == id) {
            return landmark;
        }
    }
    return null;
}

//Update dest input based on selected landmark
ResTool.prototype.UpdateDestPerLandmark = function (destInputId, selectedLandmarkId) {
    var destCode = rt.GetLandmarkById(selectedLandmarkId).DestCode;
    var destInput = $("#" + destInputId)
    destInput.val(destCode).change().blur();
} 


function valCityIndex(val, c) {
    var val = val.toUpperCase();
    for (var i = 0; i < c.length; i++) {
        var city = c[i];
        if ((city.C == val) || (city.D.toUpperCase() == val) || (city.LD.toUpperCase() == val)) {
            return i;
        }
    }
    return -1;
}

function validateOrigin(sender, args) {
    if ($('#' + sender.controltovalidate).data('validationEnabled') == false) {
        args.IsValid = true;
        return;
    }

    if (rt.Org != null) {
        ShowComboRealInput(rt.Org.id);    //So callout position is correct
    }
    
    var city = null;
    rt.PrevFare = null;
    if ($get("div_table") != null) {
        if (rt.Org != null) {
            HideComboRealInput(rt.Org.id);
        }
        return;
    }

    if (!(rt.Orgs.length == 0 && rt.IsFromExternalPost == 1)) {
        var orgctrl = $get(sender.controltovalidate);
        if (orgctrl.prevValue == null)
            orgctrl.prevValue = "";
        if (args.Value.trim() == "") {
            rt.OrgIndex = -1;
            updateDestinations();
            orgctrl.prevValue = orgctrl.value;
            sender.errormessage = RestoolClientSideErrorMessage.RequiredOrigin;
            args.IsValid = false;
            if (rt.Org != null) {
                FocusComboRealInput(rt.Org.id);
            }
            initializeFarePreference();
            if (rt.Org != null) {
                HideComboRealInput(rt.Org.id);
            }
            return;
        }

        if (orgctrl.prevValue != args.Value.trim()) {

            rt.OrgIndex = valCityIndex(args.Value.trim(), rt.Orgs);
            if (rt.OrgIndex >= 0) {
                orgctrl.value = rt.Orgs[rt.OrgIndex].LD //city.LD ;
                args.IsValid = true;
                sender.innerHTML = "";
                updateDestinations()
            }
            else {
                if (rt.isSmartSearchOffered != 1) {
                    sender.errormessage = RestoolClientSideErrorMessage.ValidDestination;
                    args.IsValid = false;
                }
            }

            orgctrl.prevValue = orgctrl.value;
        }
        if (rt.OrgIndex == -1 && rt.isSmartSearchOffered != 1) {
            sender.errormessage = RestoolClientSideErrorMessage.ValidOrigin;
            args.IsValid = false;
            initializeFarePreference();
        }        
    }
    else {
        args.IsValid = true;
        sender.innerHTML = "";
    }
    validateAllVendorPackageSelectedOrigin();

    if (rt.Org != null) {
        HideComboRealInput(rt.Org.id);
    }
}

function validateDestination(sender, args) {
    if ($('#' + sender.controltovalidate).data('validationEnabled') == false) {
        args.IsValid = true;
        return;
    }

    if (rt.Des != null) {
        ShowComboRealInput(rt.Des.id);    //So callout position is correct
    }

    var city = null;
    rt.PrevFare = null;
    if ($get("div_table") != null) {
        if (rt.Des != null) {
            HideComboRealInput(rt.Des.id);
        }
        return;
    }

    if (!(rt.Dests.length == 0 && rt.IsFromExternalPost == 1)) {
        var desctrl = $get(sender.controltovalidate);
        if (desctrl.prevValue == null)
            desctrl.prevValue = "";

        if (args.Value.trim() == "") {
            if ((rt.NearbyEntities != null) && (rt.Landmark != null)) {
                toggleLandmarkDropDown(1);
                toggleNearbyEntitiesDropDown(1);
            }
            rt.DestIndex = -1;
            updateOrigins();
            desctrl.prevValue = desctrl.value;
            sender.errormessage = RestoolClientSideErrorMessage.RequiredDestination;
            args.IsValid = false;
            if (rt.Des != null) {
                FocusComboRealInput(rt.Des.id);
            }
            initializeFarePreference();
            if (rt.Des != null) {
                HideComboRealInput(rt.Des.id);
            }
            return;
        }

        if (desctrl.prevValue != args.Value.trim()) {
            rt.DestIndex = valCityIndex(args.Value.trim(), rt.Dests);
            if (rt.DestIndex >= 0) {
                desctrl.value = rt.Dests[rt.DestIndex].LD;
                args.IsValid = true;
                sender.innerHTML = "";
                updateOrigins();

                if ((rt.NearbyEntities != null) && (rt.Landmark != null) && (rt.NearbyEntities.disabled)) {
                    updateNearbyEntities();
                }
            }
            else {
                if ((rt.NearbyEntities != null) && (rt.Landmark != null)) {
                    toggleLandmarkDropDown(1);
                    toggleNearbyEntitiesDropDown(1);
                }
                if (rt.isSmartSearchOffered != 1) {
                    sender.errormessage = RestoolClientSideErrorMessage.ValidDestination;
                    args.IsValid = false;
                }
            }

            desctrl.prevValue = desctrl.value;
        }
        else if (rt.DestIndex == -1) {
            if ((rt.NearbyEntities != null) && (rt.Landmark != null)) {
                toggleLandmarkDropDown(1);
                toggleNearbyEntitiesDropDown(1);
            }
            if (rt.isSmartSearchOffered != 1) {
                sender.errormessage = RestoolClientSideErrorMessage.ValidDestination;
                initializeFarePreference();
                args.IsValid = false;
            }
        }
    }
    else {
        args.IsValid = true;
        sender.innerHTML = "";
    }

    if (rt.Des != null) {
        HideComboRealInput(rt.Des.id);
    }
}
// Function to display smartsearch list
function EnsureSmartSearch() {
    return true;
}

function promocode_checkkey(evt) {
    if (typeof evt.keyCode != 'undefined') {
        if (evt.type != 'keyup') return;
        var objevt = evt.target || evt.srcElement;
        var kc = evt.keyCode;
        if (kc != 37 && // Left Arrow
            kc != 39 && // Right Arrow
            kc != 8 && // Backspace
            kc != 46)  // Delete
        {
            objevt.value = objevt.value.toUpperCase();
        }
    }
}

var PostToSearchUsingResToolSubmitHandle;
function PostToSearchUsingResTool(actUrl, vend, pkg, promo, itin, hasOrg, enableautosubmit, searchlocation) {
    if (typeof (Page_ClientValidate) == "function") {
        if (Page_ClientValidate("") == true) {
            var f = document.createElement("form");
            f.setAttribute("method", "POST");
            f.setAttribute("action", actUrl);
            f.appendChild(BuildHiddenField("gsVendor", vend));
            f.appendChild(BuildHiddenField("gsPackage", pkg));
            f.appendChild(BuildHiddenField("gsPromotionCode", $get(promo).value));
            if (hasOrg) { f.appendChild(BuildHiddenField("gsOrigin", rt.Org.value)); }
            f.appendChild(BuildHiddenField("gsDestination", rt.Des.value));
            f.appendChild(BuildHiddenField("gsDepartureDate", rt.Dep.value));
            f.appendChild(BuildHiddenField("gsReturnDate", rt.Ret.value));
            f.appendChild(BuildHiddenField("coPickUpDate", rt.PiUp.value));
            f.appendChild(BuildHiddenField("coDropOffDate", rt.DrOff.value));
            f.appendChild(BuildHiddenField("hocheckindate", rt.ChkIn.value));
            f.appendChild(BuildHiddenField("hocheckoutdate", rt.ChkOut.value));
            f.appendChild(BuildHiddenField("gsdateformat", GlobalFormat.SiteDateFormat));
            f.appendChild(BuildHiddenField("itin", itin));
            f.appendChild(BuildHiddenField("enableautosubmit", enableautosubmit));
            f.appendChild(BuildHiddenField("gssearchlocation", searchlocation));
            document.getElementsByTagName("BODY")[0].appendChild(f);
            document.forms[document.forms.length - 1].submit();
        }
    }
}

function BuildHiddenField(nam, val) {
    var i = document.createElement("input");
    i.setAttribute("type", "hidden");
    i.setAttribute("name", nam);
    i.setAttribute("value", val);
    return i;
}

function PopulateModalResTool(destinationCode, vendorCode, packageCode) {
    rt.Des.value = destinationCode;
    rt.Ven.value = vendorCode;
    rt.Pkg.value = packageCode;
    showModal('modalRestool', 'modalPopup', 1, -1, -1, '', '', '');
}

function pkgLongDiscriptionToolTip(descriptionLong) {
    var divPkgLongDesc = $get("pkgLongDiscription");
    if (divPkgLongDesc != null) {
        divPkgLongDesc.title = descriptionLong;
    }
}

function validateUPCCode(sender, args) {
    var clientsideArguments = args.Value.trim();
    if (clientsideArguments != "") {
        var regExp = new RegExp("^[a-zA-Z0-9\-\$ \*]{1,30}$");
        if (!regExp.test(clientsideArguments)) {
            sender.errormessage = RestoolClientSideErrorMessage.InvalidUPCCode;
            args.IsValid = false;
        }
    } else {
        sender.errormessage = RestoolClientSideErrorMessage.EnterUPCCode;
        args.IsValid = false;
    }
}

function validateHotelName(sender, args) {
    var hotelNameValue = args.Value.trim();
    if (hotelNameValue != "") {
        var regExp = new RegExp("^[A-Za-z0-9\&\'\.\(\)\,\;\:\\s\-\&\/]+$");
        if (!regExp.test(hotelNameValue)) {
            sender.errormessage = RestoolClientSideErrorMessage.InvalidCharactersInHotelName;
            args.IsValid = false;
        }
    }
}

function validateSourceCode(sender, args) {
    var clientsideArguments = args.Value.trim();
    if (clientsideArguments != "") {
        var regExp = new RegExp("^[a-zA-Z0-9\s]{0,10}$");
        if (!regExp.test(clientsideArguments)) {
            sender.errormessage = RestoolClientSideErrorMessage.InvalidSourceCode;
            args.IsValid = false;
        }
    }
}

function updateAllVendorPackageOrigins() {
    if (rt.Org != null) {
        //GetVendorPackageCode();
        var cityCode = '';
        if (rt.Des != null) {
            if ((rt.Des.value != "") && (rt.DestIndex == -1)) {
                if (rt.isShortDescription == 0) {
                    cityCode = GetCityCode(rt.Des.value);
                }
            }
        }
        if (rt.DestIndex >= 0) {
            cityCode = rt.Dests[rt.DestIndex].C;
        }
        if (rt.isSupportOrgDestPairingOffered == 1) {
            rt.setWS = rt.setWS + 1;
            serviceWaitScreen()
        }
        var usrc = "OC";
        if (cityCode == "" && rt.isShortDescription == 1)
            usrc = "OEC";
        var plc = rt.PLCode;
        if (typeof (ac1) != "undefined") {
            ac1.setKeywords([]);
        }
        if (rt.Ven.id == rt.Pkg.id) {
            for (i = 0; i < rt.Ven.getElementsByTagName("INPUT").length; i++) {
                var rblVenPkg = $get(rt.Ven.id + '_' + i);
                VenCode = rblVenPkg.value.substring(0, rblVenPkg.value.indexOf('-'));
                PkgCode = rblVenPkg.value.substring(rblVenPkg.value.indexOf('-') + 1);
                Trisept.UI.Web.Search.Components.Restool.RestoolConfigurationComponent.GetOriginMarkets(VenCode, PkgCode, cityCode, filterOrgs, plc, OnCompleteOrgsAndDests, OnError, usrc);
            }
        }
    }
}

function validateAllVendorPackageOrigin(sender, args) {
    var city = null;
    rt.PrevFare = null;
    if ($get("div_table") != null)
        return;

    if (!(rt.Orgs.length == 0 && rt.IsFromExternalPost == 1)) {
        var orgctrl = $get(sender.controltovalidate);
        if (orgctrl.prevValue == null)
            orgctrl.prevValue = "";
        if (args.Value.trim() == "") {
            rt.OrgIndex = -1;
            updateDestinations();
            orgctrl.prevValue = orgctrl.value;
            sender.errormessage = RestoolClientSideErrorMessage.RequiredOrigin;
            args.IsValid = false;
            initializeFarePreference();
            validateAllVendorPackageSelectedOrigin();
            return;
        }

        if (orgctrl.prevValue != args.Value.trim()) {

            rt.OrgIndex = valCityIndex(args.Value.trim(), rt.Orgs);
            if (rt.OrgIndex >= 0) {
                orgctrl.value = rt.Orgs[rt.OrgIndex].LD //city.LD ;
                args.IsValid = true;
                sender.innerHTML = "";
                updateDestinations()
            }
            else {
                if (rt.isSmartSearchOffered != 1) {
                    sender.errormessage = RestoolClientSideErrorMessage.ValidDestination;
                    args.IsValid = false;
                }
            }

            orgctrl.prevValue = orgctrl.value;
        }
        if (rt.OrgIndex == -1 && rt.isSmartSearchOffered != 1) {
            sender.errormessage = RestoolClientSideErrorMessage.ValidOrigin;
            args.IsValid = false;
            initializeFarePreference();
        }
    }
    else {
        args.IsValid = true;
        sender.innerHTML = "";
    }
    validateAllVendorPackageSelectedOrigin();
}

function ChangeAltPackageChoice(cb) {
    if ((cb != null) && (PkgCode != undefined)) {
        PkgCode = cb.value;
    }
}

function validateAllVendorPackageSelectedOrigin() {
    if (!rt.COrgs.length == 0) {
        var apc = $get("alternatePackageChoices");
        if (apc != null) {
            if (rt.Org.value != "") {
                for (i = 0; i < rt.Orgs.length; i++) {
                    if (rt.Orgs[i].LD == rt.Org.value) {
                        if (rt.Orgs[i].DU) {
                            apc.style.display = "block";
                            var rbl = document.getElementsByName("rblAlternatePackageChoices");
                            if (rbl != null) {
                                for (var i = 0; i < rbl.length; i++) {
                                    if (rbl[i].checked) {
                                        ChangeAltPackageChoice(rbl[i].value);
                                    }
                                }
                            }                                       
                        } else {
                            apc.style.display = "none";
                        }
                        break;
                    }
                }
            } else {
                apc.style.display = "none";
            }
        }
    }
}

function ValidateLandmarkRequired(sender, args) {
    if (rt.LandmarkInputId != null) {
        ShowComboRealInput(rt.LandmarkInputId);    //So callout position is correct
    }

    if (args.Value == "") {
        args.IsValid = false;
    }

    if (rt.LandmarkInputId != null) {
        HideComboRealInput(rt.LandmarkInputId);
    }
}

var sortJSON = function (field, reverse, primer) {
    reverse = (reverse) ? -1 : 1;
    return function (a, b) {
        a = a[field];
        b = b[field];
        if (typeof (primer) != 'undefined') {
            a = primer(a);
            b = primer(b);
        }
        if (a < b) return reverse * -1;
        if (a > b) return reverse * 1;
        return 0;
    }
}

function swapChildAgeDateOfBirth(dateOfBirthDisplay, ageDisplay, ageValidator, childDOBInputId, childAgeInputId) {
    if ($('#' + dateOfBirthDisplay).is(':visible')) {
        $('#' + ageDisplay).show();
        $('#' + dateOfBirthDisplay).hide();
        dateDropDownSetManager.GetControl(childDOBInputId).SetRequired(false);
        ageValidator.enabled = true;
        ageValidator.isValid = false;
        resetAgeAndDobInputs(childAgeInputId, childDOBInputId);
    }
    else {
        $('#' + dateOfBirthDisplay).show();
        $('#' + ageDisplay).hide();
        dateDropDownSetManager.GetControl(childDOBInputId).SetRequired(true);
        ageValidator.enabled = false;
        ageValidator.isValid = true;
        resetAgeAndDobInputs(childAgeInputId, childDOBInputId);
    }
}

function resetAgeAndDobInputs(ageId, dobId) {
    $('#' + ageId)[0].selectedIndex = 0;
    $('#' + ageId)[0].selected = 0;
    dateDropDownSetManager.GetControl(dobId).ClearDate();
    dateDropDownSetManager.GetControl(dobId).SetDefaultDate(null)
}

//END Trisept.UI.Web.Search.restool.js
//START Trisept.UI.Web.Search.datevalidates.js

function DateValidate(source, clientside_arguments)
{
var clientsideArguments = Trim(clientside_arguments.Value);
 if(clientsideArguments == "" || clientsideArguments == null) 
   {
       ResetValue(source.controltovalidate);
       SetErrorMsg(source, clientside_arguments, String.format(RestoolClientSideErrorMessage.RequiredDate, GlobalFormat.SiteDateFormat));
     return false; 
   }
  else
   {

    var getErrorMsg;
        var dValidate = source.controltovalidate;
        if (IsNotNull($get(dValidate)))
        {
               if(IsNotNull(rt.Dep))
               rt.departureDT = parseVaxDate(rt.Dep.value);
               
               if(IsNotNull(rt.Ret))
               rt.returnDT = parseVaxDate(rt.Ret.value);
               
               if(IsNotNull(rt.ChkIn))
               rt.chkinDT = parseVaxDate(rt.ChkIn.value);
               
               if(IsNotNull(rt.ChkOut))
               rt.chkOutDT = parseVaxDate(rt.ChkOut.value);
               
               if(IsNotNull(rt.PiUp))
               rt.picupDT = parseVaxDate(rt.PiUp.value);
               
               if(IsNotNull(rt.DrOff))
                   rt.drOffDT = parseVaxDate(rt.DrOff.value);
                       
          
                if(IsNotNull(rt.Dep))
                {
                   if(rt.Dep.id == dValidate) {
                       	rt.departureDT = parseVaxDate(clientsideArguments);
						if(IsNotNull(rt.departureDT)) {

						    var todayDT = new Date();
						    todayDT = todayDT.setHours(0, 0, 0, 0);
						    var lowDT = parseVaxDate(rt.Dep.LowDate).setHours(0, 0, 0, 0);
						    if (lowDT != todayDT) {
						        CheckDepRetDates(todayDT, rt.departureDT, source, clientside_arguments, RestoolClientSideErrorMessage.DepartureDtGreaterThanTodayDt);
						    }
						   if ((clientside_arguments.IsValid == true) && (IsNotNull(rt.Dep.HighDate)) && (IsNotNull(rt.Dep.LowDate))){
						           var highDT = parseVaxDate(rt.Dep.HighDate);
						           var lowDT = parseVaxDate(rt.Dep.LowDate);
						           CheckHighLowDates(rt.departureDT, highDT, lowDT, source, clientside_arguments, getInvalidDateRangeMessage(rt.Dep.LowDate, rt.Dep.HighDate));
						   }
						}
						else
						{
						    SetErrorMsg(source, clientside_arguments, String.format(RestoolClientSideErrorMessage.CheckDate, GlobalFormat.SiteDateFormat));
						}
				    }
                }

                if(IsNotNull(rt.Ret))                {
                    if (rt.Ret.id == dValidate) {
                        rt.returnDT = parseVaxDate(clientsideArguments);
                        if (IsNotNull(rt.returnDT)) {
                            if (IsNotNull(rt.departureDT)) {
                                CheckDepRetDates(rt.departureDT, rt.returnDT, source, clientside_arguments, RestoolClientSideErrorMessage.ReturnDtGreaterThanDepDt);
                            }
                            
                            if ((clientside_arguments.IsValid == true) && (IsNotNull(rt.Ret.HighDate)) && (IsNotNull(rt.Ret.LowDate))) {
                                var highDT = parseVaxDate(rt.Ret.HighDate);
                                var lowDT = parseVaxDate(rt.Ret.LowDate);
                                CheckHighLowDates(rt.returnDT, highDT, lowDT, source, clientside_arguments, getInvalidDateRangeMessage(rt.Ret.LowDate, rt.Ret.HighDate));
                            }

                        }
                        else {
                            SetErrorMsg(source, clientside_arguments, String.format(RestoolClientSideErrorMessage.CheckDate, GlobalFormat.SiteDateFormat));
                        }
                    }
                }

                if (IsNotNull(rt.ChkIn)) {
                    if (rt.ChkIn.id == dValidate) {
                        rt.chkinDT = parseVaxDate(clientsideArguments);
                        if (IsNotNull(rt.chkinDT)) {
                            
                            if (IsNotNull(rt.departureDT)) {
                                if (CompareStartEndDates(rt.departureDT, rt.chkinDT, source, clientside_arguments, RestoolClientSideErrorMessage.CheckinDtGreaterThanDepDt)) {
                                    if (IsNotNull(rt.returnDT) ){
                                        CompareStartEndDates(rt.chkinDT, rt.returnDT, source, clientside_arguments, RestoolClientSideErrorMessage.CheckinDtLessThanRetDt);
                                    }
                                }
                            }

                            if ((clientside_arguments.IsValid == true) && (IsNotNull(rt.ChkIn.HighDate)) && (IsNotNull(rt.ChkIn.LowDate))) {
                                var highDT = parseVaxDate(rt.ChkIn.HighDate);
                                var lowDT = parseVaxDate(rt.ChkIn.LowDate);
                                CheckHighLowDates(rt.chkinDT, highDT, lowDT, source, clientside_arguments, getInvalidDateRangeMessage(rt.ChkIn.LowDate, rt.ChkIn.HighDate));
                            }
                        }
                        else {
                            SetErrorMsg(source, clientside_arguments, String.format(RestoolClientSideErrorMessage.CheckDate, GlobalFormat.SiteDateFormat));
                        }
                    }
                }

                if (IsNotNull(rt.ChkOut)) {
                    if (rt.ChkOut.id == dValidate) {
                        rt.chkOutDT = parseVaxDate(clientsideArguments);
                        if (IsNotNull(rt.chkOutDT)) {
                            
                            if (IsNotNull(rt.chkinDT)) {
                                if (CompareStartEndDates(rt.chkinDT, rt.chkOutDT, source, clientside_arguments, RestoolClientSideErrorMessage.CheckoutDtGreaterThanChkInDt) == true) {
                                    if (IsNotNull(rt.returnDT)) {
                                        CompareStartEndDates(rt.chkOutDT, rt.returnDT, source, clientside_arguments, RestoolClientSideErrorMessage.CheckoutDtLessThanRetDt);
                                    }
                                }
                            }

                            if ((clientside_arguments.IsValid == true) && (IsNotNull(rt.ChkOut.HighDate)) && (IsNotNull(rt.ChkOut.LowDate))) {
                                var highDT = parseVaxDate(rt.ChkOut.HighDate);
                                var lowDT = parseVaxDate(rt.ChkOut.LowDate);
                                CheckHighLowDates(rt.chkOutDT, highDT, lowDT, source, clientside_arguments, getInvalidDateRangeMessage(rt.ChkOut.LowDate, rt.ChkOut.HighDate));
                            }
                        }
                        else {
                            SetErrorMsg(source, clientside_arguments, String.format(RestoolClientSideErrorMessage.CheckDate, GlobalFormat.SiteDateFormat));
                        }
                    }
                }

                if (IsNotNull(rt.PiUp)) {
                    if (rt.PiUp.id == dValidate) {
                        rt.picupDT = parseVaxDate(clientsideArguments);
                        if (IsNotNull(rt.picupDT)) {
                            
                            if (IsNotNull(rt.departureDT)) {
                                if (CompareStartEndDates(rt.departureDT, rt.picupDT, source, clientside_arguments, RestoolClientSideErrorMessage.PickupDtGreaterThanDepDt) == true) {
                                    if (IsNotNull(rt.returnDT)) {
                                        CompareStartEndDates(rt.picupDT, rt.returnDT, source, clientside_arguments, RestoolClientSideErrorMessage.PickupDtLessThanRetDt);
                                    }
                                }
                            }

                            if ((clientside_arguments.IsValid == true) && (IsNotNull(rt.PiUp.HighDate)) && (IsNotNull(rt.PiUp.LowDate))) {
                                var highDT = parseVaxDate(rt.PiUp.HighDate);
                                var lowDT = parseVaxDate(rt.PiUp.LowDate);
                                CheckHighLowDates(rt.picupDT, highDT, lowDT, source, clientside_arguments, getInvalidDateRangeMessage(rt.PiUp.LowDate, rt.PiUp.HighDate));
                            }
                        }
                        else {
                            SetErrorMsg(source, clientside_arguments, String.format(RestoolClientSideErrorMessage.CheckDate, GlobalFormat.SiteDateFormat));
                        }
                    }
                }

                if (IsNotNull(rt.DrOff)) {
                    if (rt.DrOff.id == dValidate) {
                        rt.drOffDT = parseVaxDate(clientsideArguments);
                        if (IsNotNull(rt.drOffDT)) {
                            
                            if (IsNotNull(rt.picupDT)) {
                                if (CompareStartEndDates(rt.picupDT, rt.drOffDT, source, clientside_arguments, RestoolClientSideErrorMessage.DropoffDtGreaterThanPiUpDt) == true) {
                                    if (IsNotNull(rt.returnDT)) {
                                     
                                        CompareDropOffReturnDates(rt.drOffDT, rt.returnDT, source, clientside_arguments, RestoolClientSideErrorMessage.DropoffDtLessThanRetDt);
                                    }
                                }
                            }

                            if ((clientside_arguments.IsValid == true) && (IsNotNull(rt.DrOff.HighDate)) && (IsNotNull(rt.DrOff.LowDate))) {
                                var highDT = parseVaxDate(rt.DrOff.HighDate);
                                var lowDT = parseVaxDate(rt.DrOff.LowDate);
                                CheckHighLowDates(rt.drOffDT, highDT, lowDT, source, clientside_arguments, getInvalidDateRangeMessage(rt.DrOff.LowDate, rt.DrOff.HighDate));
                            }
                            
                        }
                        else {
                            SetErrorMsg(source, clientside_arguments, String.format(RestoolClientSideErrorMessage.CheckDate, GlobalFormat.SiteDateFormat));
                        }
                    }
                }
        }
   }

}

function DateChangeAvailValidate(source, clientside_arguments) {
    var clientsideArguments = Trim(clientside_arguments.Value);
    if (clientsideArguments == "" || clientsideArguments == null) {
        ResetValue(source.controltovalidate);
        SetErrorMsg(source, clientside_arguments, String.format(RestoolClientSideErrorMessage.RequiredDate, GlobalFormat.SiteDateFormat));
        return false;
    }
    else {

        var getErrorMsg;
        var dValidate = source.controltovalidate;
        if (IsNotNull($get(dValidate))) {
            if (IsNotNull(rt.Dep))
                rt.departureDT = parseVaxDate(rt.Dep.value);

            if (IsNotNull(rt.Ret))
                rt.returnDT = parseVaxDate(rt.Ret.value);

            if (IsNotNull(rt.ChkIn))
                rt.chkinDT = parseVaxDate(rt.ChkIn.value);

            if (IsNotNull(rt.ChkOut))
                rt.chkOutDT = parseVaxDate(rt.ChkOut.value);

            if (IsNotNull(rt.PiUp))
                rt.picupDT = parseVaxDate(rt.PiUp.value);

            if (IsNotNull(rt.DrOff))
                rt.drOffDT = parseVaxDate(rt.DrOff.value);


            if (IsNotNull(rt.Dep)) {
                if (rt.Dep.id == dValidate) {
                    rt.departureDT = parseVaxDate(clientsideArguments);
                    if (IsNotNull(rt.departureDT)) {

                        var todayDT = new Date();
                        CheckDepRetDates(todayDT, rt.departureDT, source, clientside_arguments, RestoolClientSideErrorMessage.DepartureDtGreaterThanTodayDt);
                        if ((clientside_arguments.IsValid == true) && (IsNotNull(rt.Dep.HighDate)) && (IsNotNull(rt.Dep.LowDate))) {
                            var highDT = parseVaxDate(rt.Dep.HighDate);
                            var lowDT = parseVaxDate(rt.Dep.LowDate);
                            CheckHighLowDates(rt.departureDT, highDT, lowDT, source, clientside_arguments, getInvalidDateRangeMessage(lowDT, highDT));
                        }

                        var dtCartReturnDate = new Date(hidCartReturnDate.value);
                        CompareDepartDateOverlap(rt.departureDT, dtCartReturnDate, source, clientside_arguments, RestoolClientSideErrorMessage.DepartureDtMustOverlap);            
                    }
                    else {
                        SetErrorMsg(source, clientside_arguments, String.format(RestoolClientSideErrorMessage.CheckDate, GlobalFormat.SiteDateFormat));
                    }
                }
            }

            if (IsNotNull(rt.Ret)) {
                if (rt.Ret.id == dValidate) {
                    rt.returnDT = parseVaxDate(clientsideArguments);
                    if (IsNotNull(rt.returnDT)) {

                        if (IsNotNull(rt.departureDT)) {
                            CheckDepRetDates(rt.departureDT, rt.returnDT, source, clientside_arguments, RestoolClientSideErrorMessage.ReturnDtGreaterThanDepDt);

                        }
                        else {
                            clientside_arguments.IsValid = true;
                            return true;
                        }

                        if ((clientside_arguments.IsValid == true) && (IsNotNull(rt.Ret.HighDate)) && (IsNotNull(rt.Ret.LowDate))) {
                            var highDT = parseVaxDate(rt.Ret.HighDate);
                            var lowDT = parseVaxDate(rt.Ret.LowDate);
                            CheckHighLowDates(rt.returnDT, highDT, lowDT, source, clientside_arguments, getInvalidDateRangeMessage(rt.Ret.LowDate, rt.Ret.HighDate));
                        }
                        if (clientside_arguments.IsValid == true) {
                            var dtCartDepartDate = new Date(hidCartDepartureDate.value);
                            CompareReturnDateOverlap(rt.returnDT, dtCartDepartDate, source, clientside_arguments, RestoolClientSideErrorMessage.ReturnDtMustOverlap);                                                           
                        }
                        

                    }
                    else {
                        SetErrorMsg(source, clientside_arguments, String.format(RestoolClientSideErrorMessage.CheckDate, GlobalFormat.SiteDateFormat));
                    }
                }
            }

            if (IsNotNull(rt.ChkIn)) {
                if (rt.ChkIn.id == dValidate) {
                    rt.chkinDT = parseVaxDate(clientsideArguments);
                    if (IsNotNull(rt.chkinDT)) {
                        if (IsNotNull(rt.departureDT)) {
                            if (isHotelOnly == false) {
                                if (CompareStartEndDates(rt.departureDT, rt.chkinDT, source, clientside_arguments, RestoolClientSideErrorMessage.CheckinDtGreaterThanDepDt) == true) {
                                    if (rt.returnDT == null) {
                                        clientside_arguments.IsValid = true;
                                        return true;
                                    }
                                    else {
                                        CompareStartEndDates(rt.chkinDT, rt.returnDT, source, clientside_arguments, RestoolClientSideErrorMessage.CheckinDtLessThanRetDt);
                                    }
                                }
                            }
                        }
                    }
                    else {
                        SetErrorMsg(source, clientside_arguments, String.format(RestoolClientSideErrorMessage.CheckDate, GlobalFormat.SiteDateFormat));
                    }
                }
            }

            if (IsNotNull(rt.ChkOut)) {
                if (rt.ChkOut.id == dValidate) {
                    rt.chkOutDT = parseVaxDate(clientsideArguments);
                    if (IsNotNull(rt.chkOutDT)) {
                        if (IsNotNull(rt.chkinDT)) {
                            if (isHotelOnly == false) {
                                if (CompareStartEndDates(rt.chkinDT, rt.chkOutDT, source, clientside_arguments, RestoolClientSideErrorMessage.CheckoutDtGreaterThanChkInDt) == true) {
                                    if (rt.returnDT == null) {
                                        clientside_arguments.IsValid = true;
                                        return true;
                                    }
                                    else {
                                        CompareStartEndDates(rt.chkOutDT, rt.returnDT, source, clientside_arguments, RestoolClientSideErrorMessage.CheckoutDtLessThanRetDt);
                                    }
                                }
                            }
                        }
                    }
                    else {
                        SetErrorMsg(source, clientside_arguments, String.format(RestoolClientSideErrorMessage.CheckDate, GlobalFormat.SiteDateFormat));
                    }
                }
            }

            if (IsNotNull(rt.PiUp)) {
                if (rt.PiUp.id == dValidate) {
                    rt.picupDT = parseVaxDate(clientsideArguments);
                    if (IsNotNull(rt.picupDT)) {
                        if (IsNotNull(rt.departureDT)) {
                            if (isHotelOnly == false) {
                                if (CompareStartEndDates(rt.departureDT, rt.picupDT, source, clientside_arguments, RestoolClientSideErrorMessage.PickupDtGreaterThanDepDt) == true) {
                                    if (rt.returnDT == null) {
                                        clientside_arguments.IsValid = true;
                                        return true;
                                    }
                                    else {
                                        CompareStartEndDates(rt.picupDT, rt.returnDT, source, clientside_arguments, RestoolClientSideErrorMessage.PickupDtLessThanRetDt);
                                    }
                                }
                            }
                        }
                    }
                    else {
                        SetErrorMsg(source, clientside_arguments, String.format(RestoolClientSideErrorMessage.CheckDate, GlobalFormat.SiteDateFormat));
                    }
                }
            }

            if (IsNotNull(rt.DrOff)) {
                if (rt.DrOff.id == dValidate) {
                    rt.drOffDT = parseVaxDate(clientsideArguments);
                    if (IsNotNull(rt.drOffDT)) {
                        if (IsNotNull(rt.picupDT)) {
                            if (isHotelOnly == false) {
                                if (CompareStartEndDates(rt.picupDT, rt.drOffDT, source, clientside_arguments, RestoolClientSideErrorMessage.DropoffDtGreaterThanPiUpDt) == true) {
                                    if (rt.returnDT == null) {
                                        clientside_arguments.IsValid = true;
                                        return true;
                                    }
                                    else {
                                       
                                        CompareDropOffReturnDates(rt.drOffDT, rt.returnDT, source, clientside_arguments, RestoolClientSideErrorMessage.DropoffDtLessThanRetDt);
                                    }
                                }
                            }
                        }
                    }
                    else {
                        SetErrorMsg(source, clientside_arguments, String.format(RestoolClientSideErrorMessage.CheckDate, GlobalFormat.SiteDateFormat));
                    }
                }
            }
        }
    }
}

function CheckDepRetDates(startDate,endDate,source,clientside_arguments,errMsgs)
{
    if(startDate <= endDate)
    {
        clientside_arguments.IsValid = true;
        return true;
    }
    else
    {
        SetErrorMsg(source,clientside_arguments,errMsgs);
    }     
}

function CheckHighLowDates(startDate, highDate,lowDate, source, clientside_arguments, errMsgs) {

    if (startDate <= highDate && startDate>=lowDate ) {
        clientside_arguments.IsValid = true;        
        return true;
    }
    else {
        SetErrorMsg(source, clientside_arguments, errMsgs);
    }

 }
 function getInvalidDateRangeMessage(lowDT, highDT) {
     return String.format(RestoolClientSideErrorMessage.InvalidDateRange, lowDT, highDT);
 } 

 function CompareStartEndDates(startDate,endDate,source,clientside_arguments,errMsgs)
 {
    if(startDate <= endDate)
    {
        clientside_arguments.IsValid = true;
        return true;
    }
    else
    {
        SetErrorMsg(source,clientside_arguments,errMsgs);
    }
}


function CompareDropOffReturnDates(startDate, endDate, source, clientside_arguments, errMsgs) {
     if (startDate > (endDate.setDate(endDate.getDate() + 1))) {
        SetErrorMsg(source, clientside_arguments, errMsgs);
    }

}

 function CompareDepartDateOverlap(newDepartDate, cartReturnDate, source, clientside_arguments, errMsgs) {
     if (newDepartDate > cartReturnDate) {
         SetErrorMsg(source, clientside_arguments, errMsgs);
     }
     else {
         clientside_arguments.IsValid = true;
         return true;
     }
 }
 
 function CompareReturnDateOverlap(newReturnDate, cartDepartDate, source, clientside_arguments, errMsgs) {
     if (newReturnDate < cartDepartDate) {
         SetErrorMsg(source, clientside_arguments, errMsgs);
     }
     else {
         clientside_arguments.IsValid = true;
         return true;         
     }
 }
 
function ResetValue(ControlID)
{
    if(IsNotNull(rt.Dep))
    {
        if(rt.Dep.id == ControlID)
        {
            rt.departureDT = null;
        }
    }
    if(IsNotNull(rt.Ret))
    {
        if(rt.Ret.id == ControlID)
        {
            rt.returnDT = null;
        }
    }
    if(IsNotNull(rt.ChkIn))
    {
        if(rt.ChkIn.id == ControlID)
        {
            rt.chkinDT = null;
        }
    }
    if(IsNotNull(rt.ChkOut))
    {
        if(rt.ChkOut.id == ControlID)
        {
            rt.chkOutDT = null;
        }
    }       
    if(IsNotNull(rt.PiUp))
    {
        if(rt.PiUp.id == ControlID)
        {
            rt.picupDT = null;
        }
    }
    if(IsNotNull(rt.DrOff))
    {
        if(rt.DrOff.id == ControlID)
        {
            rt.drOffDT = null;
        }
    }        
} 
  
function SetErrorMsg(CusE,CsArgs,ErrorMsg)
{
  CollapseErrorPanel(CusE.controltovalidate);
  CusE.errormessage = ErrorMsg;
  CsArgs.IsValid = false;
}

function Trim(str) {
    if (!str || typeof str != 'string' || str == "") {
        return "";
    }
    else {
        return str.replace(/^[\s]+/, '').replace(/[\s]+$/, '').replace(/[\s]{2,}/, ' ');
    }
}

function CollapseErrorPanel(ControlID)
{
    if (typeof rt != 'undefined') {
        if(IsNotNull(rt.ChkIn))
        {
            if(rt.ChkIn.id == ControlID)
            {
                if($find("cpeSearchHotel"))
                {
                 $find("cpeSearchHotel").expandPanel("pnlSearchHotelContent");
                }
            }
        }
        if(IsNotNull(rt.ChkOut))
        {
            if(rt.ChkOut.id == ControlID)
            {
                if($find("cpeSearchHotel"))
                {
                 $find("cpeSearchHotel").expandPanel("pnlSearchHotelContent");
                }
            }
        }       
        if(IsNotNull(rt.PiUp))
        {
            if(rt.PiUp.id == ControlID)
            {
                if($find("cpeSearchRentalCar"))
                {
                 $find("cpeSearchRentalCar").expandPanel("pnlSearchRentalCar");  
                }
            }
        }
        if(IsNotNull(rt.DrOff))
        {
            if(rt.DrOff.id == ControlID)
            {
                if($find("cpeSearchRentalCar"))
                {
                 $find("cpeSearchRentalCar").expandPanel("pnlSearchRentalCar");  
                }
            }
        }
    } 
}
//END Trisept.UI.Web.Search.datevalidates.js
//START Trisept.UI.Web.Search.ExternalRestooldatevalidates.js
function ExternalRestoolDateValidate(source, clientside_arguments)
{
var clientsideArguments = Trim(clientside_arguments.Value);
 if(clientsideArguments == "" || clientsideArguments == null) 
   {
       ResetValue(source.controltovalidate);
       SetErrorMsg(source, clientside_arguments, String.format(RestoolClientSideErrorMessage.RequiredDate, GlobalFormat.SiteDateFormat));
     return false; 
   }
  else
   {

    var getErrorMsg;
        var dValidate = source.controltovalidate;
        if (IsNotNull($get(dValidate)))
        {
               if(IsNotNull(rt.Dep))
               rt.departureDT = parseVaxDate(rt.Dep.value);
               
               if(IsNotNull(rt.Ret))
               rt.returnDT = parseVaxDate(rt.Ret.value);
               
               if(IsNotNull(rt.ChkIn))
               rt.chkinDT = parseVaxDate(rt.ChkIn.value);
               
               if(IsNotNull(rt.ChkOut))
               rt.chkOutDT = parseVaxDate(rt.ChkOut.value);
               
               if(IsNotNull(rt.PiUp))
               rt.picupDT = parseVaxDate(rt.PiUp.value);
               
               if(IsNotNull(rt.DrOff))
               rt.drOffDT = parseVaxDate(rt.DrOff.value);
               
                if(IsNotNull(rt.Dep))
                {
                   if(rt.Dep.id == dValidate)
                   {
						rt.departureDT = parseVaxDate(clientsideArguments);
						if(IsNotNull(rt.departureDT))
						{
						   var todayDT = new Date();
						   CheckDepRetDates(todayDT,rt.departureDT,source,clientside_arguments,RestoolClientSideErrorMessage.DepartureDtGreaterThanTodayDt);
						}
						else
						{
						    SetErrorMsg(source, clientside_arguments, String.format(RestoolClientSideErrorMessage.CheckDate, GlobalFormat.SiteDateFormat));
						}
				    }
                }

                if(IsNotNull(rt.Ret))
                {
                   if(rt.Ret.id == dValidate)
                   {                
						rt.returnDT = parseVaxDate(clientsideArguments);
						if(IsNotNull(rt.returnDT))
							{
						      if(IsNotNull(rt.departureDT))
						        {				
						          CheckDepRetDates(rt.departureDT,rt.returnDT,source,clientside_arguments,RestoolClientSideErrorMessage.ReturnDtGreaterThanDepDt);
						        }   
							   else
							    {
							      clientside_arguments.IsValid = true;
							      return true;  
							    }							
							  }	
						else
						{
						    SetErrorMsg(source, clientside_arguments, String.format(RestoolClientSideErrorMessage.CheckDate, GlobalFormat.SiteDateFormat));
						}
				    }
                }

                

                

                
                
 
        }
   }
}

function CheckDepRetDates(startDate,endDate,source,clientside_arguments,errMsgs)
{
    if(startDate < endDate)
    {
		clientside_arguments.IsValid = true;
		return true;
    }
    else
    {
        SetErrorMsg(source,clientside_arguments,errMsgs);
    }     
}


 function CompareStartEndDates(startDate,endDate,source,clientside_arguments,errMsgs)
 {
    if(startDate <= endDate)
    {
		clientside_arguments.IsValid = true;
		return true;
    }
    else
    {
        SetErrorMsg(source,clientside_arguments,errMsgs);
    }           
 }
 
 
 function ResetValue(ControlID)
{
    if(IsNotNull(rt.Dep))
    {
        if(rt.Dep.id == ControlID)
        {
            rt.departureDT = null;
        }
    }
    if(IsNotNull(rt.Ret))
    {
        if(rt.Ret.id == ControlID)
        {
            rt.returnDT = null;
        }
    }       
} 
  
function SetErrorMsg(CusE,CsArgs,ErrorMsg)
{
  CusE.errormessage = ErrorMsg;
  CsArgs.IsValid = false;               
}
function Trim(str)
{
    if(!str || typeof str != 'string')
        return null;
        return str.replace(/^[\s]+/,'').replace(/[\s]+$/,'').replace(/[\s]{2,}/,' ');
}

function IsNotNull(obj)
{
    if(obj != null)
    {
        return true;
    }
    else
    {
        return false;
    }
}
//END Trisept.UI.Web.Search.ExternalRestooldatevalidates.js
//START Trisept.UI.Web.Shell.accessibleMegaMenu.js
!function (e, t, s) { "use strict"; var a, n, i, l, o, r, u, c, f, h, d, g, p, m, b, C, v, x, y, D, T, E, k = "accessibleMegaMenu", I = { uuidPrefix: "accessible-megamenu", menuClass: "accessible-megamenu", topNavItemClass: "accessible-megamenu-top-nav-item", panelClass: "accessible-megamenu-panel", panelGroupClass: "accessible-megamenu-panel-group", hoverClass: "hover", focusClass: "focus", openClass: "open", toggleButtonClass: "accessible-megamenu-toggle", openDelay: 0, closeDelay: 250, openOnMouseover: !1 }, M = { BACKSPACE: 8, COMMA: 188, DELETE: 46, DOWN: 40, END: 35, ENTER: 13, ESCAPE: 27, HOME: 36, LEFT: 37, PAGE_DOWN: 34, PAGE_UP: 33, PERIOD: 190, RIGHT: 39, SPACE: 32, TAB: 9, UP: 38, keyMap: { 48: "0", 49: "1", 50: "2", 51: "3", 52: "4", 53: "5", 54: "6", 55: "7", 56: "8", 57: "9", 59: ";", 65: "a", 66: "b", 67: "c", 68: "d", 69: "e", 70: "f", 71: "g", 72: "h", 73: "i", 74: "j", 75: "k", 76: "l", 77: "m", 78: "n", 79: "o", 80: "p", 81: "q", 82: "r", 83: "s", 84: "t", 85: "u", 86: "v", 87: "w", 88: "x", 89: "y", 90: "z", 96: "0", 97: "1", 98: "2", 99: "3", 100: "4", 101: "5", 102: "6", 103: "7", 104: "8", 105: "9", 190: "." } }, F = t.clearTimeout, N = t.setTimeout, P = t.opera && "[object Opera]" === t.opera.toString(); function A(t, s) { this.element = t, this.settings = e.extend({}, I, s), this._defaults = I, this._name = k, this.mouseTimeoutID = null, this.focusTimeoutID = null, this.mouseFocused = !1, this.justFocused = !1, this.init() } function w(t) { return e.expr.filters.visible(t) && !e(t).parents().addBack().filter(function () { return "hidden" === e.css(this, "visibility") }).length } function j(t, s) { var a, n, i, l = t.nodeName.toLowerCase(); return "area" === l ? (n = (a = t.parentNode).name, !(!t.href || !n || "map" !== a.nodeName.toLowerCase()) && (!!(i = e("img[usemap=#" + n + "]")[0]) && w(i))) : (/input|select|textarea|button|object/.test(l) ? !t.disabled : "a" === l && t.href || s) && w(t) } A.prototype = (D = 0, T = "", E = "ontouchstart" in t || t.navigator.msMaxTouchPoints, a = function (t) { return e(t).closest(":data(plugin_" + k + ")").data("plugin_" + k) }, n = function (t) { t = e(t); var s = this.settings; t.attr("id") || t.attr("id", s.uuidPrefix + "-" + (new Date).getTime() + "-" + ++D) }, i = function (t, a) { var n, i = e(t.target), l = this, o = this.settings, r = this.menu, u = i.closest("." + o.topNavItemClass), c = i.hasClass(o.panelClass) ? i : i.closest("." + o.panelClass); if (b.call(this, !0), a) if ((u = r.find("." + o.topNavItemClass + " ." + o.openClass + ":first").closest("." + o.topNavItemClass)).is(t.relatedTarget) || u.has(t.relatedTarget).length > 0) 0 === u.length && r.find("[aria-expanded=true]").attr("aria-expanded", "false").removeClass(o.openClass).filter("." + o.panelClass).attr("aria-hidden", "true"); else { if (("mouseout" === t.type || "focusout" === t.type) && u.has(s.activeElement).length > 0) return; u.find("[aria-expanded]").attr("aria-expanded", "false").removeClass(o.openClass).filter("." + o.panelClass).attr("aria-hidden", "true"), ("keydown" === t.type && t.keyCode === M.ESCAPE || "DOMAttrModified" === t.type) && (n = u.find(":tabbable:first"), N(function () { r.find("[aria-expanded]." + l.settings.panelClass).off("DOMAttrModified.accessible-megamenu"), n.focus(), l.justFocused = !1 }, 99)) } else { F(l.focusTimeoutID), u.siblings().find("[aria-expanded]").attr("aria-expanded", "false").removeClass(o.openClass).filter("." + o.panelClass).attr("aria-hidden", "true"), u.find("[aria-expanded]").attr("aria-expanded", "true").addClass(o.openClass).filter("." + o.panelClass).attr("aria-hidden", "false"); var f = e("html")[0].scrollTop, h = e("." + o.panelClass + "." + o.openClass).parent().offset().top; f > h && (e("html")[0].scrollTop = h), "mouseover" === t.type && i.is(":tabbable") && 1 === u.length && 0 === c.length && r.has(s.activeElement).length > 0 && (i.focus(), l.justFocused = !1), b.call(l) } }, l = function (t) { var s = e(t.target).closest(":tabbable"), a = s.closest("." + this.settings.topNavItemClass), n = s.closest("." + this.settings.panelClass); 1 === a.length && 0 === n.length && 1 === a.find("." + this.settings.panelClass).length && (s.hasClass(this.settings.openClass) ? this.justFocused ? (t.preventDefault(), t.stopPropagation(), this.justFocused = !1) : (E || !E && !this.settings.openOnMouseover) && (t.preventDefault(), t.stopPropagation(), i.call(this, t, s.hasClass(this.settings.openClass))) : (t.preventDefault(), t.stopPropagation(), i.call(this, t), this.justFocused = !1)) }, o = function () { this.justMoved = !0 }, r = function (t) { 0 === e(t.target).closest(this.menu).length && (t.preventDefault(), t.stopPropagation(), i.call(this, t, !0)) }, y = function (e) { e.preventDefault(), e.stopPropagation(), v.call(this), i.call(this, e, !0), N(function (e) { C.call(e) }, 300, this) }, u = function (t) { "aria-expanded" === t.originalEvent.attrName && "false" === t.originalEvent.newValue && e(t.target).hasClass(this.settings.openClass) && (t.preventDefault(), t.stopPropagation(), i.call(this, t, !0)) }, c = function (t) { F(this.focusTimeoutID); var s = e(t.target), a = s.closest("." + this.settings.panelClass); s.addClass(this.settings.focusClass), this.justFocused = !this.mouseFocused || !this.settings.openOnMouseover && this.mouseFocused, this.mouseFocused = !1, this.justFocused && this.panels.not(a).filter("." + this.settings.openClass).length && i.call(this, t) }, f = function (s) { this.justFocused = !1; var a = this, n = e(s.target), l = n.closest("." + this.settings.topNavItemClass); n.removeClass(this.settings.focusClass), t.cvox ? a.focusTimeoutID = N(function () { t.cvox.Api.getCurrentNode(function (e) { l.has(e).length ? F(a.focusTimeoutID) : a.focusTimeoutID = N(function (e, t, s) { i.call(e, t, s) }, 275, a, s, !0) }) }, 25) : a.focusTimeoutID = N(function () { a.mouseFocused && null === s.relatedTarget || i.call(a, s, !0) }, 300) }, h = function (t) { var s, n, o, r, u, c, f = this.constructor === A ? this : a(this), h = f.settings, d = e(e(this).is("." + h.hoverClass + ":tabbable") ? this : t.target), g = f.menu, p = f.topnavitems, m = d.closest("." + h.topNavItemClass), b = g.find(":tabbable"), C = d.hasClass(h.panelClass) ? d : d.closest("." + h.panelClass), v = C.find("." + h.panelGroupClass), x = d.closest("." + h.panelGroupClass), y = t.keyCode || t.which, D = !1, E = M.keyMap[t.keyCode] || "", k = 1 === m.length && 0 === C.length; if (!d.is("input:focus, select:focus, textarea:focus, button:focus")) { switch (d.is("." + h.hoverClass + ":tabbable") && e("html").off("keydown.accessible-megamenu"), y) { case M.ESCAPE: this.mouseFocused = !1, i.call(f, t, !0); break; case M.DOWN: t.preventDefault(), this.mouseFocused = !1, k ? (i.call(f, t), D = 1 === m.find("." + h.panelClass + " :tabbable:first").focus().length) : D = 1 === b.filter(":gt(" + b.index(d) + "):first").focus().length, !D && P && (t.ctrlKey || t.metaKey) && (o = (b = e(":tabbable")).index(d), D = 1 === e(":tabbable:gt(" + e(":tabbable").index(d) + "):first").focus().length); break; case M.UP: t.preventDefault(), this.mouseFocused = !1, k && d.hasClass(h.openClass) ? (i.call(f, t, !0), (s = p.filter(":lt(" + p.index(m) + "):last")).children("." + h.panelClass).length && (D = 1 === s.find("[aria-expanded]").attr("aria-expanded", "true").addClass(h.openClass).filter("." + h.panelClass).attr("aria-hidden", "false").find(":tabbable:last").focus())) : k || (D = 1 === b.filter(":lt(" + b.index(d) + "):last").focus().length), !D && P && (t.ctrlKey || t.metaKey) && (o = (b = e(":tabbable")).index(d), D = 1 === e(":tabbable:lt(" + e(":tabbable").index(d) + "):first").focus().length); break; case M.RIGHT: t.preventDefault(), this.mouseFocused = !1, k ? D = 1 === p.filter(":gt(" + p.index(m) + "):first").find(":tabbable:first").focus().length : (v.length && x.length && (D = 1 === v.filter(":gt(" + v.index(x) + "):first").find(":tabbable:first").focus().length), D || (D = 1 === m.find(":tabbable:first").focus().length)); break; case M.LEFT: t.preventDefault(), this.mouseFocused = !1, k ? D = 1 === p.filter(":lt(" + p.index(m) + "):last").find(":tabbable:first").focus().length : (v.length && x.length && (D = 1 === v.filter(":lt(" + v.index(x) + "):last").find(":tabbable:first").focus().length), D || (D = 1 === m.find(":tabbable:first").focus().length)); break; case M.TAB: this.mouseFocused = !1, o = b.index(d), t.shiftKey && k && d.hasClass(h.openClass) ? (i.call(f, t, !0), (s = p.filter(":lt(" + p.index(m) + "):last")).children("." + h.panelClass).length && (D = s.children().attr("aria-expanded", "true").addClass(h.openClass).filter("." + h.panelClass).attr("aria-hidden", "false").find(":tabbable:last").focus())) : t.shiftKey && o > 0 ? D = 1 === b.filter(":lt(" + o + "):last").focus().length : !t.shiftKey && o < b.length - 1 ? D = 1 === b.filter(":gt(" + o + "):first").focus().length : P && (o = (b = e(":tabbable")).index(d), D = t.shiftKey ? 1 === e(":tabbable:lt(" + e(":tabbable").index(d) + "):last").focus().length : 1 === e(":tabbable:gt(" + e(":tabbable").index(d) + "):first").focus().length), D && t.preventDefault(); break; case M.SPACE: case M.ENTER: if (!k) return !0; t.preventDefault(), l.call(f, t); break; default: if (F(this.keydownTimeoutID), 0 === (T += E !== T ? E : "").length) return; for (this.keydownTimeoutID = N(function () { T = "" }, 1e3), b = k && !d.hasClass(h.openClass) ? b.filter(":not(." + h.panelClass + " :tabbable)") : m.find(":tabbable"), t.shiftKey && (b = e(b.get().reverse())), o = 0; o < b.length; o++) if ((r = b.eq(o)).is(d)) { n = 1 === T.length ? o + 1 : o; break } for (c = new RegExp("^" + T.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g, "\\$&"), "i"), o = n; o < b.length; o++) if (r = b.eq(o), u = e.trim(r.text()), c.test(u)) { D = !0, r.focus(); break } if (!D) for (o = 0; o < n; o++) if (r = b.eq(o), u = e.trim(r.text()), c.test(u)) { r.focus(); break } } f.justFocused = !1 } }, d = function (t) { (e(t.target).closest(this.settings.panelClass) || e(t.target).closest(":focusable").length) && (this.mouseFocused = !0, e(t.target).closest(this.settings.menuClass) && e("html").on("keydown.accessible-megamenu", e.proxy(h, t.target))), F(this.mouseTimeoutID), this.mouseTimeoutID = N(function () { F(this.focusTimeoutID) }, 1) }, g = function (t) { F(this.mouseTimeoutID); var s = this; s.settings.openOnMouseover && (this.mouseTimeoutID = N(function () { e(t.target).addClass(s.settings.hoverClass), i.call(s, t), e(t.target).closest(s.settings.menuClass) && e("html").on("keydown.accessible-megamenu", e.proxy(h, t.target)) }, this.settings.openDelay)) }, p = function (t) { F(this.mouseTimeoutID); var s = this; s.settings.openOnMouseover && (e(t.target).removeClass(s.settings.hoverClass), s.mouseTimeoutID = N(function () { i.call(s, t, !0) }, this.settings.closeDelay), e(t.target).is(":tabbable") && e("html").off("keydown.accessible-megamenu")) }, m = function () { var e = "true" === this.toggleButton.attr("aria-expanded"); this.toggleButton.attr({ "aria-expanded": !e, "aria-pressed": !e }) }, b = function (t) { var s = this.menu; t ? (e("html").off("mouseup.outside-accessible-megamenu, touchend.outside-accessible-megamenu, mspointerup.outside-accessible-megamenu,  pointerup.outside-accessible-megamenu"), s.find("[aria-expanded]." + this.settings.panelClass).off("DOMAttrModified.accessible-megamenu")) : (e("html").on("mouseup.outside-accessible-megamenu, touchend.outside-accessible-megamenu, mspointerup.outside-accessible-megamenu,  pointerup.outside-accessible-megamenu", e.proxy(r, this)), s.find("[aria-expanded=true]." + this.settings.panelClass).on("DOMAttrModified.accessible-megamenu", e.proxy(u, this))) }, C = function () { var t = this.menu, a = this.toggleButton; t.on("focusin.accessible-megamenu", ":focusable, ." + this.settings.panelClass, e.proxy(c, this)).on("focusout.accessible-megamenu", ":focusable, ." + this.settings.panelClass, e.proxy(f, this)).on("keydown.accessible-megamenu", e.proxy(h, this)).on("mouseover.accessible-megamenu", e.proxy(g, this)).on("mouseout.accessible-megamenu", e.proxy(p, this)).on("mousedown.accessible-megamenu", e.proxy(d, this)).on("click.accessible-megamenu", e.proxy(l, this)), a.on("click.accessible-megamenu", e.proxy(m, this)), E && t.on("touchmove.accessible-megamenu", e.proxy(o, this)), e(s.activeElement).closest(t).length && e(s.activeElement).trigger("focusin.accessible-megamenu") }, v = function () { var e = this.menu, t = this.toggleButton; e.off(".accessible-megamenu"), e.find("[aria-expanded=true]." + this.settings.panelClass).length && b.call(this, !0), t.off(".accessible-megamenu") }, x = function (t) { t.on("click.close-nav-menu", e.proxy(y, this)) }, { constructor: A, init: function () { var t = this.settings, s = e(this.element), a = s.children("ol,ul").first(), n = a.children(), i = s.children("button").first(); this.start(t, s, a, n, i) }, start: function (t, s, a, i, l) { var o = this; this.settings = t, this.menu = a, this.topnavitems = i, this.toggleButton = l, s.attr("role", "navigation"), n.call(o, a), a.addClass(t.menuClass), a.addClass(["js", t.menuClass].join("-")), i.each(function (s, a) { var i, l, r; (a = e(a)).addClass(t.topNavItemClass), i = a.find(":tabbable:first"), (r = (l = a.children(":not(:tabbable):last")).children(".close-nav-menu")).length && x.call(o, r), n.call(o, i), l.length && (n.call(o, l), i.attr({ role: "button", "aria-controls": l.attr("id"), "aria-expanded": !1, tabindex: 0 }), l.attr({ role: "region", "aria-expanded": !1, "aria-hidden": !0 }).addClass(t.panelClass).not("[aria-labelledby]").attr("aria-labelledby", i.attr("id"))) }), this.panels = a.find("." + t.panelClass), a.find("hr").attr("role", "separator"), l.addClass(t.toggleButtonClass), l.attr({ "aria-expanded": !1, "aria-pressed": !1, "aria-controls": a.attr("id") }), C.call(this) }, destroy: function () { this.menu.removeClass(["js", this.settings.menuClass].join("-")), v.call(this, !0) }, getDefaults: function () { return this._defaults }, getOption: function (e) { return this.settings[e] }, getAllOptions: function () { return this.settings }, setOption: function (e, t, s) { this.settings[e] = t, s && this.init() } }), e.fn[k] = function (t) { return this.each(function () { var s = e.data(this, "plugin_" + k); s ? "function" == typeof s[t] && s[t].apply(s, Array.prototype.slice.call(arguments, 1)) : e.data(this, "plugin_" + k, new e.fn[k].AccessibleMegaMenu(this, t)) }) }, e.fn[k].AccessibleMegaMenu = A, e.extend(e.expr[":"], { data: e.expr.createPseudo ? e.expr.createPseudo(function (t) { return function (s) { return !!e.data(s, t) } }) : function (t, s, a) { return !!e.data(t, a[3]) }, focusable: function (t) { return j(t, !isNaN(e.attr(t, "tabindex"))) }, tabbable: function (t) { var s = e.attr(t, "tabindex"), a = isNaN(s); return (a || s >= 0) && j(t, !a) } }) }(jQuery, window, document);
//END Trisept.UI.Web.Shell.accessibleMegaMenu.js
//START Trisept.UI.Web.Shell.objsort.js
tfObjSort={
	init:function(){
		Array.prototype.objSort=function(){
			tfObjSort.setThings(this);
			var a=arguments;
			var x=tfObjSort;
			x.a=[];x.d=[];
			for(var i=0;i<a.length;i++){
				if(typeof a[i]=="string"){x.a.push(a[i]);x.d.push(1)};
				if(a[i]===-1){x.d[x.d.length-1]=-1}
			}
			return this.sort(tfObjSort.sorter);
		};
		Array.prototype.strSort=function(){
			tfObjSort.setThings(this);
			return this.sort(tfObjSort.charSorter)
		}
	},
	sorter:function(x,y){
		var a=tfObjSort.a
		var d=tfObjSort.d
		var r=0
		for(var i=0;i<a.length;i++){
			if(typeof x+typeof y!="objectobject"){return typeof x=="object"?-1:1};
			var m=x[a[i]]; var n=y[a[i]];
			var t=typeof m+typeof n;
			if(t=="booleanboolean"){m*=-1;n*=-1}
			else if(t.split("string").join("").split("number").join("")!=""){continue};
			r=m-n;
			if(isNaN(r)){r=tfObjSort.charSorter(m,n)};
			if(r!=0){return r*d[i]}
		}
		return r
	},
	charSorter:function(x,y){
		if(tfObjSort.ignoreCase){x=x.toLowerCase();y=y.toLowerCase()};
		var s=tfObjSort.chars;
		if(!s){return x>y?1:x<y?-1:0};
		x=x.split("");y=y.split("");l=x.length>y.length?y.length:x.length;
		var p=0;
		for(var i=0;i<l;i++){
			p=s.indexOf(x[i])-s.indexOf(y[i]);
			if(p!=0){break};
		};
		if(p==0){p=x.length-y.length};
		return p
	},
	setThings:function(x){
		this.ignoreCase=x.sortIgnoreCase;
		var s=x.sortCharOrder;
		if(!s){this.chars=false;return true};
		if(!s.sort){s=s.split(",")};
		var a="";
		for(var i=1;i<1024;i++){a+=String.fromCharCode(i)};
		for(var i=0;i<s.length;i++){
			z=s[i].split("");
			var m=z[0]; var n=z[1]; var o="";
			if(z[2]=="_"){o=n+m} else {o=m+n};
			a=a.split(m).join("").split(n).join(o);
		};
		this.chars=a
	}
};
tfObjSort.init();

//END Trisept.UI.Web.Shell.objsort.js
//START Trisept.UI.Web.Shell.availabilityFlows2.js
/*
Functions relating to avail flows.  Split into separate file so avail flow can be applied separately from places that need
to use avail JSON objects (i.e. feature upsell on booking). This file was moved to avail so that any can project can reference
this file.
*/
Type.registerNamespace("Avail");

OnCompleteAddItemModalFlow = function (arg) {
    OnCompleteAddItemModalFlowAutoSelectAir(arg);
}

OnCompleteAddItemModalFlowAutoSelectAirForHotelPackages = function (arg) {
    OnCompleteAddItemModalFlowAutoSelectAir(arg);
}

OnCompleteAddItemModalFlowAutoSelectAir = function (arg) {
    if (arg.R == true) {
        if (typeof (Avail.UpdateAvailDisplayPrices) === "function") { Avail.UpdateAvailDisplayPrices(arg); }
        if (AvailabilityScriptStrings.DisableModalCart) {
            window.location = AvailabilityScriptStrings.CartURL + "&t=" + new Date().getTime();
        } else {
            var eu = AvailabilityScriptStrings.CartURL + "&t=" + new Date().getTime();
            if (typeof (hideAllModals) === "function") { hideAllModals(); }
            if (typeof (showModal) === "function") { showModal("", "modalPopup", 1, -1, WebForm_GetScrollY() + 20, eu, 640, 650); }
            if (typeof (Avail.UpdateAvailabilityScriptStringsPrices) === "function") { Avail.UpdateAvailabilityScriptStringsPrices(arg); }
        }


    } else {
        var eu = AvailabilityScriptStrings.ExceptionURL + (AvailabilityScriptStrings.ExceptionURL.indexOf("?") == -1 ? "?t=" : "&t=") + new Date().getTime();
        if (typeof (hideAllModals) === "function") { hideAllModals(); }
        if (typeof (showModal) === "function") { showModal("", "modalPopup", 3, -1, -1, eu, 900, 400); }
    }
}

/*
Builds url with cart information
*/
OnCompleteAddItemStandardToModalFlow = function (arg, handler) {
    if (((arg.K == null) || (arg.K == "")) && ((arg.N == null) || (arg.N == ""))) {
        if (window[handler]) {
            eval(handler + "()");
        } else {
            OnCompleteAddItemModalFlowAutoSelectAir(arg);
        }
    } else {
        var url = AvailabilityScriptStrings.AvailUrl;
        url += "&cmpt=" + arg.N;
        if ((arg.K != null) && (arg.K != "")) {
            if (arg.N == "A") {
                url += "&leg=" + arg.K;
            }
            else {
                url += "&stop=" + arg.K;
            }
        }
        window.location = url;
    }
}

OnCompleteAddItemSimpleFlow = function (arg, handler) {
    OnCompleteAddItemStandardToModalFlow(arg);
}

OnCompleteAddItemStandardFlow = function (arg) {
    OnCompleteAddItemStandardToModalFlow(arg);
}

OnCompleteAddItemMultiStopFlow = function (arg) {
    OnCompleteAddItemStandardToModalFlow(arg);
}

OnCompleteAddItemStandardRequiredComponentsFlow = function (arg) {
    OnCompleteAddItemStandardToModalFlow(arg, "SRCFCompleteHandler");
}

if (typeof(Sys) !== "undefined") Sys.Application.notifyScriptLoaded();
//END Trisept.UI.Web.Shell.availabilityFlows2.js
//START Trisept.UI.Web.Shell.js-cookie.js
/*!
* Javascript Cookie v1.5.1
* https://github.com/js-cookie/js-cookie
*
* Copyright 2006, 2014 Klaus Hartl
* Released under the MIT license
*/
(function (factory) {
    var jQuery;
    if (typeof define === 'function' && define.amd) {
        // AMD (Register as an anonymous module)
        define(['jquery'], factory);
    } else if (typeof exports === 'object') {
        // Node/CommonJS
        try {
            jQuery = require('jquery');
        } catch (e) { }
        module.exports = factory(jQuery);
    } else {
        // Browser globals
        var _OldCookies = window.Cookies;
        var api = window.Cookies = factory(window.jQuery);
        api.noConflict = function () {
            window.Cookies = _OldCookies;
            return api;
        };
    }
} (function ($) {

    var pluses = /\+/g;

    function encode(s) {
        return api.raw ? s : encodeURIComponent(s);
    }

    function decode(s) {
        return api.raw ? s : decodeURIComponent(s);
    }

    function stringifyCookieValue(value) {
        return encode(api.json ? JSON.stringify(value) : String(value));
    }

    function parseCookieValue(s) {
        if (s.indexOf('"') === 0) {
            // This is a quoted cookie as according to RFC2068, unescape...
            s = s.slice(1, -1).replace(/\\"/g, '"').replace(/\\\\/g, '\\');
        }

        try {
            // Replace server-side written pluses with spaces.
            // If we can't decode the cookie, ignore it, it's unusable.
            // If we can't parse the cookie, ignore it, it's unusable.
            s = decodeURIComponent(s.replace(pluses, ' '));
            return api.json ? JSON.parse(s) : s;
        } catch (e) { }
    }

    function read(s, converter) {
        var value = api.raw ? s : parseCookieValue(s);
        return isFunction(converter) ? converter(value) : value;
    }

    function extend() {
        var key, options;
        var i = 0;
        var result = {};
        for (; i < arguments.length; i++) {
            options = arguments[i];
            for (key in options) {
                result[key] = options[key];
            }
        }
        return result;
    }

    function isFunction(obj) {
        return Object.prototype.toString.call(obj) === '[object Function]';
    }

    var api = function (key, value, options) {

        // Write

        if (arguments.length > 1 && !isFunction(value)) {
            options = extend(api.defaults, options);

            if (typeof options.expires === 'number') {
                var days = options.expires, t = options.expires = new Date();
                t.setMilliseconds(t.getMilliseconds() + days * 864e+5);
            }

            return (document.cookie = [
				encode(key), '=', stringifyCookieValue(value),
				options.expires ? '; expires=' + options.expires.toUTCString() : '', // use expires attribute, max-age is not supported by IE
				options.path ? '; path=' + options.path : '',
				options.domain ? '; domain=' + options.domain : '',
				options.secure ? '; secure' : ''
			].join(''));
        }

        // Read

        var result = key ? undefined : {},
        // To prevent the for loop in the first place assign an empty array
        // in case there are no cookies at all. Also prevents odd result when
        // calling "get()".
			cookies = document.cookie ? document.cookie.split('; ') : [],
			i = 0,
			l = cookies.length;

        for (; i < l; i++) {
            var parts = cookies[i].split('='),
				name = decode(parts.shift()),
				cookie = parts.join('=');

            if (key === name) {
                // If second argument (value) is a function it's a converter...
                result = read(cookie, value);
                break;
            }

            // Prevent storing a cookie that we couldn't decode.
            if (!key && (cookie = read(cookie)) !== undefined) {
                result[name] = cookie;
            }
        }

        return result;
    };

    api.get = api.set = api;
    api.defaults = {};

    api.remove = function (key, options) {
        // Must not alter options, thus extending a fresh object...
        api(key, '', extend(options, { expires: -1 }));
        return !api(key);
    };

    if ($) {
        $.cookie = api;
        $.removeCookie = api.remove;
    }

    return api;
}));

if (typeof (Sys) !== "undefined") Sys.Application.notifyScriptLoaded();
//END Trisept.UI.Web.Shell.js-cookie.js
//START Trisept.UI.Web.Shell.QueryString.js
function GetQueryStringParam(name, url) {
    if (!url) url = window.location.href;
    name = name.replace(/[\[\]]/g, "\\$&");
    var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)", "i"),
            results = regex.exec(url);
    if (!results) return null;
    if (!results[2]) return '';
    return decodeURIComponent(results[2].replace(/\+/g, " "));
}

if (typeof (Sys) !== "undefined") Sys.Application.notifyScriptLoaded();
//END Trisept.UI.Web.Shell.QueryString.js
//START Trisept.UI.Web.Shell.common.js
/* Event Functions */

// Add an event to the obj given
// event_name refers to the event trigger, without the "on", like click or mouseover
// func_name refers to the function callback when event is triggered
function addEvent(obj,event_name,func_name){
	if (obj.attachEvent){
		obj.attachEvent("on"+event_name, func_name);
	}else if(obj.addEventListener){
		obj.addEventListener(event_name,func_name,true);
	}else{
		obj["on"+event_name] = func_name;
	}
}

// Removes an event from the object
function removeEvent(obj,event_name,func_name){
	if (obj.detachEvent){
		obj.detachEvent("on"+event_name,func_name);
	}else if(obj.removeEventListener){
		obj.removeEventListener(event_name,func_name,true);
	}else{
		obj["on"+event_name] = null;
	}
}

// Stop an event from bubbling up the event DOM
function stopEvent(evt){
	evt || window.event;
	if (evt.stopPropagation){
		evt.stopPropagation();
		evt.preventDefault();
	}else if(typeof evt.cancelBubble != "undefined"){
		evt.cancelBubble = true;
		evt.returnValue = false;
	}
	return false;
}

// Get the obj that starts the event
function getElement(evt){
	if (window.event){
		return window.event.srcElement;
	}else{
		return evt.currentTarget;
	}
}
// Get the obj that triggers off the event
function getTargetElement(evt){
	if (window.event){
		return window.event.srcElement;
	}else{
		return evt.target;
	}
}
// For IE only, stops the obj from being selected
function stopSelect(obj){
	if (typeof obj.onselectstart != 'undefined'){
		addEvent(obj,"selectstart",function(){ return false;});
	}
}

/*    Caret Functions     */

// Get the end position of the caret in the object. Note that the obj needs to be in focus first
function getCaretEnd(obj){
	if(typeof obj.selectionEnd != "undefined"){
		return obj.selectionEnd;
	}else if(document.selection&&document.selection.createRange){
		var M=document.selection.createRange();
		try{
			var Lp = M.duplicate();
			Lp.moveToElementText(obj);
		}catch(e){
		    M = obj.createTextRange();
		    Lp = M.duplicate();	
		}
		Lp.setEndPoint("EndToEnd",M);
		var rb=Lp.text.length;
		if(rb>obj.value.length){
			return -1;
		}
		return rb;
	}
}
// Get the start position of the caret in the object
function getCaretStart(obj){
	if(typeof obj.selectionStart != "undefined"){
		return obj.selectionStart;
	}else if(document.selection&&document.selection.createRange){
		var M=document.selection.createRange();
		try{
			var Lp = M.duplicate();
			Lp.moveToElementText(obj);
		}catch(e){
		    M = obj.createTextRange();
		    Lp = M.duplicate();	
		}
		Lp.setEndPoint("EndToStart",M);
		var rb=Lp.text.length;
		if(rb>obj.value.length){
			return -1;
		}
		return rb;
	}
}
// sets the caret position to l in the object
function setCaret(obj,l){
	obj.focus();
	if (obj.setSelectionRange){
		obj.setSelectionRange(l,l);
	}else if(obj.createTextRange){
		m = obj.createTextRange();		
		m.moveStart('character',l);
		m.collapse();
		m.select();
	}
}
// sets the caret selection from s to e in the object
function setSelection(obj,s,e){
	obj.focus();
	if (obj.setSelectionRange){
		obj.setSelectionRange(s,e);
	}else if(obj.createTextRange){
		m = obj.createTextRange();		
		m.moveStart('character',s);
		m.moveEnd('character',e);
		m.select();
	}
}

/*    Escape function   */
String.prototype.addslashes = function(){
	return this.replace(/(["\\\.\|\[\]\^\*\+\?\$\(\)])/g, '\\$1');
}
String.prototype.trim = function () {
    return this.replace(/^\s*(\S*(\s+\S+)*)\s*$/, "$1");
};
/* --- Escape --- */

/* Offset position from top of the screen */
function curTop(obj){
	toreturn = 0;
	while(obj){
		toreturn += obj.offsetTop;
		obj = obj.offsetParent;
	}
	return toreturn;
}
function curLeft(obj){
	toreturn = 0;
	while(obj){
		toreturn += obj.offsetLeft;
		obj = obj.offsetParent;
	}
	return toreturn;
}
/* ------ End of Offset function ------- */

/* Types Function */

// is a given input a number?
function isNumber(a) {
    return typeof a == 'number' && isFinite(a);
}

/* Object Functions */

function replaceHTML(obj,text){
	while(el = obj.childNodes[0]){
		obj.removeChild(el);
	};
	obj.appendChild(document.createTextNode(text));
}

function IsNotNull(obj)
{
    if(obj != null)
    {
        return true;
    }
    else
    {
        return false;
    }
}

/* Object Functions for IE 6.0 */

function addBackgroundIFrame(element, parentElement) {
        /// <summary>
        /// Add an empty IFRAME behind the popup (for IE6 only) so that SELECT, etc., won't
        /// </summary>

        // Get the child frame
    if ((Sys.Browser.agent === Sys.Browser.InternetExplorer) && (Sys.Browser.version < 7)) {
        var childFrame = element._ElementsIFrame;

            // Create the child frame if it wasn't found
            if (!childFrame) {
                childFrame = document.createElement("iframe");
                childFrame.src = "javascript:'<html></html>';";
                childFrame.style.position = "absolute";
                childFrame.style.display = "none";
                childFrame.scrolling = "no";
                childFrame.frameBorder = "0";
                childFrame.tabIndex = "-1";
                childFrame.style.filter = "progid:DXImageTransform.Microsoft.Alpha(style=0,opacity=0)";
                element.parentNode.insertBefore(childFrame, element);
                element._ElementsIFrame = childFrame;
            }

            // Position the frame exactly behind the element
            childFrame.style.top = eval(curTop(parentElement) + parentElement.offsetHeight) + "px";
            childFrame.style.width = (element.offsetWidth) + "px";
            childFrame.align = 'left';
            childFrame.style.left = curLeft(parentElement) + 1 + "px";
            if(element.scrollHeight < element.offsetHeight)
                childFrame.style.height = element.scrollHeight;
            else
                childFrame.style.height = element.offsetHeight
            
            childFrame.style.display = element.style.display;
            if (element.currentStyle && element.currentStyle.zIndex) {
                childFrame.style.zIndex = element.currentStyle.zIndex;
            } else if (element.style.zIndex) {
                childFrame.style.zIndex = element.style.zIndex;
            }
        }
    }

/*
createElement function found at http://simon.incutio.com/archive/2003/06/15/javascriptWithXML
*/
function createElement(element) {
    if (typeof document.createElementNS != 'undefined') {
        return document.createElementNS('http://www.w3.org/1999/xhtml', element);
    }
    if (typeof document.createElement != 'undefined') {
        return document.createElement(element);
    }
    return false;
}

function validatePromoCode(sender, args) {
    var clientsideArguments = args.Value.trim();
    if (clientsideArguments != "") {
        var regExp = new RegExp("^[a-zA-Z0-9\-\$ \*]{1,20}$");
        if (!regExp.test(clientsideArguments)) {
            sender.errormessage = RestoolClientSideErrorMessage.InvalidPromoCodeErrorMessage;
            args.IsValid = false;
        }
    }
}

function IsElementInView(element, fullyInView) {
    var pageTop = $(window).scrollTop();
    var pageBottom = pageTop + $(window).height();
    var elementTop = $(element).offset().top;
    var elementBottom = elementTop + $(element).height();

    if (fullyInView === true) {
        return ((pageTop < elementTop) && (pageBottom > elementBottom));
    } else {
        return ((elementTop <= pageBottom) && (elementBottom >= pageTop));
    }
}

function NormalizeDiacritics(text) {
    return text.normalize("NFD").replace(/[\u0300-\u036f]/g, "");
}

 $(document).ready(function () {
    //Override standard jQuery autocomplete matching with version that ignores diacritics
    $.extend($.ui.autocomplete, {
        escapeRegex: function (value) {
            return value.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g, "\\$&");
        },

        filter: function (array, term) {
            var matcher = new RegExp($.ui.autocomplete.escapeRegex(NormalizeDiacritics(term)), "i");
            return $.grep(array, function (value) {
                value = value.label || value.value || value;
                return matcher.test(value) || matcher.test(NormalizeDiacritics(value));
            });
        }
    });
});
//END Trisept.UI.Web.Shell.common.js
//START Trisept.UI.Web.Shell.actb.js
function actb(obj, incregions){
	/* ---- Public Variables ---- */
	this.actb_timeOut = -1; // Autocomplete Timeout in ms (-1: autocomplete never time out)
	this.actb_firstText = false; // should the auto complete be limited to the beginning of keyword?
	this.actb_mouse = true; // Enable Mouse Support
	this.actb_delimiter = new Array(';');  // Delimiter for multiple autocomplete. Set it to empty array for single autocomplete
	this.actb_startcheck = 3; // Show widget only after this number of characters is typed in.
	this.setKeywords = setKeywords;	
	/* ---- Public Variables ---- */

	/* ---- Private Variables ---- */
	var actb_delimwords = new Array();
	var actb_cdelimword = 0;
	var actb_delimchar = new Array();
	var actb_display = false;
	var actb_pos = 0;
	var actb_total = 0;
	var actb_curr = null;
	var actb_rangeu = 0;
	var actb_ranged = 0;
	var actb_bool = new Array();
	var actb_pre = 0;
	var actb_toid;
	var actb_tomake = false;
	var actb_getpre = "";
	var actb_mouse_on_list = 1;
	var actb_kwcount = 0;
	var actb_caretmove = false;
	var actb_incregions = false;
	var actb_previousValue = obj.value;
	this.actb_keywords = new Array();    
	/* ---- Private Variables---- */
	
	var actb_self = this;
	actb_curr = obj;
	
    if (incregions)
        actb_incregions = incregions;
	
	Sys.UI.DomEvent.addHandler(actb_curr,"keydown",actb_checkkey);	 
	Sys.UI.DomEvent.addHandler(actb_curr,"blur",actb_clear);
    Sys.UI.DomEvent.addHandler(actb_curr,"keypress",actb_keypress);
    

	function actb_setup(){
		addEvent(actb_curr,"keydown",actb_checkkey);
		addEvent(actb_curr,"blur",actb_clear);
		addEvent(actb_curr,"keypress",actb_keypress);
	}

	function setKeywords(list) {
	    this.actb_keywords = new Array();
        this.actb_keywords = list;
    }

    function actb_clear(evt) {
	    if (!evt) evt = event;
		actb_removedisp();
		if (actb_previousValue != actb_curr.value ) {
		    actb_previousValue = actb_curr.value;
		    callvalidator();
		}
	}
	
	var seltable;

	function actb_generate() {
	    if (document.getElementById('div_table')) {
	        actb_display = false;
	        var childFrame = document.getElementById('div_table')._ElementsIFrame;
	        if (childFrame) { document.body.removeChild(childFrame); } 
	        document.body.removeChild(document.getElementById('div_table'));
	    } 
	    var selectOption = $get("div_table");
        if(selectOption == null){
		    d = document.createElement('div');
		    d.style.overflow="auto";
            d.style.height = '200px';		  
		    d.id = 'div_table';
		    d.style.position='absolute';
		    d.style.zIndex=100005;
		    d.style.top = eval(curTop(actb_curr) + actb_curr.offsetHeight) + "px";
		    d.style.width=(actb_curr.offsetWidth + 17) + "px";
		    d.align = 'left';
		    d.style.left = curLeft(actb_curr)+1 + "px";
		    if (actb_self.actb_mouse){
			  d.onmouseup=function(){actb_mouse_on_list=1;actb_curr.focus();};
			  d.onmousedown=function(){actb_mouse_on_list=1;actb_curr.focus();};
			  d.onscroll=function(){actb_mouse_on_list=1;actb_curr.focus();};
              d.onfocus=function(){actb_mouse_on_list=1;actb_curr.focus();};
		    }
	    
		    document.body.appendChild(d);
    		
		    a = document.createElement('table');
		    a.cellSpacing='1px';
		    a.cellPadding='2px';
		    a.className="actbBgColor";
		    a.style.textAlign="left";
		    a.style.align="left"
		    a.style.width=(actb_curr.offsetWidth) + "px";
		    a.style.overflow='auto';
		    a.style.border ="1px solid #AAAAAA";		    
		    a.id = 'tat_table';
		    d.appendChild(a);
		    seltable=a;
		    var i;
		    var counter = 0;
		    var first = true;
		    var defaultSelection = false;
		    var defaultValue ="";
		    var j = 1;
		
		    for (i=0;i<actb_self.actb_keywords.length;i++) {
		        if (actb_bool[i]){
		            var t = actb_curr.value.addslashes();
			        if(actb_self.actb_keywords[i].C.toLowerCase() == t.toLowerCase())
			        {
			            defaultSelection = true;
			            defaultValue = actb_self.actb_keywords[i].LD;
			        }
			    }
		    }
			for (i = 0; i < actb_self.actb_keywords.length; i++) {
			    if (((actb_self.actb_keywords[i].R == undefined) && (actb_incregions == false)) || ((actb_self.actb_keywords[i].R == false) && (actb_incregions == false)) || ((actb_self.actb_keywords[i].R == true) && (actb_incregions == true)) || ((actb_self.actb_keywords[i].R == false) && (actb_incregions == true))) {
			        if (actb_bool[i]) {
			            r = a.insertRow(-1);
			            if (defaultSelection) {
			                if (actb_self.actb_keywords[i].LD == defaultValue) {
			                    r.className = "actbHColor";
			                    actb_pos = j;
			                }
			            } else {
			                if (first) {
			                    r.className = "actbHColor";
			                    first = false;
			                    actb_pos = 0;
			                } else {
			                    r.className = "actbBgColor";
			                }
			            }
			            r.id = 'tat_tr' + (j);
			            c = r.insertCell(-1);
			            c.className = "actbTextColor";
			            c.className = "actbFFamily";
			            c.className = "actbFSize";
			            c.setAttribute('pos', j);
			            c.innerHTML = actb_parse(actb_self.actb_keywords[i].LD);
			            c.style.cursor = 'pointer';
			            c.onclick = setvalue;
			            c.onmouseover = highlightRow;
			            c.onmouseout = removehighlightRow;
			            j++;
			        }
			    }
            }
            selectOption = $get("div_table");
        }
        selectOption.style.display = "block";
        document.onclick = removeOpt;
        actb_rangeu = 1;
		actb_ranged = j-1;
		actb_display = true;
		if (actb_pos <= 0) actb_pos = 1;
		addBackgroundIFrame(selectOption, actb_curr);  // call the IE function here
	}
	function highlightRow(){
        if (actb_pos < 1) {actb_pos = 1;}
		document.getElementById('tat_tr'+actb_pos).className="actbBgColor";
		actb_pos = this.getAttribute('pos');
		document.getElementById('tat_tr'+actb_pos).className="actbHColor";
		actb_mouse_on_list=1;
    }

    function removehighlightRow(){
        actb_mouse_on_list=0
    }
    
	function setvalue(evt){
		actb_mouse_on_list = 0;
		actb_pos = this.getAttribute('pos');
		actb_penter();
		callvalidator();
    }
    
    function removeOpt(e){
        var sel=$get("div_table");
        if(sel != null){
            document.body.removeChild(sel);
            document.onclick = null;
            callvalidator();
        }
        
            var childFrame = sel._ElementsIFrame;
            if (childFrame) {
                childFrame.style.display = "none";
            }        
    }

    function callvalidator() {
        if(actb_curr.value.trim() != '')
        {  
            if(actb_curr.Validators != null)
            {
                if(actb_curr.Validators.length > 0) {
                    var val = actb_curr.Validators[0];
                    val.evaluationfunction(val);
                }
            }
        }
	}
	
	
	function actb_table_focus(){
		actb_mouse_on_list = 1;
	}
	function actb_table_unfocus(){
		actb_mouse_on_list = 0;
	}
	function actb_table_highlight(){
		actb_mouse_on_list = 1;
	}


	function actb_penter() {
	    if (!actb_display) return;
        if (actb_pos < 1) { actb_removedisp(); return; }
        actb_display = false;
        var word = '';
        var c = 0;
        for (var i = 0; i <= actb_self.actb_keywords.length; i++) {
            if (actb_bool[i]) c++;
            if (c == actb_pos) {
                word = actb_self.actb_keywords[i].LD;
                break;
            }
        }
        if (word != "") {
            actb_curr.value = word;
        }
        actb_mouse_on_list = 0;
        actb_removedisp();
	}

	function actb_removedisp() {
	    if (actb_mouse_on_list == 0) {
	        actb_display = false; 
	        var sel = document.getElementById('div_table');
	        if (sel) {
	                var childFrame = sel._ElementsIFrame;
	                if (childFrame) {
	                    childFrame.style.display = "none";
	                }
	            document.body.removeChild(document.getElementById('div_table'));
	        }
	        if (actb_toid) clearTimeout(actb_toid);
	        document.onclick = null;
	    }		
	}
	
	function actb_keypress(e){
		if (actb_caretmove) stopEvent(e);
		return !actb_caretmove;
	}
	function actb_goup(){
		if (!actb_display) return;
		if (actb_pos == 1) return;
		document.getElementById('tat_tr'+actb_pos).className="actbBgColor";
		actb_pos--;
		
		if(seltable != null)
		{
          if(actb_pos>0)   
          if((seltable.getElementsByTagName('tr')[actb_pos - 1].offsetTop) < 
             ($get("div_table").scrollTop ) )
            { 
          $get("div_table").scrollTop= seltable.getElementsByTagName('tr')[actb_pos - 1].offsetTop; // + seltable.getElementsByTagName('tr')[actb_pos - 1].offsetHeight ; // - $get("div_table").clientHeight;
            }

		}
		if (actb_pos < actb_rangeu) actb_moveup();
		document.getElementById('tat_tr'+actb_pos).className="actbHColor";
	}
	
	
	function actb_parse(n){
		if (actb_self.actb_delimiter.length > 0){
			var t = actb_delimwords[actb_cdelimword].trim().addslashes();
			var plen = actb_delimwords[actb_cdelimword].trim().length;
		}else{
			var t = actb_curr.value.addslashes();
			var plen = actb_curr.value.length;
		}
		var tobuild = '';
		var i;

		if (actb_self.actb_firstText){
			var re = new RegExp("^" + t, "i");
		}else{
			var re = new RegExp(t, "i");
		}
		var p = n.search(re);
		
		if(p != -1)
		{		
		    for (i=0;i<p;i++){
			    tobuild += n.substr(i,1);
		    }
		    tobuild +="<font class='actbHStyle'>"
		    for (i=p;i<plen+p;i++){
			    tobuild += n.substr(i,1);
		    }
		    tobuild += "</font>";
			    for (i=plen+p;i<n.length;i++){
			    tobuild += n.substr(i,1);
		    }
		    return tobuild;
	    }
	    else
		{
		    return n;
		}
	}
	
	
	function actb_godown(){
		if (!actb_display) return;
		if (actb_pos == actb_total) return;
		document.getElementById('tat_tr'+actb_pos).className="actbBgColor";
		actb_pos++;
		
		if(seltable != null)
		{
         if(actb_pos>0)   
         {
         if((seltable.getElementsByTagName('tr')[actb_pos - 1].offsetTop + seltable.getElementsByTagName('tr')[actb_pos - 1].offsetHeight) > ($get("div_table").scrollTop + $get("div_table").clientHeight) ) 
            { 
          $get("div_table").scrollTop= seltable.getElementsByTagName('tr')[actb_pos - 1].offsetTop + seltable.getElementsByTagName('tr')[actb_pos - 1].offsetHeight - $get("div_table").clientHeight;
            }
         }
		}
		if (actb_pos > actb_ranged) actb_movedown();
		document.getElementById('tat_tr'+actb_pos).className="actbHColor";
	}
	
	function actb_movedown(){
	    actb_rangeu++;
		actb_ranged++;
		actb_generate();
	}
	function actb_moveup(){
		actb_rangeu--;
		actb_ranged--;
		actb_generate();
	}

	function actb_checkkey(evt){
	    if (!evt) evt = event;
		a = evt.keyCode;
		caret_pos_start = getCaretStart(actb_curr);
		actb_caretmove = 0;
		switch (a){
			case 38:
				actb_goup();
				actb_caretmove = 1;
				return false;
				break;
			case 40:
				actb_godown();
				actb_caretmove = 1;
				return false;
				break;
            case 13:
                if (actb_display) {
                    actb_caretmove = 1;
                    actb_penter();
                    if (IsIE()) callvalidator();
                    actb_curr.focus();
                    return false;
                } else {
                    return true;
                }
                break;
            case 9:
                if (actb_display) {
                    actb_penter();
                    if (IsIE()) callvalidator();
                }
                return true;
                break;
			default:
			    setTimeout(function(){actb_tocomplete(a)},10);
		}
	}
        	
	function IsIE(){
        if (Sys.Browser.agent == Sys.Browser.InternetExplorer)
            return true;
        else
            return false;
    }

	function actb_tocomplete(kc){
	    if (kc == 38 || kc == 40 || kc == 13 || kc == 9) return;
		var i;
		if (actb_display){ 
			var word = 0;
			var c = 0;
			for (var i=0;i<=actb_self.actb_keywords.length;i++){
				if (actb_bool[i]) c++;
				if (c == actb_pos){
					word = i;
					break;
				}
			}
			actb_pre = word;
		}else{ actb_pre = -1};
		
		if (actb_curr.value == ''){
			actb_mouse_on_list = 0;
			actb_removedisp();
			return;
		}
		if (actb_self.actb_delimiter.length > 0){
			caret_pos_start = getCaretStart(actb_curr);
			caret_pos_end = getCaretEnd(actb_curr);
			
			delim_split = '';
			for (i=0;i<actb_self.actb_delimiter.length;i++){
				delim_split += actb_self.actb_delimiter[i];
			}
			delim_split = delim_split.addslashes();
			delim_split_rx = new RegExp("(["+delim_split+"])");
			c = 0;
			actb_delimwords = new Array();
			actb_delimwords[0] = '';
			for (i=0,j=actb_curr.value.length;i<actb_curr.value.length;i++,j--){
				if (actb_curr.value.substr(i,j).search(delim_split_rx) == 0){
					ma = actb_curr.value.substr(i,j).match(delim_split_rx);
					actb_delimchar[c] = ma[1];
					c++;
					actb_delimwords[c] = '';
				}else{
					actb_delimwords[c] += actb_curr.value.charAt(i);
				}
			}

			var l = 0;
			actb_cdelimword = -1;
			for (i=0;i<actb_delimwords.length;i++){
				if (caret_pos_end >= l && caret_pos_end <= l + actb_delimwords[i].length){
					actb_cdelimword = i;
				}
				l+=actb_delimwords[i].length + 1;
			}
			var ot = actb_delimwords[actb_cdelimword].trim(); 
			var t = actb_delimwords[actb_cdelimword].addslashes().trim();
		}else{
			var ot = actb_curr.value;
			var t = actb_curr.value.addslashes();
		}
		if (ot.length == 0){
			actb_mouse_on_list = 0;
			actb_removedisp();
		}
		if (ot.length < actb_self.actb_startcheck) return this;
		if (actb_self.actb_firstText){
			var re = new RegExp("^" + t, "i");
		}else{
			var re = new RegExp(t, "i");
		}

		actb_total = 0;
		actb_tomake = false;
		actb_kwcount = 0;
		actb_display = false;
		for (i=0;i<actb_self.actb_keywords.length;i++){
			actb_bool[i] = false;
			if ((re.test(actb_self.actb_keywords[i].LD)) || (actb_self.actb_keywords[i].C.toLowerCase() == t.toLowerCase())){
				actb_total++;
				actb_bool[i] = true;
				actb_kwcount++;
				actb_display = true;
				if (actb_pre == i) actb_tomake = true;
			}

    }
    if(actb_display) {
	    actb_generate();
	}
	else { 
	    actb_mouse_on_list = 0;
		actb_removedisp();
	}
	}
	return this;
}

//END Trisept.UI.Web.Shell.actb.js
//START Trisept.UI.Web.Shell.optionviewer.js
var ophvr = false;
var op_pos = 0;
var trgtelem;
var total = 0;
var op_rangeu = 0;
var op_ranged = 0;
var op_display = false;
var row_cnt;

if (RequireCancelBubbleEvent()) {
    var cancelBubbleEvent = false;
}

function RequireCancelBubbleEvent() {
    return (Sys.Browser.agent != null && Sys.Browser.agent != undefined && Sys.Browser.agent === Sys.Browser.InternetExplorer && (Sys.Browser.documentMode == "9" || Sys.Browser.documentMode == "10"));
}

function viewOptions(trgt, href, list) {
    if (document.getElementById('div_table')) {
        op_display = false;
        var childFrame = document.getElementById('div_table')._ElementsIFrame;
        if (childFrame) { document.body.removeChild(childFrame); }
        document.body.removeChild(document.getElementById('div_table'));
    }
    if (list == null) { list = new Array(); }

    trgtelem = trgt;
    var selectOption = $get("div_table");
    if (selectOption == null) {
        d = document.createElement('div');
        d.style.overflow = "auto";
        if (list.length < 15) {
            d.style.height = 'auto';
        }
        else {
            d.style.height = '200px';
        }
        d.id = 'div_table';
        d.style.position = 'absolute';
        d.style.zIndex = 100005;
        //d.style.cursor='hand';
        d.onmouseover = function() { ophvr = true; };
        d.onmouseout = function() { ophvr = false; };
        d.style.top = eval(curTop(trgt) + trgt.offsetHeight) + "px";
        d.style.width = (trgt.offsetWidth + 17) + "px";
        d.style.left = curLeft(trgt) + 1 + "px";
        d.align = 'left';

        document.body.appendChild(d);
        a = document.createElement('ul');
        a.className = "actbBgColor";
        a.style.textAlign = "left";
        a.style.overflow = 'auto';
        a.style.cursor = 'pointer';
        a.style.border = "1px solid #AAAAAA";
        a.style.width = (trgt.offsetWidth) + "px";
        a.id = 'tat_table';
        d.appendChild(a);
        var ul_borders = (a.offsetWidth - trgt.offsetWidth); // total # of px contributed by left and right border of tat_table.
        a.style.width = (trgt.offsetWidth - ul_borders) + "px";
        var counter = 0;
        var first = true;
        var j = 1;
        row_cnt = list.length;


        for (var i = 0; i < list.length; i++) {
            var r = document.createElement('li');
            if (first) {
                r.className = "actbHColor";
                first = false;
                op_pos = 0;
            } else {
                r.className = "actbBgColor";
            }
            r.id = 'tat_tr' + (j);
            a.appendChild(r);
            r.className = "actbTextColor";
            r.className = "actbFFamily";
            r.className = "actbFSize";
            r.onmousedown = setvalue;
            r.pos = j;
            r.innerHTML = list[i].LD;
            r.style.cursor = 'pointer';
            r.onmouseover = highlightRow;
            r.onmouseout = removehighlightRow;
            j++;
        }
        selectOption = $get("div_table");
    }
    if (href != null) {
        href.onmouseover = function() { ophvr = true; };
        href.onmouseout = function() { ophvr = false; };
    }
    selectOption.onmouseover = function() { ophvr = true; };
    selectOption.onmouseout = function() { ophvr = false; };
    selectOption.style.display = "block";
    document.onclick = removeOptions;
    if (RequireCancelBubbleEvent()) {
        cancelBubbleEvent = true;
    }
    addEvent(document, "keydown", op_checkkey);

    op_rangeu = 1;
    op_ranged = j - 1;
    op_display = true;
    if (op_pos <= 0) op_pos = 1;
    total = list.length - 1;
    addBackgroundIFrame(selectOption, trgtelem);  // call the IE function here
}

function viewOnSaleOptionsWithRegions(trgt, href, list) {
    if (document.getElementById('div_table')) {
        op_display = false;
        var childFrame = document.getElementById('div_table')._ElementsIFrame;
        if (childFrame) { document.body.removeChild(childFrame); }
        document.body.removeChild(document.getElementById('div_table'));
    }
    if (list == null) { list = new Array(); }

    trgtelem = trgt;
    var selectOption = $get("div_table");
    if (selectOption == null) {
        d = document.createElement("div");
        d.style.overflow = "auto";
        d.style.height = "200px";
        d.id = "div_table";
        d.style.position = "absolute";
        d.style.zIndex = 100005;
        d.onmouseover = function () { ophvr = true; };
        d.onmouseout = function () { ophvr = false; };
        d.style.top = eval(curTop(trgt) + trgt.offsetHeight) + "px";
        d.style.left = curLeft(trgt) + 1 + "px";
        d.align = "left";

        document.body.appendChild(d);
        a = document.createElement("ul");
        a.className = "actbBgColor";
        a.style.textAlign = "left";
        a.style.overflow = "hidden";
        a.style.cursor = "pointer";
        a.style.border = "1px solid #AAAAAA";
        a.id = "tat_table";
        d.appendChild(a);

        var counter = 0;
        var first = true;
        var j = 1;
        row_cnt = list.length;

        for (var i = 0; i < list.length; i++) {
            var r = document.createElement("li");
            if (first) {
                r.className = "actbHColor";
                first = false;
                op_pos = 0;
            } else {
                r.className = "actbBgColor";
            }
            r.id = 'tat_tr' + (j);

            r.style.overflow = "hidden";
            r.style.whiteSpace = "nowrap";
            a.appendChild(r);
            r.className = "actbTextColor";
            r.className = "actbFFamily";
            r.className = "actbFSize";
            r.pos = j;
            r.innerHTML = list[i].LD;
            r.style.cursor = "pointer";
            var indentInc = 10;
            if (list[i].R) {
                r.style.fontWeight = "bold";                
                r.style.textIndent = list[i].DP * indentInc + "px";
            } else {
                r.style.textIndent = list[i].DP * indentInc + "px";                                
            }
            r.onmousedown = setvalue;
            r.onmouseover = highlightRow;
            r.onmouseout = removehighlightRow;
            j++;
        }
        selectOption = $get("div_table");
    }
    if (href != null) {
        href.onmouseover = function () { ophvr = true; };
        href.onmouseout = function () { ophvr = false; };
    }
    selectOption.onmouseover = function () { ophvr = true; };
    selectOption.onmouseout = function () { ophvr = false; };
    selectOption.style.display = "block";
    document.onclick = removeOptions;
    if (RequireCancelBubbleEvent()) {
        cancelBubbleEvent = true;
    }
    addEvent(document, "keydown", op_checkkey);

    op_rangeu = 1;
    op_ranged = j - 1;
    op_display = true;
    if (op_pos <= 0) op_pos = 1;
    total = list.length - 1;
    addBackgroundIFrame(selectOption, trgtelem);  // call the IE function here
}

function viewOptionsWithRegions(trgt, href, list) {
    if (document.getElementById('div_table')) {
        op_display = false;
        var childFrame = document.getElementById('div_table')._ElementsIFrame;
        if (childFrame) { document.body.removeChild(childFrame); }
        document.body.removeChild(document.getElementById('div_table'));
    }
    if (list == null) { list = new Array(); }

    trgtelem = trgt;
    var selectOption = $get("div_table");
    if (selectOption == null) {
        d = document.createElement("div");
        d.style.overflow = "auto";
        d.style.height = "200px";
        d.id = "div_table";
        d.style.position = "absolute";
        d.style.zIndex = 100005;        
        d.onmouseover = function() { ophvr = true; };
        d.onmouseout = function() { ophvr = false; };
        d.style.top = eval(curTop(trgt) + trgt.offsetHeight) + "px";        
        d.style.left = curLeft(trgt) + 1 + "px";
        d.align = "left";

        document.body.appendChild(d);
        a = document.createElement("ul");
        a.className = "actbBgColor";
        a.style.textAlign = "left";        
        a.style.overflow = "hidden";
        a.style.cursor = "pointer";
        a.style.border = "1px solid #AAAAAA";        
        a.id = "tat_table";
        d.appendChild(a);

        var counter = 0;
        var first = true;
        var j = 1;
        row_cnt = list.length;

        for (var i = 0; i < list.length; i++) {
            var r = document.createElement("li");
            if (first) {
                r.className = "actbHColor";
                first = false;
                op_pos = 0;
            } else {
                r.className = "actbBgColor";
            }
            r.id = 'tat_tr' + (j);                                  
                                               
            r.style.overflow = "hidden";
            r.style.whiteSpace = "nowrap";
            a.appendChild(r);
            r.className = "actbTextColor";
            r.className = "actbFFamily";
            r.className = "actbFSize";            
            r.pos = j;
            r.innerHTML = list[i].LD;
            r.style.cursor = "default";
            var indentInc = 10;
            if (list[i].R) {
                r.style.fontWeight = "bold";                
                r.style.textIndent = list[i].DP * indentInc + "px";
            } else {
                r.style.textIndent = list[i].DP * indentInc + "px";
                r.onmousedown = setvalue;
                r.style.cursor = "pointer";
            }              
            r.onmouseover = highlightRow;
            r.onmouseout = removehighlightRow;
            j++;
        }
        selectOption = $get("div_table");
    }
    if (href != null) {
        href.onmouseover = function() { ophvr = true; };
        href.onmouseout = function() { ophvr = false; };
    }
    selectOption.onmouseover = function() { ophvr = true; };
    selectOption.onmouseout = function () { ophvr = false; };
    document.onclick = removeOptions;
    if (RequireCancelBubbleEvent()) {
        cancelBubbleEvent = true;
    }
    selectOption.style.display = "block";    
    addEvent(document, "keydown", op_checkkey);

    op_rangeu = 1;
    op_ranged = j - 1;
    op_display = true;
    if (op_pos <= 0) op_pos = 1;
    total = list.length - 1;
    addBackgroundIFrame(selectOption, trgtelem);  // call the IE function here
}

function highlightRow() {
    if (op_pos < 1) { op_pos = 1; }
    document.getElementById('tat_tr' + op_pos).className = "actbBgColor";
    op_pos = this.pos;
    document.getElementById('tat_tr' + op_pos).className = "actbHColor";
}

function removehighlightRow() {
    if (op_pos < 1) { op_pos = 1; }
    op_pos = this.pos;
}

//This function set value from table current element to value
function setvalue() {
    trgtelem.value = this.innerHTML.replace(/&amp;/g, "&");
    setCaret(trgtelem, trgtelem.value.length);
    ophvr = false;
    removeOptions();
    callvalidatorOpt(trgtelem);
}


function removeOptions() {
    if (RequireCancelBubbleEvent()) {
        if (!cancelBubbleEvent) {
            removeOpt();
        } else {
            cancelBubbleEvent = false;
        }
    } else {
        removeOpt();
    }
}

function selectOption() {
    this.trgt.value = this.value;
    this.trgt.focus();
    removeOpt();
    callvalidatorOpt(trgt);
}


function op_checkkey(evt) {

    if (!evt) evt = event;
    a = evt.keyCode;
    switch (a) {
        case 38:
            op_goup();
            return false;
            break;
        case 40:
            op_godown();
            return false;
            break;
        case 13:
            if (op_display) {
                var tempcode = document.getElementById('tat_tr' + op_pos);
                trgtelem.value = tempcode.innerHTML;
                setCaret(trgtelem, trgtelem.value.length);
                ophvr = false;
                removeOptions();
                return false;
            } else {
                return true;
            }
            break;
    }
}

function op_movedown() {
    op_rangeu++;
    op_ranged++;
}
function op_moveup() {
    op_rangeu--;
    op_ranged--;
}



function op_godown() {
    if ((!op_display) || ophvr) return;

    var seltable = $get("div_table");
    if (op_pos > total) return;
    document.getElementById('tat_tr' + op_pos).className = "actbBgColor";
    op_pos++;

    if (seltable != null) {
        if (op_pos > 0) {
            if ((seltable.getElementsByTagName('li')[op_pos - 1].offsetTop + seltable.getElementsByTagName('li')[op_pos - 1].offsetHeight) > ($get("div_table").scrollTop + $get("div_table").clientHeight)) {
                $get("div_table").scrollTop = seltable.getElementsByTagName('li')[op_pos - 1].offsetTop + seltable.getElementsByTagName('li')[op_pos - 1].offsetHeight - $get("div_table").clientHeight;
            }
        }
    }
    if (op_pos > op_ranged) op_movedown();
    document.getElementById('tat_tr' + op_pos).className = "actbHColor";
}

function op_goup() {
    if ((!op_display) || ophvr) return;

    var seltable = $get("div_table");
    if (op_pos == 1) return;
    document.getElementById('tat_tr' + op_pos).className = "actbBgColor";
    op_pos--;

    if (seltable != null) {
        if (op_pos > 0)
            if ((seltable.getElementsByTagName('li')[op_pos - 1].offsetTop) <
             ($get("div_table").scrollTop)) {
            $get("div_table").scrollTop = seltable.getElementsByTagName('li')[op_pos - 1].offsetTop; // + seltable.getElementsByTagName('tr')[op_pos - 1].offsetHeight ; // - $get("div_table").clientHeight;
        }

    }
    if (op_pos < op_rangeu) op_moveup();
    document.getElementById('tat_tr' + op_pos).className = "actbHColor";
}

function removeOpt() {
    op_display = false;
    var sel = $get("div_table");
    if (sel != null) {
        ophvr = false;
        sel.style.display = "none";
        removeEvent(document, "keydown", op_checkkey);
        document.body.removeChild(sel);
        document.onclick = null;
        var childFrame = sel._ElementsIFrame;
        if (childFrame) {
            childFrame.style.display = "none";
        }
    }
}

function callvalidatorOpt(trgtCtrl) {
    //ValidatorValidate();
    if (trgtCtrl.value.trim() != '') {
        if (trgtCtrl.Validators != null) {
            if (trgtCtrl.Validators.length > 0) {
                var val = trgtCtrl.Validators[0];
                val.evaluationfunction(val);
            }
        }
    }
}

//END Trisept.UI.Web.Shell.optionviewer.js
//START Trisept.UI.Web.Shell.cal.js
    var vchvr = false;
var dtpkColl = [];
function DtPicker(ctrl, calUrl, lowDateCtrl, highDateCtrl, calUrlMobile) {
    if (ctrl != null) {
        var tempSrc = -1;
        this.trgt = ctrl;
        for (var i = 0; i < dtpkColl.length; i++) {
            if (dtpkColl[i].id == this.trgt.id) {
                tempSrc = i;
            }
        }
        if (tempSrc == -1) {
            dtpkColl[dtpkColl.length] = ctrl;
            this.trgt.calsrc = calUrl + "?scrSuffix=" + parseInt(dtpkColl.length - 1);
            if (calUrlMobile != null) { this.trgt.calsrcalt = calUrlMobile + "?scrSuffix=" + parseInt(dtpkColl.length - 1); }
        }
        else {
            dtpkColl[tempSrc] = ctrl;
            this.trgt.calsrc = calUrl + "?scrSuffix=" + tempSrc;
            if (calUrlMobile != null) { this.trgt.calsrcalt = calUrlMobile + "?scrSuffix=" + tempSrc; }
        }
        this.trgt.trgtctrl = this.trgt;
        this.trgt.lowDateCtrl = lowDateCtrl;
        this.trgt.highDateCtrl = highDateCtrl;

        if (this.trgt.DisableCalendarOnFocus == "0") {
            addEventcal(this.trgt, "click", addCal);
            addEventcal(this.trgt, "focus", addCal);

            this.trgt.onkeydown = vcal_checkkey;
            this.trgt.onkeyup = vcal_checkdate;
        }
        this.trgt.showonfocus = 1;

        this.calImg = $get(this.trgt.id + "_calimg");
        if (this.calImg != null) {
            this.calImg.style.cursor = "pointer";
            this.calImg.trgtctrl = this.trgt;
            addEventcal(this.calImg, "click", addCal);
        }
    }
}

function getDateValues(ele, attr) {
    if (typeof attr == "string") {
        return attr;
    } else if (typeof attr == "function") {
        return attr(ele);
    }
    return null;
}

function addCal() {
    if(this.trgtctrl.showonfocus == 1)
       {
        this.trgtctrl.showonfocus = 0;
        var iframe = CreateIframe();        
        if ((iframe.style.display == "none") || (iframe.trgt != this.trgtctrl)) {
            var lowdate, highdate, dowmask;
            lowdate = getDateValues(this.trgtctrl, this.trgtctrl.LowDate)
            lowdate = ((lowdate != null) ? "&lowdates=" + datesConvert(lowdate, this.trgtctrl.DateFormat) : "");

            highdate = getDateValues(this.trgtctrl, this.trgtctrl.HighDate)
            highdate = ((highdate != null) ? "&highdates=" + datesConvert(highdate, this.trgtctrl.DateFormat) : "");

            dowmask = getDateValues(this.trgtctrl, this.trgtctrl.DowMask)
            dowmask = ((dowmask != null) ? "&dowmasks=" + this.trgtctrl.DowMask : "");

            var tempUrl = this.trgtctrl.calsrc + lowdate + highdate + dowmask;
            var src = tempUrl + calsrcurl(this.trgtctrl);
            src = src.replace(/\s/g, "");
            iframe.src = src;
            if (this.trgtctrl.califramewidth != null) {
                iframe.style.width = this.trgtctrl.califramewidth;
            } else {
                if (FindWinW() >= 412) {
                    iframe.style.width = "412px";
                } else {
                    if ((this.trgtctrl.calsrcalt != null) && (window.frameElement == null)) {
                        iframe.src = this.trgtctrl.calsrcalt + lowdate + highdate + dowmask + calsrcurl(this.trgtctrl);
                        iframe.style.width = FindWinW() + "px";
                    } else {
                        iframe.style.width = "412px";
                    }
                }
            }
            if (this.trgtctrl.califrameheight != null) {
                iframe.style.height = this.trgtctrl.califrameheight;
            } else {
                iframe.style.height = "171px"; 
            }
            iframe.style.position = "absolute"; 
            calculatepos(this.trgtctrl,iframe);
            iframe.onmouseover = function() {vchvr = true;};
            iframe.onmouseout = function() {vchvr = false;};
            document.body.onmousedown = removeCal;
            iframe.trgt = this.trgtctrl;
            iframe.style.display = "block";
            iframe.style.zIndex=100005;
         }
       } 
    }

    function dateConvert(val, format) {
        var a = parseDateFormat(val, format);
        if (a != null) {
            return siteDateFormat(a, GlobalFormat.SiteDateFormat);
        }
    }

    //function handles pipe separated values of highdates,lowdates.
    function datesConvert(val, format) {
        var dt;
        if (typeof val == "string" && val != "") {
            var newval = "";
            var s = val.split('|');
            for (var i = 0; i < s.length; i++) {
                if (newval != "") newval = newval + "|";
                newval = newval + dateConvert(s[i], format);
            }
            return newval;
        }
        return dt;
    }

  function calsrcurl(trgtctrl)
  {
        var lowDateCtrl="";
        var highDateCtrl="";
        var defaultDate = "";
        var dt;
        if (trgtctrl.lowDateCtrl != null) {
            dt = dateConvert(trgtctrl.lowDateCtrl.value.trim(), trgtctrl.lowDateCtrl.DateFormat)
            if (dt != null){
                lowDateCtrl = "&DepartDate=" + dt;
            }
        }
        if (trgtctrl.highDateCtrl != null) {
            dt = dateConvert(trgtctrl.highDateCtrl.value.trim(), trgtctrl.highDateCtrl.DateFormat)
            if (dt != null) {
                highDateCtrl = "&ReturnDate=" + dt;
            }
        }
        if (trgtctrl.value != null) {
            dt = dateConvert(trgtctrl.value.trim(), trgtctrl.DateFormat)
            if (dt != null) {
                defaultDate = "&DefaultDate=" + dt;
            }
        }
       
      return lowDateCtrl + highDateCtrl + defaultDate;
  } 
    

function vcal_checkkey(evt){
		if (!evt) evt = event;
		a = evt.keyCode;
		switch (a){
			case 13: case 9:
                removeCal();
			    return true;
				break;
			default:
			  	break;
		}
}

function vcal_checkdate(evt){
		if (!evt) evt = event;
		a = evt.keyCode;
		switch (a){
			case 13: case 9: case 37: case 38: case 39: case 40:
           	    return true;
				break;
			default:
			    var iframe = $get('DHTMLIFrame');
			    if (iframe == null) { parent.$get('DHTMLIFrame'); }
			    if (iframe.style.display == "block") {
                        iframe.src=this.trgtctrl.calsrc + calsrcurl(this.trgtctrl);
                        }
				break;
		}
}

function onDateSelect(scrsuffix, value) {
   setTimeout(removeCal, 1);

   var frames = window.frames;
   var ele = null;
   var refCtrl = CreateIframe().trgt; // It refers to date input which have opened calendar iframe recently.

       if (refCtrl != undefined && refCtrl != null) {
           ele = refCtrl;
       }
         
       if (ele != null) {  
           if (ele.DateFormat != null) {
                   var a = parseDateFormat(value, GlobalFormat.SiteDateFormat);
                    if (a != null) {
                        ele.value = siteDateFormat(a, ele.DateFormat);
                        callValidator(ele);
                    }
            }
            else{
                ele.value = value;
                callValidator(ele);
            }
            ele.focus();
            if (ele.setdatefunction != null) {
                eval(ele.setdatefunction + "(ele,value)");
            } 
        }
}

function callValidator(trgt) {
    if (trgt.Validators != null) {
        if (trgt.Validators.length > 0) {
            var val = trgt.Validators[0];
            val.innerHTML = '';
            if(val.evaluationfunction!=null)
            val.evaluationfunction(val);
        }
    }
}


function removeCal(){
    var cal = $get('DHTMLIFrame');
    if (cal == null) { cal = parent.$get('DHTMLIFrame'); }
    if (cal != null) {
        if (cal.style.display == "block")
        // if (cal != null )
        {
            cal.style.display = "none";
            cal.trgt.showonfocus = 1;
            vchvr = false;
            document.body.onmousedown = null;
        }
    }
}

function FindWinW() {
return self.innerWidth ? self.innerWidth : document.documentElement && document.documentElement.clientWidth ? document.documentElement.clientWidth : document.body ? document.body.clientWidth : 0;
}

function FindWinH() {
return self.innerHeight ? self.innerHeight : document.documentElement && document.documentElement.clientHeight ? document.documentElement.clientHeight : document.body ? document.body.clientHeight : 0;
}


function FindWinScrX() {
return self.pageXOffset ? self.pageXOffset : document.documentElement && document.documentElement.scrollLeft ? document.documentElement.scrollLeft : document.body ? document.body.scrollLeft : 0;
}

function FindWinScrY() {
return self.pageYOffset ? self.pageYOffset : document.documentElement && document.documentElement.scrollTop ? document.documentElement.scrollTop : document.body ? document.body.scrollTop : 0;
}


function calculatepos(trgtctl, frame) {

var xsDiv = null;
var ysDiv = null; 

var oPos =  trgtctl; 
var oDiv =  frame; 

var iBottom = FindWinScrY() + FindWinH();
var iLeft = FindWinScrX() + FindWinW();

var ysDiv  = curTop(trgtctl) + trgtctl.offsetHeight;
var xsDiv = curLeft(trgtctl);

if (window.document.getElementById(frame.id) == null) {
    var frames = window.parent.frames;
    for (var i = 0; i < frames.length; i++) {
        try {
            calTarget = frames[i].document.getElementById(trgtctl.id);
            if (calTarget != undefined) {
                ysDiv = curTop(frames[i].frameElement) + ysDiv;
                xsDiv = curLeft(frames[i].frameElement) + xsDiv;
                iBottom = parent.FindWinScrY() + parent.FindWinH();
                iLeft = parent.FindWinScrX() + parent.FindWinW();
                break;
            }
        }
        catch (err) { }
    }
}

var iPopH = parseInt(oDiv.style.height,10);
var iPopW = parseInt(oDiv.style.width,10);

 if(ysDiv + iPopH > iBottom) {
     ysDiv = (ysDiv - trgtctl.offsetHeight - iPopH);
     oDiv.style.top = ysDiv + 'px';
  }
 else
  {
  oDiv.style.top = ysDiv + 'px'; 
  }
  
  
  if(xsDiv + iPopW > iLeft) {
      xsDiv = (iLeft - iPopW);
      if ((xsDiv < 0) && (window.frameElement == null)) { xsDiv = 0; }
     oDiv.style.left = xsDiv + 'px';
  }
 else
  {
   oDiv.style.left = xsDiv + 'px';
  }
}

function onDateChange(ctrl) {
    var a = parseVaxDate(ctrl.value.trim());
    if (a != null) {
        var d = siteDateFormat(a, ctrl.DateFormat);
        ctrl.value = d;
        if (ctrl.setdatefunction != null) {
            eval(ctrl.setdatefunction + "(ctrl,d)");
        }
    }
    callValidator(ctrl); // TMH 4/5/17   Bug 98084
}

function addEventcal( obj, type, fn )
{
	if (obj.addEventListener)
		obj.addEventListener( type, fn, false );
	else if (obj.attachEvent)
	{
		obj["e"+type+fn] = fn;
		obj[type+fn] = function() { obj["e"+type+fn]( window.event ); }
		obj.attachEvent( "on"+type, obj[type+fn] );
	}
}

function CreateIframe() {
    var iframe = (($get('DHTMLIFrame') != null) ? $get('DHTMLIFrame') : parent.$get('DHTMLIFrame'));
    if (iframe == null) 
    {        
        var frame = document.createElement("iframe")
        frame.id = "DHTMLIFrame";
        frame.frameBorder = "0";
        frame.scrolling = "no";
        frame.style.display = "none";
        return parent.document.body.appendChild(frame);        
    }
    return iframe
}


//END Trisept.UI.Web.Shell.cal.js
//START Trisept.UI.Web.Shell.dateutil.js
function parseVaxDate(val) {
    var a = Date.parseLocale(val.trim(),GlobalFormat.SiteDateFormat);
    if (a != null) { return yearAdjust(a, GlobalFormat.SiteDateFormat); } //return a;}
	//generalFormats=new Array('y-M-d','ddMMMyyyy','dd.MM.yyyy','MM/dd/yyyy','MM/dd/yy','dMMMy','dMMM', 'MMMd','MMM d, y','MMM d,y','y-MMM-d','d-MMM-y','MMM d','M/d/y','M-d-y','M.d.y','MMM-d','M/d','M-d');
		
	var checkList= GlobalFormat.DateFormat.split("&");
	var d=null;
	for (var i=0; i<checkList.length; i++) {
	        d = Date.parseLocale(val.trim(), checkList[i].trim());
			if (d != null) {
			    return yearAdjust(d, checkList[i].trim());
			} 
		}
	return null;
	}

	function WaitScreenDateFormat(dtObj, dtFormat) {
	    if (dtObj != null) {
	        var d;
	        if (dtFormat != null && dtFormat != "") {
	            d = dtObj.localeFormat(dtFormat);
	        }
	        else {
	            d = dtObj.localeFormat(GlobalFormat.SiteDateFormat);
	        }
	        return d;
	    }
	}
	
	function siteDateFormat(dtObj, dtFormat) {
	    if (dtObj != null) {
	    var d ;
	        if (dtFormat != null && dtFormat != "") {
	            d  = dtObj.localeFormat(dtFormat);
	        }
	        else {
	            d = dtObj.localeFormat(GlobalFormat.SiteDateFormat);
	        }
	        if (GlobalFormat.ShowDateInUpperCase != null && GlobalFormat.ShowDateInUpperCase == "Y") {
	            return d.toUpperCase();
	        }
	        return d;
	    }
	}

	function parseDateFormat(val, format) {
	    if (format != null && format != "") {
	        var a = Date.parseLocale(val.trim(), format);
	        if (a != null) { return a; }
	    }
	    return parseVaxDate(val);
	}
	
	function yearAdjust(dt, format) {
	    if ((format.toLowerCase().indexOf("y") == -1 )&&(format.length > 1)){
	        var todayDT = new Date();
	        todayDT.setHours(0, 0, 0, 0);
	        if (todayDT > dt) {
	            var futureDate = new Date(dt.getYear() + 1, dt.getMonth(), dt.getDate());
	            return futureDate;
	        }
	    }
	    return dt;
	}
//END Trisept.UI.Web.Shell.dateutil.js
//START Trisept.UI.Web.Shell.CollapsiblePanel.js
function TogglePanel(headerId, contentId, triggerObj, expandedText, collapsedText, expandedAriaLabel, collapsedAriaLabel, expandedIconClasses, collapsedIconClasses, onExpand, onExpandComplete, onCollapse, onCollapseComplete) {
    var headerPanel = $("#" + headerId);
    var contentPanel = $("#" + contentId);
    var trigger = $(triggerObj);
    var headerTextArea = trigger.find(".expco-trigger-text");
    var icon = trigger.find("i");
    var onCompleteScript = "";

    if (trigger.attr("aria-expanded") == "true") {
        onCompleteScript = onCollapseComplete;
        eval(onCollapse);
        trigger.attr("aria-expanded", "false");
        headerPanel.addClass("is-collapsed").removeClass("is-expanded");

        if (collapsedText != null) {
            headerTextArea.html(collapsedText);
        }
        if (collapsedAriaLabel != null) {
            trigger.attr("aria-label", collapsedAriaLabel);
        }
        if (collapsedIconClasses != null && icon.length > 0) {
            icon.attr("class", collapsedIconClasses);
        }
    }
    else {
        onCompleteScript = onExpandComplete;
        eval(onExpand);
        trigger.attr("aria-expanded", "true");
        headerPanel.addClass("is-expanded").removeClass("is-collapsed");

        if (expandedText != null) {
            headerTextArea.html(expandedText);
        }
        if (expandedAriaLabel != null) {
            trigger.attr("aria-label", expandedAriaLabel);
        }
        if (expandedIconClasses != null && icon.length > 0) {
            icon.attr("class", expandedIconClasses);
        }
    }

    var slideOptions = {
        "progress": function () {
            if (typeof (resizeThisIframe) === 'function') {
                resizeThisIframe();
            }
        },
        "complete": function () {
            eval(onCompleteScript);
        },
        "duration": "fast"
    };
    contentPanel.slideToggle(slideOptions);
}

function IsPanelExpanded(triggerId) {
    return $("#" + triggerId).attr("aria-expanded") == "true";
}
//END Trisept.UI.Web.Shell.CollapsiblePanel.js
//START Trisept.UI.Web.Shell.CustomValidatorCallout.js

CustomValidatorCallout = {
    _warningIconImageUrl: null,
    _closeImageUrl: null,
    _cssClass: "ajax__validatorcallout",
    _width: "200px",
    _popupTable: null,
    _errorMessageCell: null,
    _calloutArrowCell: null,
    _warningIconImage: null,
    _closeImage: null,
    _popupBehavior: null,
    _focusAttached: false,
    _isOpen: false,
    _isBuilt: false,
    _closeClickHandler: null, //Function.createDelegate(this, this._oncloseClick),
    _focusHandler: null, //Function.createDelegate(this, this._onfocus),
    _cache: {},
    _isValid: null,
    _errMsg: null,
    _valOpenId: "",
    _ariaValidationErrorRegion: null,

    _ensureCallout: function (ctrlId) {
        var elt = $get(ctrlId);
        var popupTableBody = document.createElement("tbody");
        var popupTableRow = document.createElement("tr");
        var popupTableRow2 = document.createElement("tr");
        var calloutCell = document.createElement("td");
        var calloutCell2 = document.createElement("td");
        var calloutTable = document.createElement("table");
        var calloutTableBody = document.createElement("tbody");
        var calloutTableRow = document.createElement("tr");
        var iconCell = document.createElement("td");
        var closeCell = document.createElement("td");
        var popupTable = this._popupTable = document.createElement("table");
        var calloutArrowCell = this._calloutArrowCell = document.createElement("td");
        var warningIconImage = this._warningIconImage = document.createElement("img");
        var closeImage = this._closeImage = document.createElement("img");
        var errorMessageCell = this._errorMessageCell = document.createElement("td");
        this._width = calloutStyle.Width;
        this._cssClass = calloutStyle.CssClass;
        //
        // popupTable
        //
        popupTable.id = elt.id + "_popupTable";
        popupTable.cellPadding = 0;
        popupTable.cellSpacing = 0;
        popupTable.border = 0;
        popupTable.width = this._width;
        popupTable.style.zIndex = 20;
        popupTable.className = this._cssClass + " ajax__validatorcallout_popup_table";
        popupTable.setAttribute("aria-hidden", "true"); //We do not want the screen readers to read the contents of the popup.  The alert that is read is the ariaValidationErrorRegion.
        //
        // popupTableRow
        //
        popupTableRow.className = "ajax__validatorcallout_popup_table_row";
        popupTableRow2.className = "ajax__validatorcallout_popup_table_row";
        //
        // calloutCell
        //

        calloutCell.className = "ajax__validatorcallout_callout_cell";
        calloutCell2.className = "ajax__validatorcallout_callout_cell";
        //
        // calloutTable
        //
        calloutTable.cellPadding = 0;
        calloutTable.cellSpacing = 0;
        calloutTable.border = 0;
        //        calloutTable.style.height = "100%";
        calloutTable.className = "ajax__validatorcallout_callout_table";
        //
        // calloutTableRow
        //
        calloutTableRow.className = "ajax__validatorcallout_callout_table_row";




        if (TopCallout) {
            //
            // calloutArrowCell
            //
            calloutArrowCell.className = "ajax__validatorcallout_callout_arrow_cell_down";
            //
            // iconCell
            //
            iconCell.className = "ajax__validatorcallout_icon_cell";
            //
            // closeCell
            //
            closeCell.className = "ajax__validatorcallout_close_button_cell";
        }
        else {
            if (this.screenSpaceAvailable(elt) == true) {
                //
                // calloutArrowCell
                //
                calloutArrowCell.className = "ajax__validatorcallout_callout_arrow_cell";
                //
                // iconCell
                //
                iconCell.className = "ajax__validatorcallout_icon_cell";
                //
                // closeCell
                //
                closeCell.className = "ajax__validatorcallout_close_button_cell";
            }

            else {
                //
                // calloutArrowCell
                //
                calloutArrowCell.className = "ajax__validatorcallout_callout_arrow_cell_reverse";
                //
                // iconCell
                //
                iconCell.className = "ajax__validatorcallout_icon_cell_reverse";
                //
                // closeCell
                //
                closeCell.className = "ajax__validatorcallout_close_button_cell_reverse";
            }
        }
        //
        // _warningIconImage
        //
        warningIconImage.border = 0;
        warningIconImage.src = custvalImgUrl.Alert;
        warningIconImage.alt = "Warning";
        //

        errorMessageCell.className = "ajax__validatorcallout_error_message_cell";
        errorMessageCell.innerHTML = "error";

        //
        // closeImage
        //
        closeImage.src = custvalImgUrl.Close;
        closeImage.style.cursor = 'pointer';
        closeImage.id = elt.id + "_close";
        closeImage.alt = "Close";
        //
        // Create the DOM tree
        //

        if (elt.parentNode != null) { elt.parentNode.appendChild(popupTable); }
        else { elt.appendChild(popupTable); }
        if (TopCallout) {
            popupTable.appendChild(popupTableBody);
            popupTableBody.appendChild(popupTableRow);
            popupTableRow.appendChild(iconCell);
            iconCell.appendChild(warningIconImage);
            popupTableRow.appendChild(errorMessageCell);
            popupTableRow.appendChild(closeCell);
            closeCell.appendChild(closeImage);

            calloutCell.appendChild(calloutTable);
            calloutTable.appendChild(calloutTableBody);
            calloutTableBody.appendChild(calloutTableRow);
            calloutTableRow.appendChild(calloutArrowCell)
            popupTableRow2.appendChild(calloutCell);
            popupTableBody.appendChild(popupTableRow2);



        }
        else {
            if (this.screenSpaceAvailable(elt) == true) {
                popupTable.appendChild(popupTableBody);
                popupTableBody.appendChild(popupTableRow);
                popupTableRow.appendChild(calloutCell);
                calloutCell.appendChild(calloutTable);
                calloutTable.appendChild(calloutTableBody);
                calloutTableBody.appendChild(calloutTableRow);
                calloutTableRow.appendChild(calloutArrowCell);
                popupTableRow.appendChild(iconCell);
                iconCell.appendChild(warningIconImage);
                popupTableRow.appendChild(errorMessageCell);
                popupTableRow.appendChild(closeCell);
                closeCell.appendChild(closeImage);
            }
            else {
                popupTable.appendChild(popupTableBody);
                popupTableBody.appendChild(popupTableRow);
                popupTableRow.appendChild(closeCell);
                closeCell.appendChild(closeImage);
                popupTableRow.appendChild(errorMessageCell);
                popupTableRow.appendChild(iconCell);
                iconCell.appendChild(warningIconImage);
                calloutTable.appendChild(calloutTableBody);
                calloutTableBody.appendChild(calloutTableRow);
                calloutTableRow.appendChild(calloutArrowCell);
                popupTableRow.appendChild(calloutCell);
                calloutCell.appendChild(calloutTable);
            }
        }
        //
        // initialize callout arrow
        //
        var div = document.createElement("div");
        if (TopCallout) { div.className = "ajax__validatorcallout_innerdiv_down" }
        else {
            if (this.screenSpaceAvailable(elt) == true)
            { div.className = "ajax__validatorcallout_innerdiv"; }
            else
            { div.className = "ajax__validatorcallout_innerdiv_reverse"; }
        }
        calloutArrowCell.appendChild(div);
        for (var i = 14; i > 0; i--) {
            var line = document.createElement("div");
            line.style.width = i.toString() + "px";
            div.appendChild(line);
        }
        //
        // initialize behaviors

        this._popupBehavior = new PopupBehavior(this._popupTable, elt, "");
        $addHandler(this._closeImage, "click", this._closeClickHandler);
        $addHandler(elt, "focus", this._focusHandler);
        this._cache[elt.id] = this._popupBehavior;
        this._isBuilt = true;
    },

    _oncloseClick: function (e) {
        this._popupBehavior.hide();
        this._isOpen = false;
    },

    _onfocus: function (e) {
        this.getElement(e.target.id);
    },

    getElement: function (ctrlid) {
        if (this._cache[ctrlid]) {
            for (var key in this._cache) {
                if (key != ctrlid && this._cache[key]._visible == true) {
                    if (this._isOpen) {
                        if (this._popupBehavior == this._cache[key]) {
                            this._popupBehavior.hide();
                            this._isOpen = false;
                        }
                    }
                }
            }

            if (this._cache[ctrlid]._visible == false) {
                var ele = document.getElementById(ctrlid);
                if (ele.custvalid) {
                    var val;
                    for (var i = 0; i <= ele.custvalid.length - 1; i++) {
                        var valctrl = $get(ele.custvalid[i]);
                        if (valctrl != null && valctrl.isvalid == false) {
                            val = valctrl;
                        }
                    }
                    if (val)
                        OnValidate(val);
                }
            }
        }
    },

    dispose: function () {

        if (this._isBuilt) {
            this._oncloseClick();

            if (this._popupBehavior) {
                this._popupBehavior = null;
                this._cache = {};
            }

            if (this._popupTable) {
                if (this._popupTable.parentNode)
                    this._popupTable.parentNode.removeChild(this._popupTable);

                this._popupTable = null;
                this._errorMessageCell = null;
                this._calloutArrowCell = null;
                this._warningIconImage = null;
                this._closeImage = null;
                this._closeCellInnerDiv = null;
            }
            this._isBuilt = false;
        }
    },

    validateCtrl: function (val) {
        var elt = $get(val.controltovalidate);
        var input = document.getElementById(val.controltovalidate);
        if (this._closeClickHandler == null)
            this._closeClickHandler = Function.createDelegate(this, this._oncloseClick);

        if (this._focusHandler == null)
            this._focusHandler = Function.createDelegate(this, this._onfocus);

        if (val.isopen == null) {
            val.isopen = false;
        }

        if (elt.isopen == null) {
            elt.isopen = false;
        }

        if (!val.isvalid) {
            $addHandler(elt, "focus", this._focusHandler);
            if (!this._isOpen) {
                if (this._cache != null) {
                    if (this._cache[val.controltovalidate] == null) {
                        this._ensureCallout(val.controltovalidate);
                    }
                    else if (this._cache[val.controltovalidate]._visible == false)
                    { this._ensureCallout(val.controltovalidate); }
                }
                else
                { this._ensureCallout(val.controltovalidate); }

                if (this._errorMessageCell != null) {
                    this._errorMessageCell.innerHTML = val.errormessage;
                    this.setAriaValidationError(val.errormessage);
                }

                this._popupBehavior = this._cache[val.controltovalidate];
                if (!TopCallout) this._popupBehavior.set_x(this.calculatePosition(elt, this._popupBehavior._element));
                this._popupBehavior.show();
                val.isopen = true;
                elt.isopen = true;
                this._isOpen = true;
                this._valOpenId = val.id;
            }
            else {
                if (this._cache[val.controltovalidate] == null) {
                    this._cache[val.controltovalidate] = new PopupBehavior(null, val.controltovalidate, val.errormessage);
                }
                else {
                    if (this._popupBehavior == this._cache[val.controltovalidate]) {
                        if (this._errorMessageCell != null) {
                            this._errorMessageCell.innerHTML = val.errormessage;
                            this.setAriaValidationError(val.errormessage);
                        }
                    }
                }
            }

            input.setAttribute("aria-invalid", "true"); //For screen readers
        }
        else {
            if (this._isOpen) {
                if (this._popupBehavior == this._cache[val.controltovalidate]) {
                    if (val.isopen == true) {
                        this._popupBehavior.hide();
                        this._isOpen = false;
                        val.isopen = false;
                        //this.setAriaValidationError("");  TMH 4/19/17 Bug 96084 (IE reads alert after valid input)
                    }
                }

                //                if (this._cache[val.controltovalidate] != null) {
                //                    $removeHandler(elt, "focus", this._focusHandler);
                //                    delete this._cache[val.controltovalidate];
                //                }
            }

            input.setAttribute("aria-invalid", "false"); //For screen readers
        }
    },

    screenSpaceAvailable: function (trgtctrl) {
        var xsDiv = null;
        var ysDiv = null;
        var oPos = trgtctrl;
        var xsDiv = this.calculateLeft(trgtctrl);
        var iPopW = parseInt(this._width, 10) + 15;

        if (xsDiv + iPopW + trgtctrl.offsetWidth > screen.width) {
            return false;
        }
        else {
            return true;
        }
    },

    calculatePosition: function (trgtctrl, frame) {
        var xsDiv = null;
        var ysDiv = null;
        var oPos = trgtctrl;
        var oDiv = frame;
        var xsDiv = this.calculateLeft(trgtctrl);
        var iPopW = parseInt(oDiv.width, 10) + 15;

        if (xsDiv + iPopW + trgtctrl.offsetWidth > screen.width) {
            xsDiv = 0 - parseInt(oDiv.width);
        }
        else {
            xsDiv = this._popupBehavior._getSize(trgtctrl).width;
        }
        return xsDiv;
    },

    calculateLeft: function (obj) {
        toreturn = 0;
        while (obj) {
            toreturn += obj.offsetLeft;
            obj = obj.offsetParent;
        }
        return toreturn;
    },

    //Set specified message in page's ARIA live region so screen readers get it as an alert
    setAriaValidationError: function (errorMessage) {
        if (this._ariaValidationErrorRegion == null) {
            //Create the live region if it doesn't exist
            var ariaValidationErrorRegion = document.createElement("div");
            ariaValidationErrorRegion.id = "ariaValidationError";
            ariaValidationErrorRegion.className = "ariaHidden";
            ariaValidationErrorRegion.setAttribute("role", "alert");
            ariaValidationErrorRegion.setAttribute("aria-live", "assertive");
            document.body.appendChild(ariaValidationErrorRegion);
            this._ariaValidationErrorRegion = document.getElementById("ariaValidationError");
        }
        this._ariaValidationErrorRegion.innerHTML = errorMessage;
    }

} // End of Callout JSON Object

PopupBehavior = function (element, parentElement, errorMessage) {
    this._x = 0;
    this._y = 0;
    this._parentElement = parentElement;

    if (element != null) {
        this._element = element;
        this._setVisible(element, false);
        this._element.style.position = "absolute";
    }
    this._visible = false;
    this._isValid = false;
    this._errMsg = errorMessage;
},

PopupBehavior.prototype = {

    _borderStyleNames: ["borderTopStyle", "borderRightStyle", "borderBottomStyle", "borderLeftStyle"],
    _borderWidthNames: ["borderTopWidth", "borderRightWidth", "borderBottomWidth", "borderLeftWidth"],
    _paddingWidthNames: ["paddingTop", "paddingRight", "paddingBottom", "paddingLeft"],
    _marginWidthNames: ["marginTop", "marginRight", "marginBottom", "marginLeft"],

    show: function () {
        if (this._visible) {
            return;
        }
        this._visible = true;
        this._setVisible(this._element, true);
        var bounds = this.getBounds();
        this._setLocation(this._element, bounds);


        this._element.zIndex = 1000;
        this.addBackgroundIFrame();
    },

    hide: function () {
        if (!this._visible) {
            return;
        }
        this._visible = false;
        this._setVisible(this._element, false);
        if (Sys.Browser.agent === Sys.Browser.InternetExplorer) {
            var childFrame = this._element._hideWindowedElementsIFrame;
            if (childFrame) {
                childFrame.style.display = "none";
            }
        }
    },

    getBounds: function () {

        var element = this._element;
        var elm = element;
        if (elm.offsetParent == null) {
            elm = document.documentElement;
        }
        else {
            for (;
            elm && elm.offsetParent != document.body && elm.offsetParent != document.documentElement;
            elm = elm.offsetParent
            );
        }
        var offsetParent = elm;
        var diff;
        var parentBounds;
        if (this._parentElement) {
            parentBounds = this._getBounds(this._parentElement);

            if (this._element.id == offsetParent.id) {
                diff = { x: parentBounds.x, y: parentBounds.y };
            } else {
                var offsetParentLocation = this._getLocation(offsetParent);
                diff = { x: parentBounds.x - offsetParentLocation.x, y: parentBounds.y - offsetParentLocation.y };
            }
        } else {
            parentBounds = this._getBounds(offsetParent);
            diff = { x: 0, y: 0 };
        }

        var width = element.offsetWidth - (element.clientLeft ? element.clientLeft * 2 : 0);
        var height = element.offsetHeight - (element.clientTop ? element.clientTop * 2 : 0);

        // Setting the width causes the element to grow by border+passing every
        // time.  But not setting it causes strange behavior in safari. Just set it once.

        var position;
        position = { x: 0, y: 0 };
        position.x += this._x + diff.x;
        position.y += this._y + diff.y;

        if (TopCallout) {
            //if getElementByID('iframe restool div').getlocation.left + restool.width (restool width) > position.x + width 
            //move subtract left until if fits within bounds...
            var containerDiv = document.getElementById(containerDivID)
            if (width > containerDiv.offsetWidth)
                width = containerDiv.offsetWidth;
            var containerDivPosition = this._getLocation(containerDiv);


            var xdiff = (position.x + width) - (containerDivPosition.x + containerDiv.offsetWidth);
            if (xdiff > 0) {
                xdiff += 15;
                $(".ajax__validatorcallout_innerdiv_down").css({ left: xdiff });
                position.x -=  xdiff;
            }
            position.y -= height;
        }

        return new Sys.UI.Bounds(position.x, position.y, width, height);
    },

    adjustPopupPosition: function (bounds) {

        var element = this._element;
        if (!bounds) {
            bounds = this.getBounds();
        }

        var newPosition = this._getBounds(element);
        var updateNeeded = false;

        if (newPosition.x < 0) {
            bounds.x -= newPosition.x;
            updateNeeded = true;
        }
        if (newPosition.y < 0) {
            bounds.y -= newPosition.y;
            updateNeeded = true;
        }

        if (updateNeeded) {
            this._setLocation(element, bounds);
        }
    },


    addBackgroundIFrame: function () {
        /// <summary>
        /// Add an empty IFRAME behind the popup (for IE6 only) so that SELECT, etc., won't
        /// show through the popup.
        /// </summary>

        // Get the child frame

        if ((Sys.Browser.agent === Sys.Browser.InternetExplorer) && (Sys.Browser.version < 7)) {
            var element = this._element;
            var childFrame = element._hideWindowedElementsIFrame;

            // Create the child frame if it wasn't found
            if (!childFrame) {
                childFrame = document.createElement("iframe");
                childFrame.src = "javascript:'<html></html>';";
                childFrame.style.position = "absolute";
                childFrame.style.display = "none";
                childFrame.scrolling = "no";
                childFrame.frameBorder = "0";
                childFrame.tabIndex = "-1";
                childFrame.style.filter = "progid:DXImageTransform.Microsoft.Alpha(style=0,opacity=0)";
                element.parentNode.insertBefore(childFrame, element);
                element._hideWindowedElementsIFrame = childFrame;
            }

            // Position the frame exactly behind the element
            this.setBounds(childFrame, this.getBounds());
            childFrame.style.display = element.style.display;
            if (element.currentStyle && element.currentStyle.zIndex) {
                childFrame.style.zIndex = element.currentStyle.zIndex;
            } else if (element.style.zIndex) {
                childFrame.style.zIndex = element.style.zIndex;
            }
        }
    },

    setBounds: function (element, bounds) {
        /// <summary>
        /// Sets the "border-box" bounds of an element
        /// </summary>
        /// <param name="element" type="Sys.UI.DomElement" domElement="true">
        /// DOM element
        /// </param>
        /// <param name="bounds" type="Object">
        /// Bounds of the element (of the form {x,y,width,height})
        /// </param>
        /// <remarks>
        /// The "border-box" is the size of the content area *outside* of the borders and
        /// padding of an element.  The "border-box" size does not include the margins around
        /// the element.
        /// </remarks>

        if (!element) {
            throw Error.argumentNull('element');
        }
        if (!bounds) {
            throw Error.argumentNull('bounds');
        }
        this.setSize(element, bounds);
        this._setLocation(element, bounds);
    },

    setContentSize: function (element, size) {
        /// <summary>
        /// Sets the "content-box" size of an element.
        /// </summary>
        /// <param name="element" type="Sys.UI.DomElement" domElement="true">
        /// DOM element
        /// </param>
        /// <param name="size" type="Object">
        /// Size of the element (in the form {width,height})
        /// </param>
        /// <remarks>
        /// The "content-box" is the size of the content area *inside* of the borders and
        /// padding of an element. The "content-box" size does not include the margins around
        /// the element.
        /// </remarks>

        if (!element) {
            throw Error.argumentNull('element');
        }
        if (!size) {
            throw Error.argumentNull('size');
        }
        // FF respects -moz-box-sizing css extension, so adjust the box size for the border-box
        if (this._getCurrentStyle(element, 'MozBoxSizing') == 'border-box' || this._getCurrentStyle(element, 'BoxSizing') == 'border-box') {
            var borderBox = this.getBorderBox(element);
            var paddingBox = this.getPaddingBox(element);
            size = {
                width: size.width + borderBox.horizontal + paddingBox.horizontal,
                height: size.height + borderBox.vertical + paddingBox.vertical
            };
        }
        element.style.width = size.width.toString() + 'px';
        element.style.height = size.height.toString() + 'px';
    },

    setSize: function (element, size) {
        /// <summary>
        /// Sets the "border-box" size of an element.
        /// </summary>
        /// <remarks>
        /// The "border-box" is the size of the content area *outside* of the borders and 
        /// padding of an element.  The "border-box" size does not include the margins around
        /// the element.
        /// </remarks>
        /// <param name="element" type="Sys.UI.DomElement">DOM element</param>
        /// <param name="size" type="Object">Size of the element (in the form {width,height})</param>
        /// <returns />

        if (!element) {
            throw Error.argumentNull('element');
        }
        if (!size) {
            throw Error.argumentNull('size');
        }
        var borderBox = this.getBorderBox(element);
        var paddingBox = this.getPaddingBox(element);
        var contentSize = {
            width: size.width - borderBox.horizontal - paddingBox.horizontal,
            height: size.height - borderBox.vertical - paddingBox.vertical
        };
        this.setContentSize(element, contentSize);
    },

    getBorderBox: function (element) {
        /// <summary>
        /// Gets the entire border box sizes.
        /// </summary>
        /// <param name="element" type="Sys.UI.DomElement" domElement="true">
        /// DOM element
        /// </param>
        /// <returns type="Object">
        /// Element's border box sizes (of the form {top,left,bottom,right,horizontal,vertical})
        /// </returns>

        if (!element) {
            throw Error.argumentNull('element');
        }
        var box = {
            top: this.getBorderWidth(element, 0),
            right: this.getBorderWidth(element, 1),
            bottom: this.getBorderWidth(element, 2),
            left: this.getBorderWidth(element, 3)
        };
        box.horizontal = box.left + box.right;
        box.vertical = box.top + box.bottom;
        return box;
    },

    getPaddingBox: function (element) {
        /// <summary>
        /// Gets the entire padding box sizes.
        /// </summary>
        /// <param name="element" type="Sys.UI.DomElement" domElement="true">
        /// DOM element
        /// </param>
        /// <returns type="Object">
        /// Element's padding box sizes (of the form {top,left,bottom,right,horizontal,vertical})
        /// </returns>

        if (!element) {
            throw Error.argumentNull('element');
        }
        var box = {
            top: this.getPadding(element, 0),
            right: this.getPadding(element, 1),
            bottom: this.getPadding(element, 2),
            left: this.getPadding(element, 3)
        };
        box.horizontal = box.left + box.right;
        box.vertical = box.top + box.bottom;
        return box;
    },

    isBorderVisible: function (element, boxSide) {
        /// <summary>
        /// Gets whether the current border style for an element on a specific boxSide is not 'none'.
        /// </summary>
        /// <param name="element" type="Sys.UI.DomElement" domElement="true">
        /// DOM element
        /// </param>
        /// <param name="boxSide" type="AjaxControlToolkit.BoxSide">
        /// Side of the element
        /// </param>
        /// <returns type="Boolean">
        /// Whether the current border style for an element on a specific boxSide is not 'none'.
        /// </returns>

        if (!element) {
            throw Error.argumentNull('element');
        }
        if (boxSide < 0 || boxSide > 3) {
            throw Error.argumentOutOfRange(String.format(Sys.Res.enumInvalidValue, boxSide, 'AjaxControlToolkit.BoxSide'));
        }

        var styleName = this._borderStyleNames[boxSide];
        var styleValue = this._getCurrentStyle(element, styleName);
        return styleValue != "none";
    },

    getBorderWidth: function (element, boxSide) {
        /// <summary>
        /// Gets the border thickness of an element on a specific boxSide.
        /// </summary>
        /// <param name="element" type="Sys.UI.DomElement" domElement="true">
        /// DOM element
        /// </param>
        /// <param name="boxSide" type="AjaxControlToolkit.BoxSide">
        /// Side of the element
        /// </param>
        /// <returns type="Number" integer="true">
        /// Border thickness on the element's specified side
        /// </returns>

        if (!element) {
            throw Error.argumentNull('element');
        }
        if (boxSide < 0 || boxSide > 3) {

            throw Error.argumentOutOfRange(String.format(Sys.Res.enumInvalidValue, boxSide, 'AjaxControlToolkit.BoxSide'));
        }

        if (!this.isBorderVisible(element, boxSide)) {
            return 0;
        }
        var styleName = this._borderWidthNames[boxSide];
        var styleValue = this._getCurrentStyle(element, styleName);

        return this.parseBorderWidth(styleValue);
    },

    getPadding: function (element, boxSide) {
        /// <summary>
        /// Gets the padding thickness of an element on a specific boxSide.
        /// </summary>
        /// <param name="element" type="Sys.UI.DomElement" domElement="true">
        /// DOM element
        /// </param>
        /// <param name="boxSide" type="AjaxControlToolkit.BoxSide">
        /// Side of the element
        /// </param>
        /// <returns type="Number" integer="true">
        /// Padding on the element's specified side
        /// </returns>

        if (!element) {
            throw Error.argumentNull('element');
        }
        if (boxSide < 0 || boxSide > 3) {
            throw Error.argumentOutOfRange(String.format(Sys.Res.enumInvalidValue, boxSide, 'AjaxControlToolkit.BoxSide'));
        }
        var styleName = this._paddingWidthNames[boxSide];
        var styleValue = this._getCurrentStyle(element, styleName);
        return this.parsePadding(styleValue);
    },

    parseBorderWidth: function (borderWidth) {

        /// <summary>
        /// Parses a border-width string into a pixel size
        /// </summary>
        /// <param name="borderWidth" type="String" mayBeNull="true">
        /// Type of border ('thin','medium','thick','inherit',px unit,null,'')
        /// </param>
        /// <returns type="Number" integer="true">
        /// Number of pixels in the border-width
        /// </returns>
        if (!this._borderThicknesses) {

            // Populate the borderThicknesses lookup table
            var borderThicknesses = {};
            var div0 = document.createElement('div');
            div0.style.visibility = 'hidden';
            div0.style.position = 'absolute';
            div0.style.fontSize = '1px';
            document.body.appendChild(div0)
            var div1 = document.createElement('div');
            div1.style.height = '0px';
            div1.style.overflow = 'hidden';
            div0.appendChild(div1);
            var base = div0.offsetHeight;
            div1.style.borderTop = 'solid black';
            div1.style.borderTopWidth = 'thin';
            borderThicknesses['thin'] = div0.offsetHeight - base;
            div1.style.borderTopWidth = 'medium';
            borderThicknesses['medium'] = div0.offsetHeight - base;
            div1.style.borderTopWidth = 'thick';
            borderThicknesses['thick'] = div0.offsetHeight - base;
            div0.removeChild(div1);
            document.body.removeChild(div0);
            this._borderThicknesses = borderThicknesses;
        }

        if (borderWidth) {
            switch (borderWidth) {
                case 'thin':
                case 'medium':
                case 'thick':
                    return this._borderThicknesses[borderWidth];
                case 'inherit':
                    return 0;
            }
            var unit = this.parseUnit(borderWidth);
            Sys.Debug.assert(unit.type == 'px', String.format(AjaxControlToolkit.Resources.Common_InvalidBorderWidthUnit, unit.type));
            return unit.size;
        }
        return 0;
    },

    parsePadding: function (padding) {
        /// <summary>
        /// Parses a padding string into a pixel size
        /// </summary>
        /// <param name="padding" type="String" mayBeNull="true">
        /// Padding to parse ('inherit',px unit,null,'')
        /// </param>
        /// <returns type="Number" integer="true">
        /// Number of pixels in the padding
        /// </returns>

        if (padding) {
            if (padding == 'inherit') {
                return 0;
            }
            var unit = this.parseUnit(padding);
            Sys.Debug.assert(unit.type == 'px', String.format(AjaxControlToolkit.Resources.Common_InvalidPaddingUnit, unit.type));
            return unit.size;
        }
        return 0;
    },

    parseUnit: function (value) {
        /// <summary>
        /// Parses a unit string into a unit object
        /// </summary>
        /// <param name="value" type="String" mayBeNull="true">
        /// Value to parse (of the form px unit,% unit,em unit,...)
        /// </param>
        /// <returns type="Object">
        /// Parsed unit (of the form {size,type})
        /// </returns>

        if (!value) {
            throw Error.argumentNull('value');
        }

        value = value.trim().toLowerCase();
        var l = value.length;
        var s = -1;
        for (var i = 0; i < l; i++) {
            var ch = value.substr(i, 1);
            if ((ch < '0' || ch > '9') && ch != '-' && ch != '.' && ch != ',') {
                break;
            }
            s = i;
        }
        if (s == -1) {
            throw Error.create(AjaxControlToolkit.Resources.Common_UnitHasNoDigits);
        }
        var type;
        var size;
        if (s < (l - 1)) {
            type = value.substring(s + 1).trim();
        } else {
            type = 'px';
        }
        size = parseFloat(value.substr(0, s + 1));
        if (type == 'px') {
            size = Math.floor(size);
        }
        return {
            size: size,
            type: type
        };
    },

    set_x: function (value) {
        if (value != this._x) {
            this._x = value;
            if (this._visible) {
                this.setupPopup();
            }
        }
    },

    set_y: function (value) {
        if (value != this._y) {
            this._y = value;
            if (this._visible) {
                this.setupPopup();
            }
        }
    },

    _getLocation: function (element) {
        if (element === document.documentElement) {
            return new Sys.UI.Point(0, 0);
        }

        // Workaround for IE6 bug in getLocation (also required patching getBounds - remove that fix when this is removed)
        if (Sys.Browser.agent == Sys.Browser.InternetExplorer && Sys.Browser.version < 7) {
            if (element.window === element || element.nodeType === 9 || !element.getClientRects || !element.getBoundingClientRect) return new Sys.UI.Point(0, 0);

            // Get the first bounding rectangle in screen coordinates
            var screenRects = element.getClientRects();
            if (!screenRects || !screenRects.length) {
                return new Sys.UI.Point(0, 0);
            }
            var first = screenRects[0];

            // Delta between client coords and screen coords
            var dLeft = 0;
            var dTop = 0;

            var inFrame = false;
            try {
                inFrame = element.ownerDocument.parentWindow.frameElement;
            } catch (ex) {
                // If accessing the frameElement fails, a frame is probably in a different
                // domain than its parent - and we still want to do the calculation below
                inFrame = true;
            }

            // If we're in a frame, get client coordinates too so we can compute the delta
            if (inFrame) {
                // Get the bounding rectangle in client coords
                var clientRect = element.getBoundingClientRect();
                if (!clientRect) {
                    return new Sys.UI.Point(0, 0);
                }

                // Find the minima in screen coords
                var minLeft = first.left;
                var minTop = first.top;
                for (var i = 1; i < screenRects.length; i++) {
                    var r = screenRects[i];
                    if (r.left < minLeft) {
                        minLeft = r.left;
                    }
                    if (r.top < minTop) {
                        minTop = r.top;
                    }
                }

                // Compute the delta between screen and client coords
                dLeft = minLeft - clientRect.left;
                dTop = minTop - clientRect.top;
            }

            // Subtract 2px, the border of the viewport (It can be changed in IE6 by applying a border style to the HTML element,
            // but this is not supported by ASP.NET AJAX, and it cannot be changed in IE7.), and also subtract the delta between
            // screen coords and client coords
            var ownerDocument = element.document.documentElement;
            return new Sys.UI.Point(first.left - 2 - dLeft + ownerDocument.scrollLeft, first.top - 2 - dTop + ownerDocument.scrollTop);
        }

        return Sys.UI.DomElement.getLocation(element);
    },

    _setLocation: function (element, point) {
        Sys.UI.DomElement.setLocation(element, point.x, point.y);
    },

    _getSize: function (element) {

        if (!element) {
            throw Error.argumentNull('element');
        }
        return {
            width: element.offsetWidth,
            height: element.offsetHeight
        };
    },

    _getBounds: function (element) {

        var offset = this._getLocation(element);
        return new Sys.UI.Bounds(offset.x, offset.y, element.offsetWidth || 0, element.offsetHeight || 0);
    },

    _getVisible: function (element) {
        return (element &&
                ("none" != this._getCurrentStyle(element, "display")) &&
                ("hidden" != this._getCurrentStyle(element, "visibility")));
    },

    _setVisible: function (element, value) {

        if (element && value != this._getVisible(element)) {

            element.style.visibility = value ? 'visible' : 'hidden';
            element.style.display = value ? 'block' : 'none';
        }
    },

    _getCurrentStyle: function (element, attribute, defaultValue) {
        var currentValue = null;
        if (element) {
            if (element.currentStyle) {
                currentValue = element.currentStyle[attribute];
            } else if (document.defaultView && document.defaultView.getComputedStyle) {
                var style = document.defaultView.getComputedStyle(element, null);
                if (style) {
                    currentValue = style[attribute];
                }
            }

            if (!currentValue && element.style.getPropertyValue) {
                currentValue = element.style.getPropertyValue(attribute);
            }
            else if (!currentValue && element.style.getAttribute) {
                currentValue = element.style.getAttribute(attribute);
            }
        }

        if ((!currentValue || currentValue == "" || typeof (currentValue) === 'undefined')) {
            if (typeof (defaultValue) != 'undefined') {
                currentValue = defaultValue;
            }
            else {
                currentValue = null;
            }
        }
        return currentValue;
    }
}// End of PopupBehavior JSON Object


    //    document.body.onload = funct;

    //    function funct() {

    //    }

function OnValidate(val) {
        val.isvalid = val.oldevaluationfunction(val);
        if (val.isvalid == false) {
            if (val.innerHTML != null && val.innerHTML != "") {
                if (val.errormessage == null || val.errormessage == "") {
                    val.errormessage = val.innerHTML; 
                }
                val.innerHTML = "";
            }
        }
        CustomValidatorCallout.validateCtrl(val);
        return val.isvalid;
    }


    Sys.Application.add_load(BeginRequestHandler);

    function BeginRequestHandler() {
        if (!(typeof Page_Validators == "undefined" || Page_Validators == null)) {
            CustomValidatorCallout.dispose();
            for (var i = 0; i < Page_Validators.length; i++) {
//                if (Page_Validators[i].id.indexOf("rfvTxtEmail") > 0) {
//                    debugger;
//                                }
                if (Page_Validators[i].getAttribute("allowcustcallout") == null || (Page_Validators[i].getAttribute("allowcustcallout") != null && Page_Validators[i].getAttribute("allowcustcallout") != "0")) {

                    if (Page_Validators[i].controltovalidate != null && Page_Validators[i].controltovalidate != "") {
                        //if (Page_Validators[i].clientvalidationfunction) {
                        var ele = $get(Page_Validators[i].controltovalidate);
                        var test = false;
                        if (ele != null) {
                             if(ele.custvalid == null) {
                                ele.custvalid = [];
                            } 
                            if (Page_Validators[i].valoverride == null) {
                                Page_Validators[i].valoverride = true;
                                Page_Validators[i].oldevaluationfunction = Page_Validators[i].evaluationfunction;
                                Page_Validators[i].evaluationfunction = OnValidate;
                                ele.custvalid[ele.custvalid.length] = Page_Validators[i].id;
                            }
                        }
                                                 
                   
                    }


                }
            }
        }
    }

    //Esc closes current callout
    $(document).keyup(function (e) {
        if (e.which == 27) {
            e.preventDefault();
            if (CustomValidatorCallout != null && CustomValidatorCallout._popupBehavior != null && CustomValidatorCallout._popupBehavior._visible) {
                CustomValidatorCallout._popupBehavior.hide();
                CustomValidatorCallout._isOpen = false;

                e.stopImmediatePropagation();
            }
            
        }
    });    

//END Trisept.UI.Web.Shell.CustomValidatorCallout.js
//START Trisept.UI.Web.Shell.modalFunctionsResponsive.js
/* 05/23/2013 - New version that will resize/reposition modals automatically on-the-fly to fit any size window if necessary. Old desktop
functionality for large windows should not change.  Existing function calls need not change. */

/* NOTE:  THE ONLY FUNCTIONS THAT SHOULD BE CALLED DIRECTLY FROM THE PAGE ARE showModal(), hideModal()
and hideAllModals().  ALL OTHER FUNCTIONS ARE INTERNAL.*/

var _maxPhoneWidth = 414;  //px size at which modals will always fill screen

//Global variables (values are set the first time showModal() is hit per page)
var modalParentDiv;
var modalIframeDiv;
var modalContentDiv;
var modalPopupExtender;
var enableModalLegacyScript = false;
var isIE6;

var elementsToShrink = 'div,ul';    //Comma-separated list of element types for which to shrink to fit the window width inside content modals (not using '*' for performance reasons; limit it to just elements known to have issues)

var previouslyFocusedElements = new Array();    //Stack of elements that had focus before opening each modal

var DisableModalClose = false; //So close modal key can be disabled for waitscreens

/*
This function will populate, position, style and display a modal popup box. Inputs:

- childDivID: [optional] The ID of the div that contains the content to be displayed in the modal.
- Specify '' for a modal with an iframe.
    
- modalDivCSSClass: The name of a CSS class to be applied to the parent modal div.
 
- mpeRepositionMode: A number 0-3 that represents when automatic repositioning of the modal popup should take
place (e.g. '3' means the modal will always stay centered in the screen whenever the browser window is scrolled or resized).
- 0: None
- 1: RepositionOnWindowResize
- 2: RepositionOnWindowScroll
- 3: RepositionOnWindowResizeAndScroll
    
- mpeX: The number of pixels over on the browser's X-axis that the modal popup should appear.
- Specify -1 to have the modal auto-center on the X-axis.
- Note: RepositionMode will only work on the X-axis if X is set to -1.
    
- mpeY: The number of pixels down on the browser's Y-axis that the modal popup should appear.
- Specify -1 to have the modal auto-center on the Y-axis.
- Note: RepositionMode will only work on the Y-axis if Y is set to -1.
    
- iframeURL: [optional] The URL of the document to load in an iframe inside the modal.
- Specify '' for a content modal with no iframe.
    
- iframeWidth: [optional] The width in pixels to be applied to the iframe.
- Specify -1 for a content modal with no iframe, or to use the default iframe width.
 
- iframeHeight: [optional] The initial height in pixels to be applied to the iframe before it is automatically
resized once the document finishes loading.
- Specify -1 for a content modal with no iframe, or to use the default iframe height.
  - 2019: -1 for default iframe height is deprecated; it will now make it start big enough to avoid triggering phone rules
- Note: Passing in a rough approximation will help prevent the modal from jumping around when RepositionMode is used.

- preIframeURL:

- disableAutoFocus: If true, disables modal auto-focus logic.  Use to prevent conflict if iframe doc already handles focus itself (e.g. on first input)

- modalTitle: for title attribute of modal iframe

- disableClose: If true, hides close button and prevents Escape from closing modal

- beforeClose: Function to invoke before modal is closed.  Should return true/false whether to perform the close.
*/
function showModal(childDivID, modalDivCSSClass, mpeRepositionMode, mpeX, mpeY, iframeURL, iframeWidth, iframeHeight, preIframeURL, disableAutoFocus, modalTitle, disableClose, beforeClose) {

    if ((disableAutoFocus == undefined) || (disableAutoFocus == '')) disableAutoFocus = false;

    if (preIframeURL == '') {
        preIframeURL = null;
    }

    if (typeof (modalTitle) === 'undefined') {  //Optional param
        modalTitle = '';
    }

    modalTitle = ''; //Disable iframe title (better title in each doc's <title>)

    if (typeof (disableClose) === 'undefined' || disableClose == '') {  //Optional param
        disableClose = false;
    }

    if ($(window).width() <= _maxPhoneWidth || $(window).height() <= _maxPhoneWidth) {
        mpeX = 0;
        mpeY = 0;
    }

    //Prevent modals that start very short from triggering phone size CSS that wreck iframe resizing
    if (iframeHeight <= _maxPhoneWidth) {
        iframeHeight = _maxPhoneWidth + 1;
    }

    //Set global references to page elements we need to use.
    if (modalParentDiv == undefined) {
        modalParentDiv = $get("modalParentDiv");
    }
    if (modalIframeDiv == undefined) {
        modalIframeDiv = $get("modalIframeDiv");
    }
    if (modalContentDiv == undefined) {
        modalContentDiv = $get("modalContentDiv");
    }
    if (modalPopupExtender == undefined) {
        modalPopupExtender = $find("modalPopupExtender");
    }

    //Save focused element (in doc or iframe doc)
    if (modalStack.count > 0) {
        var currentModal = modalStack.stack[modalStack.count - 1];
        if (currentModal.iframeURL != '' && $("#modalIframe")[0].contentWindow != undefined) {  //Null check in case showModalWithClose co-opts "modalIframe" ID
            var iframeFocusedElement = $("#modalIframe")[0].contentWindow.document.activeElement;
            previouslyFocusedElements.push($(iframeFocusedElement));
        }
        else {
            previouslyFocusedElements.push($(document.activeElement));
        }
    }
    else {
        previouslyFocusedElements.push($(document.activeElement));
    }

    //Set boolean used for IE6 hacks
    if (isIE6 == undefined) {
        if (navigator.appName == "Microsoft Internet Explorer") {
            var ieVersion = parseFloat(navigator.appVersion.split("MSIE")[1]);
            if (ieVersion < 7) {
                isIE6 = true;
            }
            else {
                isIE6 = false;
            }
        }
        else {
            isIE6 = false;
        }
    }

    if (mpeY != -1) {
        var offSetY = 0;
        //mpeY is WebForm_GetScrollY() + offSetY e.g. WebForm_GetScrollY() + 20. Extract offSetY from mpeY.
        //At this point WebForm_GetScrollY() will be srollY position of 
        //parent page whose height might have change because of large modal page content.
        offSetY = mpeY - parent.WebForm_GetScrollY();
    }

    //Hide the modal popup (in case we are coming from another modal and hideModal() was not called)
    ariaShowNonModalContent();
    modalPopupExtender.hide();

    //If we're already in a modal, save the current content before loading the next modal
    if (modalStack.count > 0) {

        revertModalSize();  //Revert modal when hiding so that it will resize properly when getting reshown.

        var currentModal = modalStack.stack[modalStack.count - 1];
        saveModalContent(currentModal);
    }

    var contentDiv = $("#modalContentDiv");
    var iframeDiv = $("#modalIframeDiv");
    if (iframeURL != '') {
        contentDiv.hide();
        iframeDiv.show();
        loadIframe(iframeURL, iframeWidth, iframeHeight, preIframeURL, modalTitle);
    }
    else {
        iframeDiv.hide();
        contentDiv.show();
        loadContent(childDivID);
    }

    if (mpeY != -1) {
        //Set mpeY for modal popup.
        //At this point WebForm_GetScrollY() will be srollY position of parent page whose height returned to original because of 
        //hiding of modal which caused parent page height to increase.
        mpeY = parent.WebForm_GetScrollY() + offSetY;
    }

    setModalStyleAndPosition(modalDivCSSClass, mpeRepositionMode, mpeX, mpeY);

    //Add the current modal to the Modal Stack
    modalStack.pushModal(new Modal(childDivID, modalDivCSSClass, mpeRepositionMode, mpeX, mpeY, iframeURL, iframeWidth, iframeHeight, modalTitle, disableClose, beforeClose));

    EnableDisableModalClose(disableClose);

    var currentModal = getCurrentModal();
    if (currentModal != null) {
        currentModal.calculated.fitToWindow = fitModalToWindow();
    }

    //Display the modal popup
    ariaHideNonModalContent();
    modalPopupExtender.show();

    if ($(window).width() <= _maxPhoneWidth || $(window).height() <= _maxPhoneWidth) {
        $("#modalParentDiv").css('position', 'fixed').css('top', '0px');  //Override modal style after it's created for mobile
    }

    if (preIframeURL != null) {
        $("#modalIframe").load(function () {
            var str = this.src.toUpperCase()
            if (str.search(preIframeURL.toUpperCase()) != -1) {
                this.src = iframeURL;
            }
        });
    }

    if (!disableAutoFocus) {
        if (iframeURL != '') {
            setModalFocusIframe();
        }
        else {
            setModalFocus(modalParentDiv);
        }
    }

    //Key handling for when focus in iframe doc
    $("#modalIframe").on('load', function () {
        if ($("#modalIframe").length > 0) { //Cover IE raising load event after iframe destroyed
            if ($("#modalIframe")[0].contentWindow != undefined) {  //Null check in case showModalWithClose co-opts "modalIframe" ID
                $($("#modalIframe")[0].contentWindow.document).keydown(function (event) {
                    trapTabKey3($(this), event);
                });
                $($("#modalIframe")[0].contentWindow.document).keyup(function (event) {
                    trapEscapeKey($(this), event);
                });
            }
        }
    });

    //If small screen (phone)...
    if ($(window).width() <= _maxPhoneWidth || $(window).height() <= _maxPhoneWidth) {
        resizeModalScrollableZone();
    }
}

//DEPRECATED
function showModalwithClose(iframeURL, iframeWidth, iframeHeight, iframeclosecaption, iframecloseimgurl, CloseRedirectURL) {
    //Set global references to page elements we need to use.
    if (modalParentDiv == undefined) {
        modalParentDiv = $get("modalParentDiv");
    }
    if (modalIframeDiv == undefined) {
        modalIframeDiv = $get("modalIframeDiv");
    }
    if (modalContentDiv == undefined) {
        modalContentDiv = $get("modalContentDiv");
    }
    if (modalPopupExtender == undefined) {
        modalPopupExtender = $find("modalPopupExtender");
    }

    previouslyFocusedElements.push($(document.activeElement));

    //Set boolean used for IE6 hacks
    if (isIE6 == undefined) {
        if (navigator.appName == "Microsoft Internet Explorer") {
            var ieVersion = parseFloat(navigator.appVersion.split("MSIE")[1]);
            if (ieVersion < 7) {
                isIE6 = true;
            }
            else {
                isIE6 = false;
            }
        }
        else {
            isIE6 = false;
        }
    }

    //Hide the modal popup (in case we are coming from another modal and hideModal() was not called)
    modalPopupExtender.hide();

    if (modalStack.count > 0) {
        revertModalSize();  //Revert modal when hiding so that it will resize properly when getting reshown.
    }

    loadIframewithclose(iframeURL, iframeWidth, iframeHeight, iframeclosecaption, iframecloseimgurl, CloseRedirectURL);

    setModalStyleAndPosition('modalPopup', 3, -1, -1);

    //Add the current modal to the Modal Stack
    modalStack.pushModal(new Modal('', 'modalPopup', 3, -1, -1, iframeURL, iframeWidth, iframeHeight, false));

    var currentModal = getCurrentModal();
    if (currentModal != null) {
        currentModal.calculated.fitToWindow = fitModalToWindow();
    }

    //Display the modal popup
    modalPopupExtender.show();

    if (iframeURL != '') {
        setTimeout(function () {
            setModalFocus("#cells2");
        }, 2000);
    }
    else {
        setModalFocus(modalParentDiv);
    }
}

/* Similar to showModal(), but does not save the currently displaying modal, since we are closing modals and navigating
back down the modal stack.  This function should only be called by hideModal(), not by the page itself. */
function reshowModal() {

    //Need to pop and re-push modal to avoid messing up numbered iframes (so iframes aren't re-loaded)
    var prevModal = modalStack.popModal();

    var contentDiv = $("#modalContentDiv");
    var iframeDiv = $("#modalIframeDiv");
    if (prevModal.iframeURL != '') {
        contentDiv.hide();
        iframeDiv.show();
        loadIframe(prevModal.iframeURL, prevModal.iframeWidth, prevModal.iframeHeight, null, prevModal.iframeTitle);
    }
    else {
        iframeDiv.hide();
        contentDiv.show();
        loadContent(prevModal.childDivID);
    }

    setModalStyleAndPosition(prevModal.modalDivCSSClass, prevModal.mpeRepositionMode, prevModal.mpeX, prevModal.mpeY);

    //Add the current modal back to the Modal Stack
    modalStack.pushModal(prevModal);

    var currentModal = getCurrentModal();
    if (currentModal != null) {
        EnableDisableModalClose(currentModal.disableClose);
        currentModal.calculated.fitToWindow = fitModalToWindow();
    }

    //Display the modal popup
    ariaHideNonModalContent();
    modalPopupExtender.show();

    if ($(window).width() <= _maxPhoneWidth || $(window).height() <= _maxPhoneWidth) {
        $("#modalParentDiv").css('position', 'fixed').css('top', '0px');  //Override modal style after it's created for mobile
    }
}

/* Set the styling and positioning properties for the modal to be displayed */
function setModalStyleAndPosition(modalDivCSSClass, mpeRepositionMode, mpeX, mpeY) {
    //Set the modalPopupExtender's positioning properties
    modalPopupExtender.set_repositionMode(mpeRepositionMode);
    modalPopupExtender.set_X(mpeX);

    if (isIE6 == true) {
        //Hack for IE6 and older: the toolkit already adjusts for how far the page has scrolled, so subtract that amount from the Y coordinate.
        modalPopupExtender.set_Y(mpeY - WebForm_GetScrollY());
    }
    else {
        modalPopupExtender.set_Y(mpeY);
    }

    //Give the modal div the specified CSS class
    modalParentDiv.className = modalDivCSSClass;
}


//If necessary, resize the modal to fit in the current window.  Mainly intended for smaller screens on mobile devices.  Saves the current values so they can be reverted when window is enlarged.
//Returns true/false whether the modal was actually adjusted at all.
function fitModalToWindow() {
    var fitToWindow = false;

    var currentModal = getCurrentModal();
    if (currentModal != null) {

        var parentDiv = $("#modalParentDiv");
        var contentDiv = $("#modalContentDiv");

         //If small screen (phone)...
        if ($(window).width() <= _maxPhoneWidth || $(window).height() <= _maxPhoneWidth) {
            fitModalToPhoneWindow();
            fitToWindow = true;
        }

        //If modal is too wide, or locked for scrolling and too tall (don't want to affect desktop)...           
        else if ((parentDiv.outerWidth(false) > $(window).width()) || ((currentModal.mpeRepositionMode == 2 || currentModal.mpeRepositionMode == 3) && parentDiv.outerHeight(false) > $(window).height())) {

            fitToWindow = true;

            modalPopupExtender.set_repositionMode(3);   //Lock modal to window; intend to show full-screen

            //Set to top left edge of window
            modalPopupExtender.set_X(0);
            modalPopupExtender.set_Y($(document).scrollTop());

            //Disable scrolling on body, saving original values
            currentModal.calculated.originalBodyOverflowX = $('body').css('overflow-x');
            currentModal.calculated.originalBodyOverflowY = $('body').css('overflow-y');
            $('body').css('overflow-x', 'hidden').css('overflow-y', 'hidden');

            //Adjust iframe size if necessary.  resizeThisIframe() will be disabled in this case so it won't change on its own after this.
            var modalIframe = $get("modalIframe");
            if (modalIframe != undefined) {
                //For iframe modals...

                //Resize to fit window, accounting for border and padding (ignore margins)
                modalIframe.style.width = $(window).width() - (parentDiv.outerWidth(false) - parentDiv.width()) + "px";
                modalIframe.style.height = $(window).height() - (parentDiv.outerHeight(false) - parentDiv.height()) + "px";

                /* It would have been nice to shrink and center this if it was too tall for its content like with content modals.  But resizeThisIframe() is only called on certain events
                that are known to change the document height normally, not on wrapping that may occur because we are now sometimes making the iframe thinner than expected.  We can't
                get the iframe document's size from the parent reliably and the value that resizeThisIframe() saves won't be updated in these cases, so we would unable to adjust the
                iframe.  We don't want to shrink the iframe and introduce scrolling when window space is still available. */
            }
            else {
                //For content modals...

                var parentDivBordersAndPaddingX = parentDiv.outerWidth(false) - parentDiv.width();

                //First shrink any child elements that are too wide to fit.  This will likely be the first main containing div in a content modal that typically controls its width on desktop.
                //Can't do anything if it's not wide enough, though -- widening each element that's too thin would break the layout.
                contentDiv.find(elementsToShrink).each(function () {
                    if (($(this).outerWidth(false) + parentDivBordersAndPaddingX) > $(window).width()) {
                        $(this).data("originalWidth", $(this).width()); //Save original value
                        $(this).css('width', 'auto');
                    }
                });

                ariaHideNonModalContent();
                modalPopupExtender.show();    //Show it early so sizes can be calculated

                //Then if modal is too tall, enable scrolling within content div (iframes will provide their own scroll bar)
                if (parentDiv.outerHeight(false) > $(window).height()) {

                    //Limit content div height to window height minus parent div borders and padding
                    contentDiv.height($(window).height() - (parentDiv.outerHeight(false) - parentDiv.height()));

                    currentModal.calculated.originalContentDivOverflow = contentDiv.css('overflow');   //Save original value
                    contentDiv.css('overflow', 'auto');

                    //If vertical scrolling was enabled, vertical scrollbar appearing inside div may introduce horizontal scrollbar.  If window has enough room to spare, widen the div to eliminate it.
                    var scrollBarWidth = contentDiv.width() - contentDiv.get(0).clientWidth
                    if (scrollBarWidth > 0 && $(window).width() >= contentDiv.width() + scrollBarWidth) {
                        contentDiv.width(contentDiv.width() + scrollBarWidth);
                    }

                    contentDiv.scrollTop(0);    //Reset to top in case same one opened twice
                }

                //If modal is still too short, center it vertically
                if (parentDiv.outerHeight(false) < $(window).height()) {
                    modalPopupExtender.set_Y($(document).scrollTop() + (($(window).height() - parentDiv.outerHeight(false)) / 2));
                }

                //If modal is still too thin, center it horizontally
                if (parentDiv.outerWidth(false) < $(window).width()) {
                    modalPopupExtender.set_X($(document).scrollLeft() + (($(window).width() - parentDiv.outerWidth(false)) / 2));
                }
            }
        }
    }

    return fitToWindow;
}

//Resize the modal to fit in a phone window. 
function fitModalToPhoneWindow() {

    var currentModal = getCurrentModal();
    if (currentModal != null) {

        var parentDiv = $("#modalParentDiv");
        var contentDiv = $("#modalContentDiv");

        modalPopupExtender.set_repositionMode(0);   //No auto-repositioning

        parentDiv.css('position', 'fixed').css('height', '100vh').css('width', '100vw').css('top', '0px');

        //Disable scrolling on body, saving original values
        currentModal.calculated.originalBodyOverflowX = $('body').css('overflow-x');
        currentModal.calculated.originalBodyOverflowY = $('body').css('overflow-y');
        $('body').css('overflow-x', 'hidden').css('overflow-y', 'hidden');
        
        //Use position fixed trick or iOS still won't disable scrolling body in all cases.  Save and scroll back to previous position.
        currentModal.calculated.originalBodyScrollY = $(document).scrollTop();
        $('body').addClass('fullscreen-modal-open');
        $('body').css('top', currentModal.calculated.originalBodyScrollY * -1); //Pull body up so it looks like scroll hasn't changed

        //Adjust iframe size if necessary.  resizeThisIframe() will be disabled in this case so it won't change on its own after this.
        var modalIframe = $get("modalIframe");
        if (modalIframe != undefined) {
            //For iframe modals...

            modalPopupExtender.show();    //Show it early so sizes can be calculated
            parentDiv.css('position', 'fixed').css('top', '0px');  //Re-apply after extender makes it absolute
            resizeModalScrollableZone();
        }
        else {
            //For content modals...

            var parentDivBordersAndPaddingX = parentDiv.outerWidth(false) - parentDiv.width();

            //First shrink any child elements that are too wide to fit.  This will likely be the first main containing div in a content modal that typically controls its width on desktop.
            //Can't do anything if it's not wide enough, though -- widening each element that's too thin would break the layout.
            contentDiv.find(elementsToShrink).each(function () {
                if (($(this).outerWidth(false) + parentDivBordersAndPaddingX) > $(window).width()) {
                    $(this).data("originalWidth", $(this).width()); //Save original value
                    $(this).css('width', 'auto');
                }
            });

            modalPopupExtender.show();    //Show it early so sizes can be calculated
            parentDiv.css('position', 'fixed').css('top', '0px');  //Re-apply after extender makes it absolute
            resizeModalScrollableZone();

            contentDiv.scrollTop(0);    //Reset to top in case same one opened twice

            currentModal.calculated.originalContentDivOverflow = contentDiv.css('overflow');   //Save original value
            contentDiv.css('overflow', 'auto');
        }
    }

    return true;
}

//If modal had been fit to window, revert it to original size and settings.
//Called when closing a modal or resizing the window.  If it wasn't, closing and re-opening a content modal would not re-trigger the shrinking logic, which would be a problem for things like body overflow
//changes that need to be activated every time a shrunken modal opens.  This also allows shrunken modals to revert to original size when the window gets bigger (or wider on a rotate).
function revertModalSize() {

    var currentModal = getCurrentModal();
    if (currentModal != null && currentModal.calculated.fitToWindow == true) {

        var contentDiv = $("#modalContentDiv");

        //Revert modal popup extender to originally specified values    
        modalPopupExtender.set_repositionMode(currentModal.mpeRepositionMode);
        modalPopupExtender.set_X(currentModal.mpeX);
        modalPopupExtender.set_Y(currentModal.mpeY);

        //Revert body overflow back to original value for scrolling and restore position
        $('body').css('overflow-x', currentModal.calculated.originalBodyOverflowX);
        $('body').css('overflow-y', currentModal.calculated.originalBodyOverflowY);
        $('body').removeClass('fullscreen-modal-open');
        $('body').css('top', 'auto');
        if (currentModal.calculated.originalBodyScrollY != null) {
            $([document.documentElement, document.body]).scrollTop(currentModal.calculated.originalBodyScrollY);
        }

        var modalIframe = $get("modalIframe");
        if (modalIframe != undefined) {

            //Revert iframe width back to originally specified value
            modalIframe.style.width = currentModal.iframeWidth + "px";

            //Set iframe height to size of its document (saved for us by resizeThisIframe(), even if it doesn't actually modify the iframe).
            modalIframe.style.height = currentModal.calculated.currentIframeHeight + "px";
        }
        else {
            //For content modals...

            //Revert div back to auto height (no more scrolling)
            contentDiv.css('height', 'auto');

            //Revert div overflow to original value
            contentDiv.css('overflow', currentModal.calculated.originalContentDivOverflow);

            //Content div may have been widened to avoid horizontal scrollbar; revert to auto width
            contentDiv.css('width', 'auto');

            //Change any child elements that had width modified back to original values
            contentDiv.find(elementsToShrink).each(function () {
                if (typeof $(this).data("originalWidth") != 'undefined') {
                    $(this).css('width', $(this).data("originalWidth"));
                }
            });
        }
    }
}

//If a modal is open, reset it and resize it to fit window
function resizeCurrentModal() {
    var currentModal = getCurrentModal();
    if (currentModal != null) {

        //If necessary, revert it to original size before checking if it needs to be fit to window again.  This way it can revert to original settings when the window is made wider.
        if (currentModal.calculated.fitToWindow == true) {
            revertModalSize();
        }

        currentModal.calculated.fitToWindow = fitModalToWindow();
    }
}

function resizeModalScrollableZone() {
    var currentModal = getCurrentModal();
    var parentDiv = $("#modalParentDiv");
    var contentDiv = $("#modalContentDiv");
    var iframeDiv = $("#modalIframeDiv");

    if (currentModal != null) {
        var newHeight = window.innerHeight - (parentDiv.outerHeight(false) - parentDiv.height()) - $('#mainModalCloseButton').outerHeight(true);    //Window height minus parent div borders and padding, and close button

        if (currentModal.iframeURL != '') {
            var modalIframe = $get("modalIframe");

            modalIframe.style.width = $(window).width() - (parentDiv.outerWidth(false) - parentDiv.width()) + "px"; //Unlike divs, iframe width needs to be changed manually (e.g. phone rotation)
            modalIframe.style.height = "100%";
            
            iframeDiv.height(newHeight);   //Height needs to be set on surrounding element, not iframe, or iOS won't scroll it
        }
        else {
            contentDiv.height(newHeight);
        }
    }
}

$(window).resize(function () {
    //If small screen (phone)...
    if ($(window).width() <= _maxPhoneWidth || $(window).height() <= _maxPhoneWidth) {
        resizeModalScrollableZone();
    }
    else {
        resizeCurrentModal();
    }
});

/* Create or find an iframe based on the parameters and add it to the modal */
function loadIframe(iframeURL, iframeWidth, iframeHeight, iframeURL2, modalTitle) {
    if (modalTitle == undefined) modalTitle = ""; 
    var thisIframe;
    var savedIframe = $get("modalIframe" + modalStack.count);

    if (savedIframe != undefined) {
        //If we have this iframe saved, redisplay it
        savedIframe.id = "modalIframe";   //Change ID back to standard so it can always be found inside the modal
        savedIframe.style.display = "block";
    }
    else {
        //If we don't have this iframe saved, create it
        thisIframe = document.createElement("iframe")
        thisIframe.id = "modalIframe";
        thisIframe.marginHeight = "0px";
        thisIframe.marginWidth = "0px";
        thisIframe.frameBorder = "0";
        thisIframe.scrolling = "auto";
        thisIframe.src = "javascript:;";
        thisIframe.setAttribute("tabindex", "-1");
        thisIframe.setAttribute("title", modalTitle);


        //Set the iframe's dimensions, if specified
        if (iframeWidth != -1) {
            thisIframe.style.width = iframeWidth + "px";
        }
        if (iframeHeight != -1) {
            thisIframe.style.height = iframeHeight + "px";
        }

        //Add the iframe to the modal div
        modalIframeDiv.appendChild(thisIframe);

        //Set the page as secure connection for redirect
        var ifrm = $get("modalIframe");
        if (iframeURL.indexOf("?") > 0) {
            iframeURL = iframeURL + "&rsl=" + pagesslenabled;
        }
        else {
            iframeURL = iframeURL + "?rsl=" + pagesslenabled;
        }

        //Find the iframe we just added and set its source (done AFTER adding iframe to page to avoid IE6 display bugs with dynamically loaded iframes)
        if (iframeURL2 != null) {
            $get("modalIframe").src = iframeURL2;
        }
        else {
            $get("modalIframe").src = iframeURL;
        }
    }
}

// DEPRECATED
/* Create or find an iframe with close based on the parameters and add it to the modal */
function loadIframewithclose(iframeURL, iframeWidth, iframeHeight, closecaption, closeimgurl, CloseRedirectURL) {

    modelTable = document.createElement('table');
    modelTable.id = 'modalIframe'; //'modelTableIframe';   
    modelTable.cellSpacing = '0px';
    modelTable.cellPadding = '0px';
    rows1 = modelTable.insertRow(-1);
    cells1 = rows1.insertCell(-1);
    cells1.id = 'cells1';
    modelInnerTable1 = document.createElement('table');
    modelInnerTable1.id = 'modelInnerTable1Iframe';
    modelInnerTable1.cellSpacing = '0px';
    modelInnerTable1.cellPadding = '0px';
    modelInnerTable1.style.width = "100%";
    cells1.appendChild(modelInnerTable1);
    modelInnerTable1rows = modelInnerTable1.insertRow(-1);
    modelInnerTable1cells1 = modelInnerTable1rows.insertCell(-1);
    modelInnerTable1cells1.style.width = "84%";
    modelInnerTable1cells2 = modelInnerTable1rows.insertCell(-1);


    createCloseDiv = document.createElement('div');
    createCloseDiv.id = 'close_Div';
    createCloseDiv.style.textAlign = "right";
    createCloseCaption = document.createElement('a');
    createCloseCaption.href = "javascript:;";
    createCloseCaption.onclick = function () {
        if (typeof CloseRedirectURL != "undefined" && CloseRedirectURL != null)
            parent.window.location.href = encodeURI(CloseRedirectURL);
        else
            parent.hideModal();
    }
    createCloseCaption.innerHTML = closecaption;
    createCloseDiv.appendChild(createCloseCaption);

    createCloseCaptionImg = document.createElement('a');

    createImg = document.createElement('img');
    createImg.style.width = "16%";
    createImg.style.height = "16%";
    createImg.style.border = "0px";
    createImg.className = "alignMiddle";
    createImg.alt = "";
    createImg.src = closeimgurl;
    createImg.onclick = function () {
        if (typeof CloseRedirectURL != "undefined" && CloseRedirectURL != null)

        { parent.window.location.href = CloseRedirectURL; }

        else
            parent.hideModal();
    }
    createCloseCaptionImg.appendChild(createImg);
    createCloseDiv.appendChild(createCloseCaptionImg);

    modelInnerTable1cells2.appendChild(createCloseDiv);


    rows2 = modelTable.insertRow(-1);
    cells2 = rows2.insertCell(-1);
    cells2.id = 'cells2';

    createIframe = document.createElement('iframe');
    createIframe.id = 'newIframe';
    createIframe.scrolling = "auto";
    createIframe.marginheight = "0px";
    createIframe.marginwidth = "0px";
    createIframe.setAttribute("frameBorder", 0);
    createIframe.setAttribute("title", "");
    createIframe.onload = function () {
        this.focus();
    };
    createIframe.src = "javascript:;"
    createIframe.style.height = iframeHeight + "px";
    createIframe.style.width = iframeWidth + "px";
    cells2.appendChild(createIframe)
    modalIframeDiv.appendChild(modelTable);

    var ifrm = $get("newIframe");
    if (iframeURL.indexOf("?") > 0) {
        iframeURL = iframeURL + "&rsl=" + pagesslenabled;
    }
    else {
        iframeURL = iframeURL + "?rsl=" + pagesslenabled;
    }
    ifrm.src = iframeURL;
}

function FindWinScrX() {
    return self.pageXOffset ? self.pageXOffset : document.documentElement && document.documentElement.scrollLeft ? document.documentElement.scrollLeft : document.body ? document.body.scrollLeft : 0;
}

function FindWinScrY() {
    return self.pageYOffset ? self.pageYOffset : document.documentElement && document.documentElement.scrollTop ? document.documentElement.scrollTop : document.body ? document.body.scrollTop : 0;
}

function framewindowload(ifrm) {

    var winheight = FindWinH();
    var winwidth = FindWinW();
    var WinScrY = FindWinScrY();
    var WinScrX = FindWinScrX();

    var iBottom = FindWinScrY() + FindWinH();
    var iLeft = FindWinScrX() + FindWinW();

    if (ifrm.contentWindow.document.body.scrollHeight > winheight) {
        ifrm.style.height = winheight - 60 + "px";
        modalParentDiv.style.top = ysDiv + 'px';
    }
    else {
        ifrm.style.height = ifrm.contentWindow.document.body.scrollHeight + "px";
        var h = ifrm.contentWindow.document.body.scrollHeight;
        var winchildheight = parseInt((winheight - h) / 2);
        modalParentDiv.style.top = FindWinScrY() + winchildheight + "px";
    }

    if (ifrm.contentWindow.document.body.scrollWidth > winwidth) {
        ifrm.style.width = winwidth - 20 + "px";
        modalParentDiv.style.left = xsDiv + 'px';
    }
    else {
        var w = ifrm.contentWindow.document.body.scrollWidth;
        var winchildwidth = parseInt((winwidth - w) / 2);
        modalParentDiv.style.top = winchildwidth + "px";
    }
    // modalParentDiv.style.position="fixed";
}


var locationrefresh = 0;

function FindWinW() {
    return self.innerWidth ? self.innerWidth : document.documentElement && document.documentElement.clientWidth ? document.documentElement.clientWidth : document.body ? document.body.clientWidth : 0;
}

function FindWinH() {
    return self.innerHeight ? self.innerHeight : document.documentElement && document.documentElement.clientHeight ? document.documentElement.clientHeight : document.body ? document.body.clientHeight : 0;
}

function FindWinScrX() {
    return self.pageXOffset ? self.pageXOffset : document.documentElement && document.documentElement.scrollLeft ? document.documentElement.scrollLeft : document.body ? document.body.scrollLeft : 0;
}

function FindWinScrY() {
    return self.pageYOffset ? self.pageYOffset : document.documentElement && document.documentElement.scrollTop ? document.documentElement.scrollTop : document.body ? document.body.scrollTop : 0;
}


/* Move the content from the specified child div into the modal div */
function loadContent(childDivID) {
    var childDiv = $get(childDivID);
    var isUsingIFrame = false;
    if (childDiv == undefined) {
        //If specified child div wasn't found on parent page, look for it inside each iframe page
        var frames = window.frames;
        for (var i = 0; i < frames.length; i++) {
            try { childDiv = frames[i].document.getElementById(childDivID); }
            catch (err) {
                //Handle access denied from analytic frames
            }
            if (childDiv != undefined) {
                isUsingIFrame = true;
                break;
            }
        }
    }

    if ((navigator.appName == "Netscape" || !enableModalLegacyScript) && !isUsingIFrame) {
        var childDivContents = childDiv.removeChild(childDiv.getElementsByTagName('DIV')[0]);
        modalContentDiv.appendChild(childDivContents);

    }
    else {
        //Need to use innerHTML instead of the DOM for IE because otherwise IE doesn't maintain radio button selections 
        //IE will not allow you to copy nodes across DOM objects when using IFrames.
        if (childDiv != null) {
            var childDivContents = childDiv.innerHTML;
            childDiv.innerHTML = "";
            modalContentDiv.innerHTML = childDivContents;
        }
    }


}

/* Save the current modal's content, either back to its original location (content modals) or to the iframe holding area (iframe modals) */
function saveModalContent(currentModal) {
    var isUsingIFrame = false;
    if (currentModal.iframeURL != '') {
        //It's an iframe modal; hide the currently displaying iframe
        var thisIframe = $get("modalIframe");
        if (thisIframe != null) {
            thisIframe.style.display = "none";
            thisIframe.id = "modalIframe" + (modalStack.count - 1);   //Change ID so they're numbered according to the modal stack count
        }
    }
    else {
        //It's a content modal; save the current content back to its original location
        var originDiv = $get(currentModal.childDivID);
        if (originDiv == undefined) {
            //If specified origin div wasn't found on parent page, look for it inside each iframe page
            var frames = window.frames;
            for (var i = 0; i < frames.length; i++) {
                try { originDiv = frames[i].document.getElementById(currentModal.childDivID); }
                catch (err) {
                    //Handle access denied from analytic frames
                }
                if (originDiv != undefined) {
                    isUsingIFrame = true;
                    break;
                }
            }
        }
        if (originDiv != null) {
            if ((navigator.appName == "Netscape" || !enableModalLegacyScript) && !isUsingIFrame) {
                var childDivContents = modalContentDiv.removeChild(modalContentDiv.getElementsByTagName('DIV')[0]);
                originDiv.appendChild(childDivContents);
            }
            else {
                //Need to use innerHTML instead of the DOM for IE because otherwise IE doesn't maintain radio button selections
                //IE will not allow you to copy nodes across DOM objects when using IFrames.
                var childDivContents = modalContentDiv.innerHTML;
                modalContentDiv.innerHTML = "";
                originDiv.innerHTML = childDivContents;
            }
        }
    }
}

/* Hides the currently displaying modal popup box */
function hideModal() {

    if (modalPopupExtender == null) return;

    ariaShowNonModalContent();

    if (modalStack.count == 1) {
        //If last modal, change focus AFTER re-enabling content but BEFORE hiding modal so focus never resets to top of page
        var prevElement = previouslyFocusedElements.pop();
        SetVoiceOverFocus(prevElement[0]);
    }

    //Hide the modal popup
    modalPopupExtender.hide();

    revertModalSize();

    //Remove and get a reference to the current modal from the stack
    var currentModal = modalStack.popModal();

    if (currentModal.iframeURL != '') {
        //It's an iframe modal; clear the current iframe from the modal
        if ($get("modalIframe") != null) {

            // AV Start: To avoid freezing of textboxes on closing the modal pop-up in IE10 and IE11. This will not inject any issue on other browsers.
            if (modalStack.count == 0) {
                if ($(modalIframeDiv).find('iframe') != null) {
                    $(modalIframeDiv).find('iframe').attr('src', 'about:blank');
                }
            }
            // AV End

            modalIframeDiv.removeChild($get("modalIframe"));

            if (locationrefresh) {
                locationrefresh = 0;

                //Refresh page, removing the experience from the query string
                var refreshQS = window.location.search.replace(/&?exp=[^&]+/i, "");
                var refreshURL = encodeURI(window.location.protocol + "//" + window.location.hostname + window.location.pathname + refreshQS);
                window.location.replace(refreshURL);
            }
        }
    }
    else {
        //It's a content modal; save the contents so it remains the same when reopening
        saveModalContent(currentModal);
    }

    //Reshow the previous modal, if there was one
    if (modalStack.count > 0) {
        reshowModal();
        try {
            //AFTER reshowing so previous modal is visible.  
            var prevElement = previouslyFocusedElements.pop();
            SetVoiceOverFocus(prevElement[0]);
        }
        catch (ex) {
            //Focus code can cause permissions error in IE if previous iframe modal has been posted back since opening current one (e.g. hotel profile select button). Ignore.
        }
    }
}

/* Automatically hides all modals in the current modal stack. */
function hideAllModals() {
    while (modalStack.count > 0) {
        hideModal();
    }
}

/* Handles refreshing of parent page. */
function refreshParentPage() {
    if (locationrefresh) {
        locationrefresh = 0;

        //Refresh page, removing the experience from the query string
        var refreshQS = window.location.search.replace(/&?exp=[^&]+/i, "");
        var refreshQS = window.location.search.replace(/&?acr=[^&]+/i, "");
        var refreshURL = encodeURI(window.location.protocol + "//" + window.location.hostname + window.location.pathname + refreshQS);
        window.location.replace(refreshURL);
    }
}

/*
When called from a page that is inside an iframe modal, this will calculate the correct Y position at which
to place a new modal inside the current page (resulting in a nested modal within a modal).  The position will
be as close to the top of the overall viewport as possible, depending on where the first iframe modal is currently
located within the viewport.  Any specified padding value will be added to the Y position.
*/
function determineModalInModalStartingYPosition(padding) {
    var iframeTop = parent.$("#modalIframe").offset().top;
    var parentScrollY = parent.WebForm_GetScrollY();
    var placeToStart = parentScrollY - iframeTop;

    if (placeToStart < 0) {
        placeToStart = 0;
    }

    if (padding != null && padding > 0) {
        placeToStart = placeToStart + padding;
    }

    return placeToStart;
}

//Accessibility
$(document).ready(function () {
    $('#modalParentDiv').keydown(function (event) {
        trapTabKey3($(this), event);
    });
    $(document).keyup(function (e) {
        if (e.which == 27) {    //Esc
            var currentModal = getCurrentModal();
            if (currentModal != null && typeof (hideModal) === 'function' && (typeof (DisableModalClose) == 'undefined' || DisableModalClose != true)) {
                
                if (runModalBeforeClose() == true) {
                    hideModal();
                }
            }
        }
    });
});

//For modal iframes
function trapEscapeKey(obj, evt) {
    if (evt.which == 27) {
        if (typeof (parent.hideModal) === 'function' && (typeof (parent.DisableModalClose) == 'undefined' || parent.DisableModalClose != true)) {

            if (runModalBeforeClose() == true) {
                parent.hideModal();
            }
        }
    }
}

//Run specified function before closing.  Returns whether close should occur.
function runModalBeforeClose() {
    var allowClose = true;
    var currentModal = getCurrentModal();

    if (typeof (currentModal.beforeClose) !== 'undefined') {

        var beforeCloseFunction;
        if (currentModal.iframeURL != '') {
            beforeCloseFunction = $("#modalIframe")[0].contentWindow[currentModal.beforeClose];
        }
        else {
            beforeCloseFunction = window[currentModal.beforeClose];
        }

        if (typeof (beforeCloseFunction) == 'function') {
            if (beforeCloseFunction() == false) {
                allowClose = false;
            }
        }
    }

    return allowClose;
}

//v2 legacy support
function trapTabKey(obj, evt) {
    if (evt.which == 9) {   //Tab or Shift-Tab
        trapTabKeyContent(obj, evt)
    }
}

function trapTabKey3(obj, evt) {

    if (evt.which == 9) {   //Tab or Shift-Tab

        var currentModal = getCurrentModal();
        if (currentModal.iframeURL != "" && $("#modalIframe")[0].contentWindow != undefined) {  //Null check in case showModalWithClose co-opts "modalIframe" ID
            trapTabKeyIframe(obj, evt);
        }
        else {
            trapTabKeyContent(obj, evt);
        }
    }
}

//For external form post
function trapTabKeyFakeModal(obj, evt) {
    if (evt.which == 9) {
        trapTabKeyContent(obj, evt);
    }
}

function trapTabKeyContent(obj, evt) {
    var tabbableItems = $(obj).find(":tabbable");
    var focusedItem = $(document.activeElement);
    var numberOfTabbableItems = tabbableItems.length;
    var focusedItemIndex = tabbableItems.index(focusedItem);

    //if there's only one tabbable item always focus on it
    if (numberOfTabbableItems == 1) {
        tabbableItems.get(0).focus();
        evt.preventDefault();
    }
    else {
        if (evt.shiftKey) {
            //Shift-tab on first item wraps to last
            if (focusedItemIndex == 0) {
                tabbableItems.get(numberOfTabbableItems - 1).focus();
                evt.preventDefault();
            }
        }
        else {
            //Tab on last item wraps to first
            if (focusedItemIndex == numberOfTabbableItems - 1) {
                tabbableItems.get(0).focus();
                evt.preventDefault();
            }
        }
    }
}

//For use with single close button outside of iframe
function trapTabKeyIframe(obj, evt) {
    var tabbableItems = $("#modalIframe").contents().find(":tabbable");
    var focusedItem = $($("#modalIframe")[0].contentWindow.document.activeElement);
    var numberOfTabbableItems = tabbableItems.length;
    var focusedItemIndex = tabbableItems.index(focusedItem);

    if (evt.shiftKey) {
        if ($("#mainModalCloseButton").is(":focus") == true) {
            //Shift-tab on close button goes to last item, if there are any
            if (numberOfTabbableItems > 0) {
                tabbableItems.get(numberOfTabbableItems - 1).focus();
            }
            evt.preventDefault();
        }
        else {
            //Shift-tab on first item goes to close button if there
            if (focusedItemIndex == 0) {
                if ($("#mainModalCloseButton").is(":visible")) {
                    $("#mainModalCloseButton").focus();
                }
                else {
                    tabbableItems.get(numberOfTabbableItems - 1).focus();
                }
                evt.preventDefault();
            }
        }
    }
    else {
        if ($("#mainModalCloseButton").is(":focus") == true) {
            //Tab on close button goes to first item, or nowhere if no items
            if (numberOfTabbableItems > 0) {
                tabbableItems.get(0).focus();
            }
            evt.preventDefault();
        }
        else {
            //Tab on last item wraps to close button if there
            if (focusedItemIndex == numberOfTabbableItems - 1) {
                if ($("#mainModalCloseButton").is(":visible")) {
                    $("#mainModalCloseButton").focus();
                }
                else {
                    tabbableItems.get(0).focus();
                }
                evt.preventDefault();
            }
        }
    }
}
            
function setModalFocus(selector) {
    setTimeout(function () {
        var closeButton = $("#mainModalCloseButton");
        if (closeButton.length > 0 && closeButton.is(":visible")) {
            SetVoiceOverFocus(closeButton[0]);
        }
        else {
            SetVoiceOverFocus($("#modalDocumentDiv")[0]);
        } 
    }, 50); //Chrome sometimes failed to set focus even with 1 ms timeout
}

function setModalFocusIframe() {
    $("#modalIframe").on('load', function () {
        if ($("#modalIframe").length > 0) { //Cover IE raising load event after iframe destroyed
            setTimeout(function () {
                SetVoiceOverFocus($('#mainModalCloseButton')[0]);
            }, 50); //Chrome sometimes failed to set focus even with 1 ms timeout
        }
    });
}

function ariaHideNonModalContent() {
    $("#siteContainer").attr("aria-hidden", "true");
    $(".SKIP-WRAP").attr("aria-hidden", "true");
    $(".HEADER-WRAP").attr("aria-hidden", "true");
    $(".FOOTER-WRAP").attr("aria-hidden", "true");
}

function ariaShowNonModalContent() {
    $("#siteContainer").attr("aria-hidden", "false");
    $(".SKIP-WRAP").attr("aria-hidden", "false");
    $(".HEADER-WRAP").attr("aria-hidden", "false");
    $(".FOOTER-WRAP").attr("aria-hidden", "false");
}

function EnableDisableModalClose(disableClose) {
    if (disableClose == true) {
        DisableModalClose = true;   //Used by trapEscapeKey()
        $("#modalParentDiv").attr('aria-describedby', ''); //Remove close key message
        $("#mainModalCloseArea").hide();
    }
    else {
        DisableModalClose = false;
        $("#modalParentDiv").attr('aria-describedby', 'modalDescription');
        $("#mainModalCloseArea").show();
    }
}

//Scroll to given input's label within a content modal's scrolling zone
function ScrollToContentModalInput(inputId) {
    if ($(window).width() <= _maxPhoneWidth || $(window).height() <= _maxPhoneWidth) {
        var parent = $("#modalContentDiv");
        var inputLabel = $("label[for='" + inputId + "']");
        parent.scrollTop(parent.scrollTop() + (inputLabel.offset().top - parent.offset().top));
    }
}

//Used instead of just .focus() to work around iOS VoiceOver bugs where it won't shift VoiceOver cursor even though standard cursor has moved, or shifts VoiceOver cursor to random places
function SetVoiceOverFocus(element) {
    var focusInterval = 500;
    var focusTotalRepetitions = 5;  //Seems to be enough time to catch VoiceOver issues without resetting user's place if they start reading
    var startingScrollY = parent.WebForm_GetScrollY();

    element.blur();
    element.focus();

    var focusRepetitions = 0;
    var interval = window.setInterval(function () {

        var currentScrollY = parent.WebForm_GetScrollY();

        //As long as focus hasn't moved somewhere else (doesn't catch in VoiceOver because activeElement doesn't change when reading) and user hasn't scrolled away...
        if (document.activeElement == element && currentScrollY == startingScrollY) {
            //Try setting it again to correct VoiceOver
            element.blur();
            element.focus();
        }
        else {
            window.clearInterval(interval);
        }

        focusRepetitions++;
        if (focusRepetitions >= focusTotalRepetitions) {
            window.clearInterval(interval);
        }
    }, focusInterval);
}


//Prototype the ModalStack class and functions
ModalStack.prototype.pushModal = pushModal;
ModalStack.prototype.popModal = popModal;
ModalStack.prototype.getTopModal = getTopModal;
function ModalStack() {
    this.stack = new Array();
    this.count = 0;
}
function pushModal(modal) {
    this.count = this.count + 1;
    this.stack.push(modal);
}
function popModal() {
    if (this.count <= 0) {
        return "Error: empty stack"
    }
    else {
        this.count = this.count - 1;
        return this.stack.pop();
    }
}
//Get top modal for inspection, without popping it off the stack
function getTopModal() {
    if (this.count <= 0) {
        return null;
    }
    else {
        return this.stack[this.count - 1];
    }
}

//Prototype the Modal class
function Modal(childDivID, modalDivCSSClass, mpeRepositionMode, mpeX, mpeY, iframeURL, iframeWidth, iframeHeight, iframeTitle, disableClose, beforeClose) {
    this.childDivID = childDivID;
    this.modalDivCSSClass = modalDivCSSClass;
    this.mpeRepositionMode = mpeRepositionMode;
    this.mpeX = mpeX;
    this.mpeY = mpeY;
    this.iframeURL = iframeURL;
    this.iframeWidth = iframeWidth;
    this.iframeHeight = iframeHeight;
    this.calculated = new CalculatedModalProperties();
    this.title = iframeTitle;
    this.disableClose = disableClose;
    this.beforeClose = beforeClose;
}

function CalculatedModalProperties() {
    this.fitToWindow = false; //Whether this modal was resized to fit the current window when loaded
    this.originalContentDivOverflow = null;
    this.originalBodyOverflowX = null;
    this.originalBodyOverflowY = null;
    this.originalBodyScrollY = null;
    this.currentIframeHeight = null;
}

//Instantiate a modal stack for this page
var modalStack = new ModalStack();

function getCurrentModal() {
    var currentModal;
    if (typeof modalStack != 'undefined' && modalStack != null) {
        currentModal = modalStack.getTopModal();
    }
    return currentModal;
}

var _fixWebkitScrollLastY = 0; // Needed in order to determine direction of scroll.
//Fix bug where scrolling zone freezes randomly on iOS Safari
function FixWebkitScrollFreeze(areaId) {
    $('#' + areaId).on('touchstart', function (event) {
        _fixWebkitScrollLastY = event.originalEvent.touches[0].clientY;
    });

    $('#' + areaId).on('touchmove', function (event) {
        var top = event.originalEvent.touches[0].clientY;

        //Determine scroll position and direction.
        var scrollTop = $(event.currentTarget).scrollTop();
        var direction = (_fixWebkitScrollLastY - top) < 0 ? "up" : "down";

        if (scrollTop == 0 && direction == "up") {
            //Prevent scrolling up when already at top as this introduces a freeze.
            event.preventDefault();
        } else if (scrollTop >= (event.currentTarget.scrollHeight - $(event.currentTarget).outerHeight()) && direction == "down") {
            //Prevent scrolling down when already at bottom as this also introduces a freeze.
            event.preventDefault();
        }
        _fixWebkitScrollLastY = top;
    });
}

$(document).ready(function () {
    FixWebkitScrollFreeze("modalContentDiv");
    FixWebkitScrollFreeze("modalIframeDiv");
});
//END Trisept.UI.Web.Shell.modalFunctionsResponsive.js
//START Trisept.UI.Web.Shell.jquery.ui.tooltip.extension.js
//Works around NVDA issue where it sometimes reads tooltips twice (once when tabbing to trigger and once when tabbing away).
function CreateTooltip(triggerId, contentId) {
    $("#" + triggerId).tooltip({
        content: $("#" + contentId).html(),
        close: function () {
            $("#" + triggerId).tooltip('destroy').attr("title", "");
            CreateTooltip(triggerId, contentId);
        }
    });
}
//END Trisept.UI.Web.Shell.jquery.ui.tooltip.extension.js
//START Trisept.UI.Web.Shell.sysend.js
/**@license
*  sysend.js - send messages between browser windows/tabs version 1.3.3
*
*  Copyright (C) 2014-2018 Jakub Jankiewicz <http://jcubic.pl/me>
*  Released under the MIT license
*
*  The idea for localStorage implementation came from this StackOverflow question:
*  http://stackoverflow.com/q/24182409/387194
*
*/
/* global define, module, exports, localStorage, setTimeout */
(function (root, factory) {
    if (typeof define === 'function' && define.amd) {
        define(['sysend'], factory);
    } else if (typeof exports === 'object') {
        module.exports = factory();
    } else {
        root.sysend = factory();
    }
})(typeof window !== "undefined" ? window : this, function () {
    // we use prefix so `foo' event don't collide with `foo' locaStorage value
    var uniq_prefix = '___sysend___';
    var random_value = Math.random();
    // we use id because storage event is not executed if message was not
    // changed, and we want it if user send same object twice (before it will
    // be removed)
    var id = 0;
    // we need to clean up localStorage if broadcast on unload
    // because setTimeout will never fire, even setTimeout 0
    var re = new RegExp('^' + uniq_prefix);
    for (var key in localStorage) {
        if (key.match(re)) {
            localStorage.removeItem(key);
        }
    }
    function get(key) {
        return localStorage.getItem(uniq_prefix + key);
    }
    function set(key, value) {
        // storage event is not fired when value is set first time
        if (id == 0) {
            localStorage.setItem(uniq_prefix + key, random_value);
        }
        localStorage.setItem(uniq_prefix + key, value);
    }
    function remove(key) {
        localStorage.removeItem(uniq_prefix + key);
    }
    function to_json(input) {
        // save random_value in storage to fix issue in IE that storage event
        // is fired on same page where setItem was called
        var obj = [id++, random_value];
        // undefined in array get stringified as null
        if (typeof input != 'undefined') {
            obj.push(input);
        }
        return JSON.stringify(obj);
    }
    function from_json(json) {
        return JSON.parse(json);
    }
    var host = (function () {
        var a = document.createElement('a');
        return function (url) {
            a.href = url;
            return a.host;
        };
    })();
    function send_to_iframes(key, data) {
        // propagate events to iframes
        iframes.forEach(function (iframe) {
            var payload = {
                name: uniq_prefix,
                key: key,
                data: data
            };
            iframe.window.postMessage(JSON.stringify(payload), "*");
        });
    }
    // object with user events as keys and values arrays of callback functions
    var callbacks = {};
    var iframes = [];
    var index = 0;
    var channel;
    if (typeof window.BroadcastChannel === 'function') {
        channel = new window.BroadcastChannel(uniq_prefix);
        channel.addEventListener('message', function (event) {
            if (event.target.name === uniq_prefix) {
                var key = event.data && event.data.name;
                if (callbacks[key]) {
                    callbacks[key].forEach(function (fn) {
                        fn(event.data.data, key);
                    });
                }
            }
        });
    } else {
        window.addEventListener('storage', function (e) {
            // prevent event to be executed on remove in IE
            if (e.key.match(re) && index++ % 2 === 0) {
                var key = e.key.replace(re, '');
                if (callbacks[key]) {
                    var value = e.newValue || get(key);
                    if (value && value != random_value) {
                        var obj = JSON.parse(value);
                        if (obj && obj[1] != random_value) {
                            // don't call on remove
                            callbacks[key].forEach(function (fn) {
                                fn(obj[2], key);
                            });
                        }
                    }
                }
            }
        }, false);
    }
    // ref: https://stackoverflow.com/a/326076/387194
    function is_iframe() {
        try {
            return window.self !== window.top;
        } catch (e) {
            return true;
        }
    }
    if (is_iframe()) {
        window.addEventListener('message', function (e) {
            var payload = JSON.parse(e.data);
            if (payload.name === uniq_prefix) {
                sysend.broadcast(payload.key, payload.data);
            }
        });
    }
    return {
        broadcast: function (event, message) {
            if (channel) {
                channel.postMessage({ name: event, data: message });
            } else {
                set(event, to_json(message));
                // clean up localstorage
                setTimeout(function () {
                    remove(event);
                }, 0);
            }
            send_to_iframes(event, message);
        },
        proxy: function (url) {
            if (typeof url === 'string' && host(url) !== window.location.host) {
                var iframe = document.createElement('iframe');
                iframe.style.width = iframe.style.height = 0;
                iframe.style.border = 'none';
                var proxy_url = url;
                if (!url.match(/\.html$/)) {
                    proxy_url = url.replace(/\/$/, '') + '/proxy.html';
                }
                iframe.addEventListener('error', function handler() {
                    setTimeout(function () {
                        throw new Error('html proxy file not found on "' + url + '" url');
                    }, 0);
                    iframe.removeEventListener('error', handler);
                });
                iframe.addEventListener('load', function handler() {
                    var win;
                    try {
                        win = iframe.contentWindow;
                    } catch (e) {
                        win = iframe.contentWindow;
                    }
                    iframes.push({ window: win, node: iframe });
                    iframe.removeEventListener('load', handler);
                });
                document.body.appendChild(iframe);
                iframe.src = proxy_url;
            }
        },
        on: function (event, fn) {
            if (!callbacks[event]) {
                callbacks[event] = [];
            }
            callbacks[event].push(fn);
        },
        off: function (event, fn) {
            if (callbacks[event]) {
                if (fn) {
                    for (var i = callbacks[event].length; i--; ) {
                        if (callbacks[event][i] == fn) {
                            callbacks[event].splice(i, 1);
                        }
                    }
                } else {
                    callbacks[event] = [];
                }
            }
        }
    };
});
//END Trisept.UI.Web.Shell.sysend.js
//START Trisept.UI.Web.Shell.roundedCorners.js
function insertRoundedCornerTop(obj) {
    // Create the two div elements needed for the top of the box
    d = createElement("div");
    d.className = "bt"; // The outer div needs a class name
    d2 = createElement("div");
    d.appendChild(d2);
    obj.insertBefore(d, obj.firstChild);
}

function insertRoundedCornerBottom(obj) {
    // Create the two div elements needed for the bottom of the box
    d = createElement("div");
    d.className = "bb"; // The outer div needs a class name
    d2 = createElement("div");
    d.appendChild(d2);
    obj.appendChild(d);
}

function initRoundedCorners() {
    // Find all div elements
    var divs = document.getElementsByTagName('div');
    var cbDivs = [];
    for (var i = 0; i < divs.length; i++) {
        // Find all div elements with cbb in their class attribute while allowing for multiple class names
        if (/\bcbb\b/.test(divs[i].className))
            cbDivs[cbDivs.length] = divs[i];
    }
    // Loop through the found div elements
    var thediv, outer, i1, i2;
    for (var i = 0; i < cbDivs.length; i++) {
        // Save the original outer div for later
        thediv = cbDivs[i];
        // 	Create a new div, give it the original div's class attribute, and replace 'cbb' with 'cb'
        outer = createElement('div');
        outer.className = thediv.className;
        outer.className = thediv.className.replace('cbb', 'cb');
        // Change the original div's class name and replace it with the new div
        thediv.className = 'i3';
        thediv.parentNode.replaceChild(outer, thediv);
        // Create two new div elements and insert them into the outermost div
        i1 = createElement('div');
        i1.className = 'i1';
        outer.appendChild(i1);
        i2 = createElement('div');
        i2.className = 'i2';
        i1.appendChild(i2);
        // Insert the original div
        i2.appendChild(thediv);
        // Insert the top and bottom divs
        insertRoundedCornerTop(outer);
        insertRoundedCornerBottom(outer);
    }
}

if (document.getElementById && document.createTextNode) {
    $(document).ready(function() { initRoundedCorners(); });
}
//END Trisept.UI.Web.Shell.roundedCorners.js
//START Trisept.UI.Web.Shell.jquery.ui-1.12.1.min.js
/*! jQuery UI - v1.12.1 - 2016-09-14
* http://jqueryui.com
* Includes: widget.js, position.js, data.js, disable-selection.js, effect.js, effects/effect-blind.js, effects/effect-bounce.js, effects/effect-clip.js, effects/effect-drop.js, effects/effect-explode.js, effects/effect-fade.js, effects/effect-fold.js, effects/effect-highlight.js, effects/effect-puff.js, effects/effect-pulsate.js, effects/effect-scale.js, effects/effect-shake.js, effects/effect-size.js, effects/effect-slide.js, effects/effect-transfer.js, focusable.js, form-reset-mixin.js, jquery-1-7.js, keycode.js, labels.js, scroll-parent.js, tabbable.js, unique-id.js, widgets/accordion.js, widgets/autocomplete.js, widgets/button.js, widgets/checkboxradio.js, widgets/controlgroup.js, widgets/datepicker.js, widgets/dialog.js, widgets/draggable.js, widgets/droppable.js, widgets/menu.js, widgets/mouse.js, widgets/progressbar.js, widgets/resizable.js, widgets/selectable.js, widgets/selectmenu.js, widgets/slider.js, widgets/sortable.js, widgets/spinner.js, widgets/tabs.js, widgets/tooltip.js
* Copyright jQuery Foundation and other contributors; Licensed MIT */

(function(t){"function"==typeof define&&define.amd?define(["jquery"],t):t(jQuery)})(function(t){function e(t){for(var e=t.css("visibility");"inherit"===e;)t=t.parent(),e=t.css("visibility");return"hidden"!==e}function i(t){for(var e,i;t.length&&t[0]!==document;){if(e=t.css("position"),("absolute"===e||"relative"===e||"fixed"===e)&&(i=parseInt(t.css("zIndex"),10),!isNaN(i)&&0!==i))return i;t=t.parent()}return 0}function s(){this._curInst=null,this._keyEvent=!1,this._disabledInputs=[],this._datepickerShowing=!1,this._inDialog=!1,this._mainDivId="ui-datepicker-div",this._inlineClass="ui-datepicker-inline",this._appendClass="ui-datepicker-append",this._triggerClass="ui-datepicker-trigger",this._dialogClass="ui-datepicker-dialog",this._disableClass="ui-datepicker-disabled",this._unselectableClass="ui-datepicker-unselectable",this._currentClass="ui-datepicker-current-day",this._dayOverClass="ui-datepicker-days-cell-over",this.regional=[],this.regional[""]={closeText:"Done",prevText:"Prev",nextText:"Next",currentText:"Today",monthNames:["January","February","March","April","May","June","July","August","September","October","November","December"],monthNamesShort:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],dayNames:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],dayNamesShort:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],dayNamesMin:["Su","Mo","Tu","We","Th","Fr","Sa"],weekHeader:"Wk",dateFormat:"mm/dd/yy",firstDay:0,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""},this._defaults={showOn:"focus",showAnim:"fadeIn",showOptions:{},defaultDate:null,appendText:"",buttonText:"...",buttonImage:"",buttonImageOnly:!1,hideIfNoPrevNext:!1,navigationAsDateFormat:!1,gotoCurrent:!1,changeMonth:!1,changeYear:!1,yearRange:"c-10:c+10",showOtherMonths:!1,selectOtherMonths:!1,showWeek:!1,calculateWeek:this.iso8601Week,shortYearCutoff:"+10",minDate:null,maxDate:null,duration:"fast",beforeShowDay:null,beforeShow:null,onSelect:null,onChangeMonthYear:null,onClose:null,numberOfMonths:1,showCurrentAtPos:0,stepMonths:1,stepBigMonths:12,altField:"",altFormat:"",constrainInput:!0,showButtonPanel:!1,autoSize:!1,disabled:!1},t.extend(this._defaults,this.regional[""]),this.regional.en=t.extend(!0,{},this.regional[""]),this.regional["en-US"]=t.extend(!0,{},this.regional.en),this.dpDiv=n(t("<div id='"+this._mainDivId+"' class='ui-datepicker ui-widget ui-widget-content ui-helper-clearfix ui-corner-all'></div>"))}function n(e){var i="button, .ui-datepicker-prev, .ui-datepicker-next, .ui-datepicker-calendar td a";return e.on("mouseout",i,function(){t(this).removeClass("ui-state-hover"),-1!==this.className.indexOf("ui-datepicker-prev")&&t(this).removeClass("ui-datepicker-prev-hover"),-1!==this.className.indexOf("ui-datepicker-next")&&t(this).removeClass("ui-datepicker-next-hover")}).on("mouseover",i,o)}function o(){t.datepicker._isDisabledDatepicker(m.inline?m.dpDiv.parent()[0]:m.input[0])||(t(this).parents(".ui-datepicker-calendar").find("a").removeClass("ui-state-hover"),t(this).addClass("ui-state-hover"),-1!==this.className.indexOf("ui-datepicker-prev")&&t(this).addClass("ui-datepicker-prev-hover"),-1!==this.className.indexOf("ui-datepicker-next")&&t(this).addClass("ui-datepicker-next-hover"))}function a(e,i){t.extend(e,i);for(var s in i)null==i[s]&&(e[s]=i[s]);return e}function r(t){return function(){var e=this.element.val();t.apply(this,arguments),this._refresh(),e!==this.element.val()&&this._trigger("change")}}t.ui=t.ui||{},t.ui.version="1.12.1";var h=0,l=Array.prototype.slice;t.cleanData=function(e){return function(i){var s,n,o;for(o=0;null!=(n=i[o]);o++)try{s=t._data(n,"events"),s&&s.remove&&t(n).triggerHandler("remove")}catch(a){}e(i)}}(t.cleanData),t.widget=function(e,i,s){var n,o,a,r={},h=e.split(".")[0];e=e.split(".")[1];var l=h+"-"+e;return s||(s=i,i=t.Widget),t.isArray(s)&&(s=t.extend.apply(null,[{}].concat(s))),t.expr[":"][l.toLowerCase()]=function(e){return!!t.data(e,l)},t[h]=t[h]||{},n=t[h][e],o=t[h][e]=function(t,e){return this._createWidget?(arguments.length&&this._createWidget(t,e),void 0):new o(t,e)},t.extend(o,n,{version:s.version,_proto:t.extend({},s),_childConstructors:[]}),a=new i,a.options=t.widget.extend({},a.options),t.each(s,function(e,s){return t.isFunction(s)?(r[e]=function(){function t(){return i.prototype[e].apply(this,arguments)}function n(t){return i.prototype[e].apply(this,t)}return function(){var e,i=this._super,o=this._superApply;return this._super=t,this._superApply=n,e=s.apply(this,arguments),this._super=i,this._superApply=o,e}}(),void 0):(r[e]=s,void 0)}),o.prototype=t.widget.extend(a,{widgetEventPrefix:n?a.widgetEventPrefix||e:e},r,{constructor:o,namespace:h,widgetName:e,widgetFullName:l}),n?(t.each(n._childConstructors,function(e,i){var s=i.prototype;t.widget(s.namespace+"."+s.widgetName,o,i._proto)}),delete n._childConstructors):i._childConstructors.push(o),t.widget.bridge(e,o),o},t.widget.extend=function(e){for(var i,s,n=l.call(arguments,1),o=0,a=n.length;a>o;o++)for(i in n[o])s=n[o][i],n[o].hasOwnProperty(i)&&void 0!==s&&(e[i]=t.isPlainObject(s)?t.isPlainObject(e[i])?t.widget.extend({},e[i],s):t.widget.extend({},s):s);return e},t.widget.bridge=function(e,i){var s=i.prototype.widgetFullName||e;t.fn[e]=function(n){var o="string"==typeof n,a=l.call(arguments,1),r=this;return o?this.length||"instance"!==n?this.each(function(){var i,o=t.data(this,s);return"instance"===n?(r=o,!1):o?t.isFunction(o[n])&&"_"!==n.charAt(0)?(i=o[n].apply(o,a),i!==o&&void 0!==i?(r=i&&i.jquery?r.pushStack(i.get()):i,!1):void 0):t.error("no such method '"+n+"' for "+e+" widget instance"):t.error("cannot call methods on "+e+" prior to initialization; "+"attempted to call method '"+n+"'")}):r=void 0:(a.length&&(n=t.widget.extend.apply(null,[n].concat(a))),this.each(function(){var e=t.data(this,s);e?(e.option(n||{}),e._init&&e._init()):t.data(this,s,new i(n,this))})),r}},t.Widget=function(){},t.Widget._childConstructors=[],t.Widget.prototype={widgetName:"widget",widgetEventPrefix:"",defaultElement:"<div>",options:{classes:{},disabled:!1,create:null},_createWidget:function(e,i){i=t(i||this.defaultElement||this)[0],this.element=t(i),this.uuid=h++,this.eventNamespace="."+this.widgetName+this.uuid,this.bindings=t(),this.hoverable=t(),this.focusable=t(),this.classesElementLookup={},i!==this&&(t.data(i,this.widgetFullName,this),this._on(!0,this.element,{remove:function(t){t.target===i&&this.destroy()}}),this.document=t(i.style?i.ownerDocument:i.document||i),this.window=t(this.document[0].defaultView||this.document[0].parentWindow)),this.options=t.widget.extend({},this.options,this._getCreateOptions(),e),this._create(),this.options.disabled&&this._setOptionDisabled(this.options.disabled),this._trigger("create",null,this._getCreateEventData()),this._init()},_getCreateOptions:function(){return{}},_getCreateEventData:t.noop,_create:t.noop,_init:t.noop,destroy:function(){var e=this;this._destroy(),t.each(this.classesElementLookup,function(t,i){e._removeClass(i,t)}),this.element.off(this.eventNamespace).removeData(this.widgetFullName),this.widget().off(this.eventNamespace).removeAttr("aria-disabled"),this.bindings.off(this.eventNamespace)},_destroy:t.noop,widget:function(){return this.element},option:function(e,i){var s,n,o,a=e;if(0===arguments.length)return t.widget.extend({},this.options);if("string"==typeof e)if(a={},s=e.split("."),e=s.shift(),s.length){for(n=a[e]=t.widget.extend({},this.options[e]),o=0;s.length-1>o;o++)n[s[o]]=n[s[o]]||{},n=n[s[o]];if(e=s.pop(),1===arguments.length)return void 0===n[e]?null:n[e];n[e]=i}else{if(1===arguments.length)return void 0===this.options[e]?null:this.options[e];a[e]=i}return this._setOptions(a),this},_setOptions:function(t){var e;for(e in t)this._setOption(e,t[e]);return this},_setOption:function(t,e){return"classes"===t&&this._setOptionClasses(e),this.options[t]=e,"disabled"===t&&this._setOptionDisabled(e),this},_setOptionClasses:function(e){var i,s,n;for(i in e)n=this.classesElementLookup[i],e[i]!==this.options.classes[i]&&n&&n.length&&(s=t(n.get()),this._removeClass(n,i),s.addClass(this._classes({element:s,keys:i,classes:e,add:!0})))},_setOptionDisabled:function(t){this._toggleClass(this.widget(),this.widgetFullName+"-disabled",null,!!t),t&&(this._removeClass(this.hoverable,null,"ui-state-hover"),this._removeClass(this.focusable,null,"ui-state-focus"))},enable:function(){return this._setOptions({disabled:!1})},disable:function(){return this._setOptions({disabled:!0})},_classes:function(e){function i(i,o){var a,r;for(r=0;i.length>r;r++)a=n.classesElementLookup[i[r]]||t(),a=e.add?t(t.unique(a.get().concat(e.element.get()))):t(a.not(e.element).get()),n.classesElementLookup[i[r]]=a,s.push(i[r]),o&&e.classes[i[r]]&&s.push(e.classes[i[r]])}var s=[],n=this;return e=t.extend({element:this.element,classes:this.options.classes||{}},e),this._on(e.element,{remove:"_untrackClassesElement"}),e.keys&&i(e.keys.match(/\S+/g)||[],!0),e.extra&&i(e.extra.match(/\S+/g)||[]),s.join(" ")},_untrackClassesElement:function(e){var i=this;t.each(i.classesElementLookup,function(s,n){-1!==t.inArray(e.target,n)&&(i.classesElementLookup[s]=t(n.not(e.target).get()))})},_removeClass:function(t,e,i){return this._toggleClass(t,e,i,!1)},_addClass:function(t,e,i){return this._toggleClass(t,e,i,!0)},_toggleClass:function(t,e,i,s){s="boolean"==typeof s?s:i;var n="string"==typeof t||null===t,o={extra:n?e:i,keys:n?t:e,element:n?this.element:t,add:s};return o.element.toggleClass(this._classes(o),s),this},_on:function(e,i,s){var n,o=this;"boolean"!=typeof e&&(s=i,i=e,e=!1),s?(i=n=t(i),this.bindings=this.bindings.add(i)):(s=i,i=this.element,n=this.widget()),t.each(s,function(s,a){function r(){return e||o.options.disabled!==!0&&!t(this).hasClass("ui-state-disabled")?("string"==typeof a?o[a]:a).apply(o,arguments):void 0}"string"!=typeof a&&(r.guid=a.guid=a.guid||r.guid||t.guid++);var h=s.match(/^([\w:-]*)\s*(.*)$/),l=h[1]+o.eventNamespace,c=h[2];c?n.on(l,c,r):i.on(l,r)})},_off:function(e,i){i=(i||"").split(" ").join(this.eventNamespace+" ")+this.eventNamespace,e.off(i).off(i),this.bindings=t(this.bindings.not(e).get()),this.focusable=t(this.focusable.not(e).get()),this.hoverable=t(this.hoverable.not(e).get())},_delay:function(t,e){function i(){return("string"==typeof t?s[t]:t).apply(s,arguments)}var s=this;return setTimeout(i,e||0)},_hoverable:function(e){this.hoverable=this.hoverable.add(e),this._on(e,{mouseenter:function(e){this._addClass(t(e.currentTarget),null,"ui-state-hover")},mouseleave:function(e){this._removeClass(t(e.currentTarget),null,"ui-state-hover")}})},_focusable:function(e){this.focusable=this.focusable.add(e),this._on(e,{focusin:function(e){this._addClass(t(e.currentTarget),null,"ui-state-focus")},focusout:function(e){this._removeClass(t(e.currentTarget),null,"ui-state-focus")}})},_trigger:function(e,i,s){var n,o,a=this.options[e];if(s=s||{},i=t.Event(i),i.type=(e===this.widgetEventPrefix?e:this.widgetEventPrefix+e).toLowerCase(),i.target=this.element[0],o=i.originalEvent)for(n in o)n in i||(i[n]=o[n]);return this.element.trigger(i,s),!(t.isFunction(a)&&a.apply(this.element[0],[i].concat(s))===!1||i.isDefaultPrevented())}},t.each({show:"fadeIn",hide:"fadeOut"},function(e,i){t.Widget.prototype["_"+e]=function(s,n,o){"string"==typeof n&&(n={effect:n});var a,r=n?n===!0||"number"==typeof n?i:n.effect||i:e;n=n||{},"number"==typeof n&&(n={duration:n}),a=!t.isEmptyObject(n),n.complete=o,n.delay&&s.delay(n.delay),a&&t.effects&&t.effects.effect[r]?s[e](n):r!==e&&s[r]?s[r](n.duration,n.easing,o):s.queue(function(i){t(this)[e](),o&&o.call(s[0]),i()})}}),t.widget,function(){function e(t,e,i){return[parseFloat(t[0])*(u.test(t[0])?e/100:1),parseFloat(t[1])*(u.test(t[1])?i/100:1)]}function i(e,i){return parseInt(t.css(e,i),10)||0}function s(e){var i=e[0];return 9===i.nodeType?{width:e.width(),height:e.height(),offset:{top:0,left:0}}:t.isWindow(i)?{width:e.width(),height:e.height(),offset:{top:e.scrollTop(),left:e.scrollLeft()}}:i.preventDefault?{width:0,height:0,offset:{top:i.pageY,left:i.pageX}}:{width:e.outerWidth(),height:e.outerHeight(),offset:e.offset()}}var n,o=Math.max,a=Math.abs,r=/left|center|right/,h=/top|center|bottom/,l=/[\+\-]\d+(\.[\d]+)?%?/,c=/^\w+/,u=/%$/,d=t.fn.position;t.position={scrollbarWidth:function(){if(void 0!==n)return n;var e,i,s=t("<div style='display:block;position:absolute;width:50px;height:50px;overflow:hidden;'><div style='height:100px;width:auto;'></div></div>"),o=s.children()[0];return t("body").append(s),e=o.offsetWidth,s.css("overflow","scroll"),i=o.offsetWidth,e===i&&(i=s[0].clientWidth),s.remove(),n=e-i},getScrollInfo:function(e){var i=e.isWindow||e.isDocument?"":e.element.css("overflow-x"),s=e.isWindow||e.isDocument?"":e.element.css("overflow-y"),n="scroll"===i||"auto"===i&&e.width<e.element[0].scrollWidth,o="scroll"===s||"auto"===s&&e.height<e.element[0].scrollHeight;return{width:o?t.position.scrollbarWidth():0,height:n?t.position.scrollbarWidth():0}},getWithinInfo:function(e){var i=t(e||window),s=t.isWindow(i[0]),n=!!i[0]&&9===i[0].nodeType,o=!s&&!n;return{element:i,isWindow:s,isDocument:n,offset:o?t(e).offset():{left:0,top:0},scrollLeft:i.scrollLeft(),scrollTop:i.scrollTop(),width:i.outerWidth(),height:i.outerHeight()}}},t.fn.position=function(n){if(!n||!n.of)return d.apply(this,arguments);n=t.extend({},n);var u,p,f,g,m,_,v=t(n.of),b=t.position.getWithinInfo(n.within),y=t.position.getScrollInfo(b),w=(n.collision||"flip").split(" "),k={};return _=s(v),v[0].preventDefault&&(n.at="left top"),p=_.width,f=_.height,g=_.offset,m=t.extend({},g),t.each(["my","at"],function(){var t,e,i=(n[this]||"").split(" ");1===i.length&&(i=r.test(i[0])?i.concat(["center"]):h.test(i[0])?["center"].concat(i):["center","center"]),i[0]=r.test(i[0])?i[0]:"center",i[1]=h.test(i[1])?i[1]:"center",t=l.exec(i[0]),e=l.exec(i[1]),k[this]=[t?t[0]:0,e?e[0]:0],n[this]=[c.exec(i[0])[0],c.exec(i[1])[0]]}),1===w.length&&(w[1]=w[0]),"right"===n.at[0]?m.left+=p:"center"===n.at[0]&&(m.left+=p/2),"bottom"===n.at[1]?m.top+=f:"center"===n.at[1]&&(m.top+=f/2),u=e(k.at,p,f),m.left+=u[0],m.top+=u[1],this.each(function(){var s,r,h=t(this),l=h.outerWidth(),c=h.outerHeight(),d=i(this,"marginLeft"),_=i(this,"marginTop"),x=l+d+i(this,"marginRight")+y.width,C=c+_+i(this,"marginBottom")+y.height,D=t.extend({},m),I=e(k.my,h.outerWidth(),h.outerHeight());"right"===n.my[0]?D.left-=l:"center"===n.my[0]&&(D.left-=l/2),"bottom"===n.my[1]?D.top-=c:"center"===n.my[1]&&(D.top-=c/2),D.left+=I[0],D.top+=I[1],s={marginLeft:d,marginTop:_},t.each(["left","top"],function(e,i){t.ui.position[w[e]]&&t.ui.position[w[e]][i](D,{targetWidth:p,targetHeight:f,elemWidth:l,elemHeight:c,collisionPosition:s,collisionWidth:x,collisionHeight:C,offset:[u[0]+I[0],u[1]+I[1]],my:n.my,at:n.at,within:b,elem:h})}),n.using&&(r=function(t){var e=g.left-D.left,i=e+p-l,s=g.top-D.top,r=s+f-c,u={target:{element:v,left:g.left,top:g.top,width:p,height:f},element:{element:h,left:D.left,top:D.top,width:l,height:c},horizontal:0>i?"left":e>0?"right":"center",vertical:0>r?"top":s>0?"bottom":"middle"};l>p&&p>a(e+i)&&(u.horizontal="center"),c>f&&f>a(s+r)&&(u.vertical="middle"),u.important=o(a(e),a(i))>o(a(s),a(r))?"horizontal":"vertical",n.using.call(this,t,u)}),h.offset(t.extend(D,{using:r}))})},t.ui.position={fit:{left:function(t,e){var i,s=e.within,n=s.isWindow?s.scrollLeft:s.offset.left,a=s.width,r=t.left-e.collisionPosition.marginLeft,h=n-r,l=r+e.collisionWidth-a-n;e.collisionWidth>a?h>0&&0>=l?(i=t.left+h+e.collisionWidth-a-n,t.left+=h-i):t.left=l>0&&0>=h?n:h>l?n+a-e.collisionWidth:n:h>0?t.left+=h:l>0?t.left-=l:t.left=o(t.left-r,t.left)},top:function(t,e){var i,s=e.within,n=s.isWindow?s.scrollTop:s.offset.top,a=e.within.height,r=t.top-e.collisionPosition.marginTop,h=n-r,l=r+e.collisionHeight-a-n;e.collisionHeight>a?h>0&&0>=l?(i=t.top+h+e.collisionHeight-a-n,t.top+=h-i):t.top=l>0&&0>=h?n:h>l?n+a-e.collisionHeight:n:h>0?t.top+=h:l>0?t.top-=l:t.top=o(t.top-r,t.top)}},flip:{left:function(t,e){var i,s,n=e.within,o=n.offset.left+n.scrollLeft,r=n.width,h=n.isWindow?n.scrollLeft:n.offset.left,l=t.left-e.collisionPosition.marginLeft,c=l-h,u=l+e.collisionWidth-r-h,d="left"===e.my[0]?-e.elemWidth:"right"===e.my[0]?e.elemWidth:0,p="left"===e.at[0]?e.targetWidth:"right"===e.at[0]?-e.targetWidth:0,f=-2*e.offset[0];0>c?(i=t.left+d+p+f+e.collisionWidth-r-o,(0>i||a(c)>i)&&(t.left+=d+p+f)):u>0&&(s=t.left-e.collisionPosition.marginLeft+d+p+f-h,(s>0||u>a(s))&&(t.left+=d+p+f))},top:function(t,e){var i,s,n=e.within,o=n.offset.top+n.scrollTop,r=n.height,h=n.isWindow?n.scrollTop:n.offset.top,l=t.top-e.collisionPosition.marginTop,c=l-h,u=l+e.collisionHeight-r-h,d="top"===e.my[1],p=d?-e.elemHeight:"bottom"===e.my[1]?e.elemHeight:0,f="top"===e.at[1]?e.targetHeight:"bottom"===e.at[1]?-e.targetHeight:0,g=-2*e.offset[1];0>c?(s=t.top+p+f+g+e.collisionHeight-r-o,(0>s||a(c)>s)&&(t.top+=p+f+g)):u>0&&(i=t.top-e.collisionPosition.marginTop+p+f+g-h,(i>0||u>a(i))&&(t.top+=p+f+g))}},flipfit:{left:function(){t.ui.position.flip.left.apply(this,arguments),t.ui.position.fit.left.apply(this,arguments)},top:function(){t.ui.position.flip.top.apply(this,arguments),t.ui.position.fit.top.apply(this,arguments)}}}}(),t.ui.position,t.extend(t.expr[":"],{data:t.expr.createPseudo?t.expr.createPseudo(function(e){return function(i){return!!t.data(i,e)}}):function(e,i,s){return!!t.data(e,s[3])}}),t.fn.extend({disableSelection:function(){var t="onselectstart"in document.createElement("div")?"selectstart":"mousedown";return function(){return this.on(t+".ui-disableSelection",function(t){t.preventDefault()})}}(),enableSelection:function(){return this.off(".ui-disableSelection")}});var c="ui-effects-",u="ui-effects-style",d="ui-effects-animated",p=t;t.effects={effect:{}},function(t,e){function i(t,e,i){var s=u[e.type]||{};return null==t?i||!e.def?null:e.def:(t=s.floor?~~t:parseFloat(t),isNaN(t)?e.def:s.mod?(t+s.mod)%s.mod:0>t?0:t>s.max?s.max:t)}function s(i){var s=l(),n=s._rgba=[];return i=i.toLowerCase(),f(h,function(t,o){var a,r=o.re.exec(i),h=r&&o.parse(r),l=o.space||"rgba";return h?(a=s[l](h),s[c[l].cache]=a[c[l].cache],n=s._rgba=a._rgba,!1):e}),n.length?("0,0,0,0"===n.join()&&t.extend(n,o.transparent),s):o[i]}function n(t,e,i){return i=(i+1)%1,1>6*i?t+6*(e-t)*i:1>2*i?e:2>3*i?t+6*(e-t)*(2/3-i):t}var o,a="backgroundColor borderBottomColor borderLeftColor borderRightColor borderTopColor color columnRuleColor outlineColor textDecorationColor textEmphasisColor",r=/^([\-+])=\s*(\d+\.?\d*)/,h=[{re:/rgba?\(\s*(\d{1,3})\s*,\s*(\d{1,3})\s*,\s*(\d{1,3})\s*(?:,\s*(\d?(?:\.\d+)?)\s*)?\)/,parse:function(t){return[t[1],t[2],t[3],t[4]]}},{re:/rgba?\(\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*(?:,\s*(\d?(?:\.\d+)?)\s*)?\)/,parse:function(t){return[2.55*t[1],2.55*t[2],2.55*t[3],t[4]]}},{re:/#([a-f0-9]{2})([a-f0-9]{2})([a-f0-9]{2})/,parse:function(t){return[parseInt(t[1],16),parseInt(t[2],16),parseInt(t[3],16)]}},{re:/#([a-f0-9])([a-f0-9])([a-f0-9])/,parse:function(t){return[parseInt(t[1]+t[1],16),parseInt(t[2]+t[2],16),parseInt(t[3]+t[3],16)]}},{re:/hsla?\(\s*(\d+(?:\.\d+)?)\s*,\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*(?:,\s*(\d?(?:\.\d+)?)\s*)?\)/,space:"hsla",parse:function(t){return[t[1],t[2]/100,t[3]/100,t[4]]}}],l=t.Color=function(e,i,s,n){return new t.Color.fn.parse(e,i,s,n)},c={rgba:{props:{red:{idx:0,type:"byte"},green:{idx:1,type:"byte"},blue:{idx:2,type:"byte"}}},hsla:{props:{hue:{idx:0,type:"degrees"},saturation:{idx:1,type:"percent"},lightness:{idx:2,type:"percent"}}}},u={"byte":{floor:!0,max:255},percent:{max:1},degrees:{mod:360,floor:!0}},d=l.support={},p=t("<p>")[0],f=t.each;p.style.cssText="background-color:rgba(1,1,1,.5)",d.rgba=p.style.backgroundColor.indexOf("rgba")>-1,f(c,function(t,e){e.cache="_"+t,e.props.alpha={idx:3,type:"percent",def:1}}),l.fn=t.extend(l.prototype,{parse:function(n,a,r,h){if(n===e)return this._rgba=[null,null,null,null],this;(n.jquery||n.nodeType)&&(n=t(n).css(a),a=e);var u=this,d=t.type(n),p=this._rgba=[];return a!==e&&(n=[n,a,r,h],d="array"),"string"===d?this.parse(s(n)||o._default):"array"===d?(f(c.rgba.props,function(t,e){p[e.idx]=i(n[e.idx],e)}),this):"object"===d?(n instanceof l?f(c,function(t,e){n[e.cache]&&(u[e.cache]=n[e.cache].slice())}):f(c,function(e,s){var o=s.cache;f(s.props,function(t,e){if(!u[o]&&s.to){if("alpha"===t||null==n[t])return;u[o]=s.to(u._rgba)}u[o][e.idx]=i(n[t],e,!0)}),u[o]&&0>t.inArray(null,u[o].slice(0,3))&&(u[o][3]=1,s.from&&(u._rgba=s.from(u[o])))}),this):e},is:function(t){var i=l(t),s=!0,n=this;return f(c,function(t,o){var a,r=i[o.cache];return r&&(a=n[o.cache]||o.to&&o.to(n._rgba)||[],f(o.props,function(t,i){return null!=r[i.idx]?s=r[i.idx]===a[i.idx]:e})),s}),s},_space:function(){var t=[],e=this;return f(c,function(i,s){e[s.cache]&&t.push(i)}),t.pop()},transition:function(t,e){var s=l(t),n=s._space(),o=c[n],a=0===this.alpha()?l("transparent"):this,r=a[o.cache]||o.to(a._rgba),h=r.slice();return s=s[o.cache],f(o.props,function(t,n){var o=n.idx,a=r[o],l=s[o],c=u[n.type]||{};null!==l&&(null===a?h[o]=l:(c.mod&&(l-a>c.mod/2?a+=c.mod:a-l>c.mod/2&&(a-=c.mod)),h[o]=i((l-a)*e+a,n)))}),this[n](h)},blend:function(e){if(1===this._rgba[3])return this;var i=this._rgba.slice(),s=i.pop(),n=l(e)._rgba;return l(t.map(i,function(t,e){return(1-s)*n[e]+s*t}))},toRgbaString:function(){var e="rgba(",i=t.map(this._rgba,function(t,e){return null==t?e>2?1:0:t});return 1===i[3]&&(i.pop(),e="rgb("),e+i.join()+")"},toHslaString:function(){var e="hsla(",i=t.map(this.hsla(),function(t,e){return null==t&&(t=e>2?1:0),e&&3>e&&(t=Math.round(100*t)+"%"),t});return 1===i[3]&&(i.pop(),e="hsl("),e+i.join()+")"},toHexString:function(e){var i=this._rgba.slice(),s=i.pop();return e&&i.push(~~(255*s)),"#"+t.map(i,function(t){return t=(t||0).toString(16),1===t.length?"0"+t:t}).join("")},toString:function(){return 0===this._rgba[3]?"transparent":this.toRgbaString()}}),l.fn.parse.prototype=l.fn,c.hsla.to=function(t){if(null==t[0]||null==t[1]||null==t[2])return[null,null,null,t[3]];var e,i,s=t[0]/255,n=t[1]/255,o=t[2]/255,a=t[3],r=Math.max(s,n,o),h=Math.min(s,n,o),l=r-h,c=r+h,u=.5*c;return e=h===r?0:s===r?60*(n-o)/l+360:n===r?60*(o-s)/l+120:60*(s-n)/l+240,i=0===l?0:.5>=u?l/c:l/(2-c),[Math.round(e)%360,i,u,null==a?1:a]},c.hsla.from=function(t){if(null==t[0]||null==t[1]||null==t[2])return[null,null,null,t[3]];var e=t[0]/360,i=t[1],s=t[2],o=t[3],a=.5>=s?s*(1+i):s+i-s*i,r=2*s-a;return[Math.round(255*n(r,a,e+1/3)),Math.round(255*n(r,a,e)),Math.round(255*n(r,a,e-1/3)),o]},f(c,function(s,n){var o=n.props,a=n.cache,h=n.to,c=n.from;l.fn[s]=function(s){if(h&&!this[a]&&(this[a]=h(this._rgba)),s===e)return this[a].slice();var n,r=t.type(s),u="array"===r||"object"===r?s:arguments,d=this[a].slice();return f(o,function(t,e){var s=u["object"===r?t:e.idx];null==s&&(s=d[e.idx]),d[e.idx]=i(s,e)}),c?(n=l(c(d)),n[a]=d,n):l(d)},f(o,function(e,i){l.fn[e]||(l.fn[e]=function(n){var o,a=t.type(n),h="alpha"===e?this._hsla?"hsla":"rgba":s,l=this[h](),c=l[i.idx];return"undefined"===a?c:("function"===a&&(n=n.call(this,c),a=t.type(n)),null==n&&i.empty?this:("string"===a&&(o=r.exec(n),o&&(n=c+parseFloat(o[2])*("+"===o[1]?1:-1))),l[i.idx]=n,this[h](l)))})})}),l.hook=function(e){var i=e.split(" ");f(i,function(e,i){t.cssHooks[i]={set:function(e,n){var o,a,r="";if("transparent"!==n&&("string"!==t.type(n)||(o=s(n)))){if(n=l(o||n),!d.rgba&&1!==n._rgba[3]){for(a="backgroundColor"===i?e.parentNode:e;(""===r||"transparent"===r)&&a&&a.style;)try{r=t.css(a,"backgroundColor"),a=a.parentNode}catch(h){}n=n.blend(r&&"transparent"!==r?r:"_default")}n=n.toRgbaString()}try{e.style[i]=n}catch(h){}}},t.fx.step[i]=function(e){e.colorInit||(e.start=l(e.elem,i),e.end=l(e.end),e.colorInit=!0),t.cssHooks[i].set(e.elem,e.start.transition(e.end,e.pos))}})},l.hook(a),t.cssHooks.borderColor={expand:function(t){var e={};return f(["Top","Right","Bottom","Left"],function(i,s){e["border"+s+"Color"]=t}),e}},o=t.Color.names={aqua:"#00ffff",black:"#000000",blue:"#0000ff",fuchsia:"#ff00ff",gray:"#808080",green:"#008000",lime:"#00ff00",maroon:"#800000",navy:"#000080",olive:"#808000",purple:"#800080",red:"#ff0000",silver:"#c0c0c0",teal:"#008080",white:"#ffffff",yellow:"#ffff00",transparent:[null,null,null,0],_default:"#ffffff"}}(p),function(){function e(e){var i,s,n=e.ownerDocument.defaultView?e.ownerDocument.defaultView.getComputedStyle(e,null):e.currentStyle,o={};if(n&&n.length&&n[0]&&n[n[0]])for(s=n.length;s--;)i=n[s],"string"==typeof n[i]&&(o[t.camelCase(i)]=n[i]);else for(i in n)"string"==typeof n[i]&&(o[i]=n[i]);return o}function i(e,i){var s,o,a={};for(s in i)o=i[s],e[s]!==o&&(n[s]||(t.fx.step[s]||!isNaN(parseFloat(o)))&&(a[s]=o));return a}var s=["add","remove","toggle"],n={border:1,borderBottom:1,borderColor:1,borderLeft:1,borderRight:1,borderTop:1,borderWidth:1,margin:1,padding:1};t.each(["borderLeftStyle","borderRightStyle","borderBottomStyle","borderTopStyle"],function(e,i){t.fx.step[i]=function(t){("none"!==t.end&&!t.setAttr||1===t.pos&&!t.setAttr)&&(p.style(t.elem,i,t.end),t.setAttr=!0)}}),t.fn.addBack||(t.fn.addBack=function(t){return this.add(null==t?this.prevObject:this.prevObject.filter(t))}),t.effects.animateClass=function(n,o,a,r){var h=t.speed(o,a,r);return this.queue(function(){var o,a=t(this),r=a.attr("class")||"",l=h.children?a.find("*").addBack():a;l=l.map(function(){var i=t(this);return{el:i,start:e(this)}}),o=function(){t.each(s,function(t,e){n[e]&&a[e+"Class"](n[e])})},o(),l=l.map(function(){return this.end=e(this.el[0]),this.diff=i(this.start,this.end),this}),a.attr("class",r),l=l.map(function(){var e=this,i=t.Deferred(),s=t.extend({},h,{queue:!1,complete:function(){i.resolve(e)}});return this.el.animate(this.diff,s),i.promise()}),t.when.apply(t,l.get()).done(function(){o(),t.each(arguments,function(){var e=this.el;t.each(this.diff,function(t){e.css(t,"")})}),h.complete.call(a[0])})})},t.fn.extend({addClass:function(e){return function(i,s,n,o){return s?t.effects.animateClass.call(this,{add:i},s,n,o):e.apply(this,arguments)}}(t.fn.addClass),removeClass:function(e){return function(i,s,n,o){return arguments.length>1?t.effects.animateClass.call(this,{remove:i},s,n,o):e.apply(this,arguments)}}(t.fn.removeClass),toggleClass:function(e){return function(i,s,n,o,a){return"boolean"==typeof s||void 0===s?n?t.effects.animateClass.call(this,s?{add:i}:{remove:i},n,o,a):e.apply(this,arguments):t.effects.animateClass.call(this,{toggle:i},s,n,o)}}(t.fn.toggleClass),switchClass:function(e,i,s,n,o){return t.effects.animateClass.call(this,{add:i,remove:e},s,n,o)}})}(),function(){function e(e,i,s,n){return t.isPlainObject(e)&&(i=e,e=e.effect),e={effect:e},null==i&&(i={}),t.isFunction(i)&&(n=i,s=null,i={}),("number"==typeof i||t.fx.speeds[i])&&(n=s,s=i,i={}),t.isFunction(s)&&(n=s,s=null),i&&t.extend(e,i),s=s||i.duration,e.duration=t.fx.off?0:"number"==typeof s?s:s in t.fx.speeds?t.fx.speeds[s]:t.fx.speeds._default,e.complete=n||i.complete,e}function i(e){return!e||"number"==typeof e||t.fx.speeds[e]?!0:"string"!=typeof e||t.effects.effect[e]?t.isFunction(e)?!0:"object"!=typeof e||e.effect?!1:!0:!0}function s(t,e){var i=e.outerWidth(),s=e.outerHeight(),n=/^rect\((-?\d*\.?\d*px|-?\d+%|auto),?\s*(-?\d*\.?\d*px|-?\d+%|auto),?\s*(-?\d*\.?\d*px|-?\d+%|auto),?\s*(-?\d*\.?\d*px|-?\d+%|auto)\)$/,o=n.exec(t)||["",0,i,s,0];return{top:parseFloat(o[1])||0,right:"auto"===o[2]?i:parseFloat(o[2]),bottom:"auto"===o[3]?s:parseFloat(o[3]),left:parseFloat(o[4])||0}}t.expr&&t.expr.filters&&t.expr.filters.animated&&(t.expr.filters.animated=function(e){return function(i){return!!t(i).data(d)||e(i)}}(t.expr.filters.animated)),t.uiBackCompat!==!1&&t.extend(t.effects,{save:function(t,e){for(var i=0,s=e.length;s>i;i++)null!==e[i]&&t.data(c+e[i],t[0].style[e[i]])},restore:function(t,e){for(var i,s=0,n=e.length;n>s;s++)null!==e[s]&&(i=t.data(c+e[s]),t.css(e[s],i))},setMode:function(t,e){return"toggle"===e&&(e=t.is(":hidden")?"show":"hide"),e},createWrapper:function(e){if(e.parent().is(".ui-effects-wrapper"))return e.parent();var i={width:e.outerWidth(!0),height:e.outerHeight(!0),"float":e.css("float")},s=t("<div></div>").addClass("ui-effects-wrapper").css({fontSize:"100%",background:"transparent",border:"none",margin:0,padding:0}),n={width:e.width(),height:e.height()},o=document.activeElement;try{o.id}catch(a){o=document.body}return e.wrap(s),(e[0]===o||t.contains(e[0],o))&&t(o).trigger("focus"),s=e.parent(),"static"===e.css("position")?(s.css({position:"relative"}),e.css({position:"relative"})):(t.extend(i,{position:e.css("position"),zIndex:e.css("z-index")}),t.each(["top","left","bottom","right"],function(t,s){i[s]=e.css(s),isNaN(parseInt(i[s],10))&&(i[s]="auto")}),e.css({position:"relative",top:0,left:0,right:"auto",bottom:"auto"})),e.css(n),s.css(i).show()},removeWrapper:function(e){var i=document.activeElement;return e.parent().is(".ui-effects-wrapper")&&(e.parent().replaceWith(e),(e[0]===i||t.contains(e[0],i))&&t(i).trigger("focus")),e}}),t.extend(t.effects,{version:"1.12.1",define:function(e,i,s){return s||(s=i,i="effect"),t.effects.effect[e]=s,t.effects.effect[e].mode=i,s},scaledDimensions:function(t,e,i){if(0===e)return{height:0,width:0,outerHeight:0,outerWidth:0};var s="horizontal"!==i?(e||100)/100:1,n="vertical"!==i?(e||100)/100:1;return{height:t.height()*n,width:t.width()*s,outerHeight:t.outerHeight()*n,outerWidth:t.outerWidth()*s}},clipToBox:function(t){return{width:t.clip.right-t.clip.left,height:t.clip.bottom-t.clip.top,left:t.clip.left,top:t.clip.top}},unshift:function(t,e,i){var s=t.queue();e>1&&s.splice.apply(s,[1,0].concat(s.splice(e,i))),t.dequeue()},saveStyle:function(t){t.data(u,t[0].style.cssText)},restoreStyle:function(t){t[0].style.cssText=t.data(u)||"",t.removeData(u)},mode:function(t,e){var i=t.is(":hidden");return"toggle"===e&&(e=i?"show":"hide"),(i?"hide"===e:"show"===e)&&(e="none"),e},getBaseline:function(t,e){var i,s;switch(t[0]){case"top":i=0;break;case"middle":i=.5;break;case"bottom":i=1;break;default:i=t[0]/e.height}switch(t[1]){case"left":s=0;break;case"center":s=.5;break;case"right":s=1;break;default:s=t[1]/e.width}return{x:s,y:i}},createPlaceholder:function(e){var i,s=e.css("position"),n=e.position();return e.css({marginTop:e.css("marginTop"),marginBottom:e.css("marginBottom"),marginLeft:e.css("marginLeft"),marginRight:e.css("marginRight")}).outerWidth(e.outerWidth()).outerHeight(e.outerHeight()),/^(static|relative)/.test(s)&&(s="absolute",i=t("<"+e[0].nodeName+">").insertAfter(e).css({display:/^(inline|ruby)/.test(e.css("display"))?"inline-block":"block",visibility:"hidden",marginTop:e.css("marginTop"),marginBottom:e.css("marginBottom"),marginLeft:e.css("marginLeft"),marginRight:e.css("marginRight"),"float":e.css("float")}).outerWidth(e.outerWidth()).outerHeight(e.outerHeight()).addClass("ui-effects-placeholder"),e.data(c+"placeholder",i)),e.css({position:s,left:n.left,top:n.top}),i},removePlaceholder:function(t){var e=c+"placeholder",i=t.data(e);i&&(i.remove(),t.removeData(e))},cleanUp:function(e){t.effects.restoreStyle(e),t.effects.removePlaceholder(e)},setTransition:function(e,i,s,n){return n=n||{},t.each(i,function(t,i){var o=e.cssUnit(i);o[0]>0&&(n[i]=o[0]*s+o[1])}),n}}),t.fn.extend({effect:function(){function i(e){function i(){r.removeData(d),t.effects.cleanUp(r),"hide"===s.mode&&r.hide(),a()}function a(){t.isFunction(h)&&h.call(r[0]),t.isFunction(e)&&e()}var r=t(this);s.mode=c.shift(),t.uiBackCompat===!1||o?"none"===s.mode?(r[l](),a()):n.call(r[0],s,i):(r.is(":hidden")?"hide"===l:"show"===l)?(r[l](),a()):n.call(r[0],s,a)}var s=e.apply(this,arguments),n=t.effects.effect[s.effect],o=n.mode,a=s.queue,r=a||"fx",h=s.complete,l=s.mode,c=[],u=function(e){var i=t(this),s=t.effects.mode(i,l)||o;i.data(d,!0),c.push(s),o&&("show"===s||s===o&&"hide"===s)&&i.show(),o&&"none"===s||t.effects.saveStyle(i),t.isFunction(e)&&e()};return t.fx.off||!n?l?this[l](s.duration,h):this.each(function(){h&&h.call(this)}):a===!1?this.each(u).each(i):this.queue(r,u).queue(r,i)},show:function(t){return function(s){if(i(s))return t.apply(this,arguments);var n=e.apply(this,arguments);return n.mode="show",this.effect.call(this,n)
}}(t.fn.show),hide:function(t){return function(s){if(i(s))return t.apply(this,arguments);var n=e.apply(this,arguments);return n.mode="hide",this.effect.call(this,n)}}(t.fn.hide),toggle:function(t){return function(s){if(i(s)||"boolean"==typeof s)return t.apply(this,arguments);var n=e.apply(this,arguments);return n.mode="toggle",this.effect.call(this,n)}}(t.fn.toggle),cssUnit:function(e){var i=this.css(e),s=[];return t.each(["em","px","%","pt"],function(t,e){i.indexOf(e)>0&&(s=[parseFloat(i),e])}),s},cssClip:function(t){return t?this.css("clip","rect("+t.top+"px "+t.right+"px "+t.bottom+"px "+t.left+"px)"):s(this.css("clip"),this)},transfer:function(e,i){var s=t(this),n=t(e.to),o="fixed"===n.css("position"),a=t("body"),r=o?a.scrollTop():0,h=o?a.scrollLeft():0,l=n.offset(),c={top:l.top-r,left:l.left-h,height:n.innerHeight(),width:n.innerWidth()},u=s.offset(),d=t("<div class='ui-effects-transfer'></div>").appendTo("body").addClass(e.className).css({top:u.top-r,left:u.left-h,height:s.innerHeight(),width:s.innerWidth(),position:o?"fixed":"absolute"}).animate(c,e.duration,e.easing,function(){d.remove(),t.isFunction(i)&&i()})}}),t.fx.step.clip=function(e){e.clipInit||(e.start=t(e.elem).cssClip(),"string"==typeof e.end&&(e.end=s(e.end,e.elem)),e.clipInit=!0),t(e.elem).cssClip({top:e.pos*(e.end.top-e.start.top)+e.start.top,right:e.pos*(e.end.right-e.start.right)+e.start.right,bottom:e.pos*(e.end.bottom-e.start.bottom)+e.start.bottom,left:e.pos*(e.end.left-e.start.left)+e.start.left})}}(),function(){var e={};t.each(["Quad","Cubic","Quart","Quint","Expo"],function(t,i){e[i]=function(e){return Math.pow(e,t+2)}}),t.extend(e,{Sine:function(t){return 1-Math.cos(t*Math.PI/2)},Circ:function(t){return 1-Math.sqrt(1-t*t)},Elastic:function(t){return 0===t||1===t?t:-Math.pow(2,8*(t-1))*Math.sin((80*(t-1)-7.5)*Math.PI/15)},Back:function(t){return t*t*(3*t-2)},Bounce:function(t){for(var e,i=4;((e=Math.pow(2,--i))-1)/11>t;);return 1/Math.pow(4,3-i)-7.5625*Math.pow((3*e-2)/22-t,2)}}),t.each(e,function(e,i){t.easing["easeIn"+e]=i,t.easing["easeOut"+e]=function(t){return 1-i(1-t)},t.easing["easeInOut"+e]=function(t){return.5>t?i(2*t)/2:1-i(-2*t+2)/2}})}();var f=t.effects;t.effects.define("blind","hide",function(e,i){var s={up:["bottom","top"],vertical:["bottom","top"],down:["top","bottom"],left:["right","left"],horizontal:["right","left"],right:["left","right"]},n=t(this),o=e.direction||"up",a=n.cssClip(),r={clip:t.extend({},a)},h=t.effects.createPlaceholder(n);r.clip[s[o][0]]=r.clip[s[o][1]],"show"===e.mode&&(n.cssClip(r.clip),h&&h.css(t.effects.clipToBox(r)),r.clip=a),h&&h.animate(t.effects.clipToBox(r),e.duration,e.easing),n.animate(r,{queue:!1,duration:e.duration,easing:e.easing,complete:i})}),t.effects.define("bounce",function(e,i){var s,n,o,a=t(this),r=e.mode,h="hide"===r,l="show"===r,c=e.direction||"up",u=e.distance,d=e.times||5,p=2*d+(l||h?1:0),f=e.duration/p,g=e.easing,m="up"===c||"down"===c?"top":"left",_="up"===c||"left"===c,v=0,b=a.queue().length;for(t.effects.createPlaceholder(a),o=a.css(m),u||(u=a["top"===m?"outerHeight":"outerWidth"]()/3),l&&(n={opacity:1},n[m]=o,a.css("opacity",0).css(m,_?2*-u:2*u).animate(n,f,g)),h&&(u/=Math.pow(2,d-1)),n={},n[m]=o;d>v;v++)s={},s[m]=(_?"-=":"+=")+u,a.animate(s,f,g).animate(n,f,g),u=h?2*u:u/2;h&&(s={opacity:0},s[m]=(_?"-=":"+=")+u,a.animate(s,f,g)),a.queue(i),t.effects.unshift(a,b,p+1)}),t.effects.define("clip","hide",function(e,i){var s,n={},o=t(this),a=e.direction||"vertical",r="both"===a,h=r||"horizontal"===a,l=r||"vertical"===a;s=o.cssClip(),n.clip={top:l?(s.bottom-s.top)/2:s.top,right:h?(s.right-s.left)/2:s.right,bottom:l?(s.bottom-s.top)/2:s.bottom,left:h?(s.right-s.left)/2:s.left},t.effects.createPlaceholder(o),"show"===e.mode&&(o.cssClip(n.clip),n.clip=s),o.animate(n,{queue:!1,duration:e.duration,easing:e.easing,complete:i})}),t.effects.define("drop","hide",function(e,i){var s,n=t(this),o=e.mode,a="show"===o,r=e.direction||"left",h="up"===r||"down"===r?"top":"left",l="up"===r||"left"===r?"-=":"+=",c="+="===l?"-=":"+=",u={opacity:0};t.effects.createPlaceholder(n),s=e.distance||n["top"===h?"outerHeight":"outerWidth"](!0)/2,u[h]=l+s,a&&(n.css(u),u[h]=c+s,u.opacity=1),n.animate(u,{queue:!1,duration:e.duration,easing:e.easing,complete:i})}),t.effects.define("explode","hide",function(e,i){function s(){b.push(this),b.length===u*d&&n()}function n(){p.css({visibility:"visible"}),t(b).remove(),i()}var o,a,r,h,l,c,u=e.pieces?Math.round(Math.sqrt(e.pieces)):3,d=u,p=t(this),f=e.mode,g="show"===f,m=p.show().css("visibility","hidden").offset(),_=Math.ceil(p.outerWidth()/d),v=Math.ceil(p.outerHeight()/u),b=[];for(o=0;u>o;o++)for(h=m.top+o*v,c=o-(u-1)/2,a=0;d>a;a++)r=m.left+a*_,l=a-(d-1)/2,p.clone().appendTo("body").wrap("<div></div>").css({position:"absolute",visibility:"visible",left:-a*_,top:-o*v}).parent().addClass("ui-effects-explode").css({position:"absolute",overflow:"hidden",width:_,height:v,left:r+(g?l*_:0),top:h+(g?c*v:0),opacity:g?0:1}).animate({left:r+(g?0:l*_),top:h+(g?0:c*v),opacity:g?1:0},e.duration||500,e.easing,s)}),t.effects.define("fade","toggle",function(e,i){var s="show"===e.mode;t(this).css("opacity",s?0:1).animate({opacity:s?1:0},{queue:!1,duration:e.duration,easing:e.easing,complete:i})}),t.effects.define("fold","hide",function(e,i){var s=t(this),n=e.mode,o="show"===n,a="hide"===n,r=e.size||15,h=/([0-9]+)%/.exec(r),l=!!e.horizFirst,c=l?["right","bottom"]:["bottom","right"],u=e.duration/2,d=t.effects.createPlaceholder(s),p=s.cssClip(),f={clip:t.extend({},p)},g={clip:t.extend({},p)},m=[p[c[0]],p[c[1]]],_=s.queue().length;h&&(r=parseInt(h[1],10)/100*m[a?0:1]),f.clip[c[0]]=r,g.clip[c[0]]=r,g.clip[c[1]]=0,o&&(s.cssClip(g.clip),d&&d.css(t.effects.clipToBox(g)),g.clip=p),s.queue(function(i){d&&d.animate(t.effects.clipToBox(f),u,e.easing).animate(t.effects.clipToBox(g),u,e.easing),i()}).animate(f,u,e.easing).animate(g,u,e.easing).queue(i),t.effects.unshift(s,_,4)}),t.effects.define("highlight","show",function(e,i){var s=t(this),n={backgroundColor:s.css("backgroundColor")};"hide"===e.mode&&(n.opacity=0),t.effects.saveStyle(s),s.css({backgroundImage:"none",backgroundColor:e.color||"#ffff99"}).animate(n,{queue:!1,duration:e.duration,easing:e.easing,complete:i})}),t.effects.define("size",function(e,i){var s,n,o,a=t(this),r=["fontSize"],h=["borderTopWidth","borderBottomWidth","paddingTop","paddingBottom"],l=["borderLeftWidth","borderRightWidth","paddingLeft","paddingRight"],c=e.mode,u="effect"!==c,d=e.scale||"both",p=e.origin||["middle","center"],f=a.css("position"),g=a.position(),m=t.effects.scaledDimensions(a),_=e.from||m,v=e.to||t.effects.scaledDimensions(a,0);t.effects.createPlaceholder(a),"show"===c&&(o=_,_=v,v=o),n={from:{y:_.height/m.height,x:_.width/m.width},to:{y:v.height/m.height,x:v.width/m.width}},("box"===d||"both"===d)&&(n.from.y!==n.to.y&&(_=t.effects.setTransition(a,h,n.from.y,_),v=t.effects.setTransition(a,h,n.to.y,v)),n.from.x!==n.to.x&&(_=t.effects.setTransition(a,l,n.from.x,_),v=t.effects.setTransition(a,l,n.to.x,v))),("content"===d||"both"===d)&&n.from.y!==n.to.y&&(_=t.effects.setTransition(a,r,n.from.y,_),v=t.effects.setTransition(a,r,n.to.y,v)),p&&(s=t.effects.getBaseline(p,m),_.top=(m.outerHeight-_.outerHeight)*s.y+g.top,_.left=(m.outerWidth-_.outerWidth)*s.x+g.left,v.top=(m.outerHeight-v.outerHeight)*s.y+g.top,v.left=(m.outerWidth-v.outerWidth)*s.x+g.left),a.css(_),("content"===d||"both"===d)&&(h=h.concat(["marginTop","marginBottom"]).concat(r),l=l.concat(["marginLeft","marginRight"]),a.find("*[width]").each(function(){var i=t(this),s=t.effects.scaledDimensions(i),o={height:s.height*n.from.y,width:s.width*n.from.x,outerHeight:s.outerHeight*n.from.y,outerWidth:s.outerWidth*n.from.x},a={height:s.height*n.to.y,width:s.width*n.to.x,outerHeight:s.height*n.to.y,outerWidth:s.width*n.to.x};n.from.y!==n.to.y&&(o=t.effects.setTransition(i,h,n.from.y,o),a=t.effects.setTransition(i,h,n.to.y,a)),n.from.x!==n.to.x&&(o=t.effects.setTransition(i,l,n.from.x,o),a=t.effects.setTransition(i,l,n.to.x,a)),u&&t.effects.saveStyle(i),i.css(o),i.animate(a,e.duration,e.easing,function(){u&&t.effects.restoreStyle(i)})})),a.animate(v,{queue:!1,duration:e.duration,easing:e.easing,complete:function(){var e=a.offset();0===v.opacity&&a.css("opacity",_.opacity),u||(a.css("position","static"===f?"relative":f).offset(e),t.effects.saveStyle(a)),i()}})}),t.effects.define("scale",function(e,i){var s=t(this),n=e.mode,o=parseInt(e.percent,10)||(0===parseInt(e.percent,10)?0:"effect"!==n?0:100),a=t.extend(!0,{from:t.effects.scaledDimensions(s),to:t.effects.scaledDimensions(s,o,e.direction||"both"),origin:e.origin||["middle","center"]},e);e.fade&&(a.from.opacity=1,a.to.opacity=0),t.effects.effect.size.call(this,a,i)}),t.effects.define("puff","hide",function(e,i){var s=t.extend(!0,{},e,{fade:!0,percent:parseInt(e.percent,10)||150});t.effects.effect.scale.call(this,s,i)}),t.effects.define("pulsate","show",function(e,i){var s=t(this),n=e.mode,o="show"===n,a="hide"===n,r=o||a,h=2*(e.times||5)+(r?1:0),l=e.duration/h,c=0,u=1,d=s.queue().length;for((o||!s.is(":visible"))&&(s.css("opacity",0).show(),c=1);h>u;u++)s.animate({opacity:c},l,e.easing),c=1-c;s.animate({opacity:c},l,e.easing),s.queue(i),t.effects.unshift(s,d,h+1)}),t.effects.define("shake",function(e,i){var s=1,n=t(this),o=e.direction||"left",a=e.distance||20,r=e.times||3,h=2*r+1,l=Math.round(e.duration/h),c="up"===o||"down"===o?"top":"left",u="up"===o||"left"===o,d={},p={},f={},g=n.queue().length;for(t.effects.createPlaceholder(n),d[c]=(u?"-=":"+=")+a,p[c]=(u?"+=":"-=")+2*a,f[c]=(u?"-=":"+=")+2*a,n.animate(d,l,e.easing);r>s;s++)n.animate(p,l,e.easing).animate(f,l,e.easing);n.animate(p,l,e.easing).animate(d,l/2,e.easing).queue(i),t.effects.unshift(n,g,h+1)}),t.effects.define("slide","show",function(e,i){var s,n,o=t(this),a={up:["bottom","top"],down:["top","bottom"],left:["right","left"],right:["left","right"]},r=e.mode,h=e.direction||"left",l="up"===h||"down"===h?"top":"left",c="up"===h||"left"===h,u=e.distance||o["top"===l?"outerHeight":"outerWidth"](!0),d={};t.effects.createPlaceholder(o),s=o.cssClip(),n=o.position()[l],d[l]=(c?-1:1)*u+n,d.clip=o.cssClip(),d.clip[a[h][1]]=d.clip[a[h][0]],"show"===r&&(o.cssClip(d.clip),o.css(l,d[l]),d.clip=s,d[l]=n),o.animate(d,{queue:!1,duration:e.duration,easing:e.easing,complete:i})});var f;t.uiBackCompat!==!1&&(f=t.effects.define("transfer",function(e,i){t(this).transfer(e,i)})),t.ui.focusable=function(i,s){var n,o,a,r,h,l=i.nodeName.toLowerCase();return"area"===l?(n=i.parentNode,o=n.name,i.href&&o&&"map"===n.nodeName.toLowerCase()?(a=t("img[usemap='#"+o+"']"),a.length>0&&a.is(":visible")):!1):(/^(input|select|textarea|button|object)$/.test(l)?(r=!i.disabled,r&&(h=t(i).closest("fieldset")[0],h&&(r=!h.disabled))):r="a"===l?i.href||s:s,r&&t(i).is(":visible")&&e(t(i)))},t.extend(t.expr[":"],{focusable:function(e){return t.ui.focusable(e,null!=t.attr(e,"tabindex"))}}),t.ui.focusable,t.fn.form=function(){return"string"==typeof this[0].form?this.closest("form"):t(this[0].form)},t.ui.formResetMixin={_formResetHandler:function(){var e=t(this);setTimeout(function(){var i=e.data("ui-form-reset-instances");t.each(i,function(){this.refresh()})})},_bindFormResetHandler:function(){if(this.form=this.element.form(),this.form.length){var t=this.form.data("ui-form-reset-instances")||[];t.length||this.form.on("reset.ui-form-reset",this._formResetHandler),t.push(this),this.form.data("ui-form-reset-instances",t)}},_unbindFormResetHandler:function(){if(this.form.length){var e=this.form.data("ui-form-reset-instances");e.splice(t.inArray(this,e),1),e.length?this.form.data("ui-form-reset-instances",e):this.form.removeData("ui-form-reset-instances").off("reset.ui-form-reset")}}},"1.7"===t.fn.jquery.substring(0,3)&&(t.each(["Width","Height"],function(e,i){function s(e,i,s,o){return t.each(n,function(){i-=parseFloat(t.css(e,"padding"+this))||0,s&&(i-=parseFloat(t.css(e,"border"+this+"Width"))||0),o&&(i-=parseFloat(t.css(e,"margin"+this))||0)}),i}var n="Width"===i?["Left","Right"]:["Top","Bottom"],o=i.toLowerCase(),a={innerWidth:t.fn.innerWidth,innerHeight:t.fn.innerHeight,outerWidth:t.fn.outerWidth,outerHeight:t.fn.outerHeight};t.fn["inner"+i]=function(e){return void 0===e?a["inner"+i].call(this):this.each(function(){t(this).css(o,s(this,e)+"px")})},t.fn["outer"+i]=function(e,n){return"number"!=typeof e?a["outer"+i].call(this,e):this.each(function(){t(this).css(o,s(this,e,!0,n)+"px")})}}),t.fn.addBack=function(t){return this.add(null==t?this.prevObject:this.prevObject.filter(t))}),t.ui.keyCode={BACKSPACE:8,COMMA:188,DELETE:46,DOWN:40,END:35,ENTER:13,ESCAPE:27,HOME:36,LEFT:37,PAGE_DOWN:34,PAGE_UP:33,PERIOD:190,RIGHT:39,SPACE:32,TAB:9,UP:38},t.ui.escapeSelector=function(){var t=/([!"#$%&'()*+,.\/:;<=>?@[\]^`{|}~])/g;return function(e){return e.replace(t,"\\$1")}}(),t.fn.labels=function(){var e,i,s,n,o;return this[0].labels&&this[0].labels.length?this.pushStack(this[0].labels):(n=this.eq(0).parents("label"),s=this.attr("id"),s&&(e=this.eq(0).parents().last(),o=e.add(e.length?e.siblings():this.siblings()),i="label[for='"+t.ui.escapeSelector(s)+"']",n=n.add(o.find(i).addBack(i))),this.pushStack(n))},t.fn.scrollParent=function(e){var i=this.css("position"),s="absolute"===i,n=e?/(auto|scroll|hidden)/:/(auto|scroll)/,o=this.parents().filter(function(){var e=t(this);return s&&"static"===e.css("position")?!1:n.test(e.css("overflow")+e.css("overflow-y")+e.css("overflow-x"))}).eq(0);return"fixed"!==i&&o.length?o:t(this[0].ownerDocument||document)},t.extend(t.expr[":"],{tabbable:function(e){var i=t.attr(e,"tabindex"),s=null!=i;return(!s||i>=0)&&t.ui.focusable(e,s)}}),t.fn.extend({uniqueId:function(){var t=0;return function(){return this.each(function(){this.id||(this.id="ui-id-"+ ++t)})}}(),removeUniqueId:function(){return this.each(function(){/^ui-id-\d+$/.test(this.id)&&t(this).removeAttr("id")})}}),t.widget("ui.accordion",{version:"1.12.1",options:{active:0,animate:{},classes:{"ui-accordion-header":"ui-corner-top","ui-accordion-header-collapsed":"ui-corner-all","ui-accordion-content":"ui-corner-bottom"},collapsible:!1,event:"click",header:"> li > :first-child, > :not(li):even",heightStyle:"auto",icons:{activeHeader:"ui-icon-triangle-1-s",header:"ui-icon-triangle-1-e"},activate:null,beforeActivate:null},hideProps:{borderTopWidth:"hide",borderBottomWidth:"hide",paddingTop:"hide",paddingBottom:"hide",height:"hide"},showProps:{borderTopWidth:"show",borderBottomWidth:"show",paddingTop:"show",paddingBottom:"show",height:"show"},_create:function(){var e=this.options;this.prevShow=this.prevHide=t(),this._addClass("ui-accordion","ui-widget ui-helper-reset"),this.element.attr("role","tablist"),e.collapsible||e.active!==!1&&null!=e.active||(e.active=0),this._processPanels(),0>e.active&&(e.active+=this.headers.length),this._refresh()},_getCreateEventData:function(){return{header:this.active,panel:this.active.length?this.active.next():t()}},_createIcons:function(){var e,i,s=this.options.icons;s&&(e=t("<span>"),this._addClass(e,"ui-accordion-header-icon","ui-icon "+s.header),e.prependTo(this.headers),i=this.active.children(".ui-accordion-header-icon"),this._removeClass(i,s.header)._addClass(i,null,s.activeHeader)._addClass(this.headers,"ui-accordion-icons"))},_destroyIcons:function(){this._removeClass(this.headers,"ui-accordion-icons"),this.headers.children(".ui-accordion-header-icon").remove()},_destroy:function(){var t;this.element.removeAttr("role"),this.headers.removeAttr("role aria-expanded aria-selected aria-controls tabIndex").removeUniqueId(),this._destroyIcons(),t=this.headers.next().css("display","").removeAttr("role aria-hidden aria-labelledby").removeUniqueId(),"content"!==this.options.heightStyle&&t.css("height","")},_setOption:function(t,e){return"active"===t?(this._activate(e),void 0):("event"===t&&(this.options.event&&this._off(this.headers,this.options.event),this._setupEvents(e)),this._super(t,e),"collapsible"!==t||e||this.options.active!==!1||this._activate(0),"icons"===t&&(this._destroyIcons(),e&&this._createIcons()),void 0)},_setOptionDisabled:function(t){this._super(t),this.element.attr("aria-disabled",t),this._toggleClass(null,"ui-state-disabled",!!t),this._toggleClass(this.headers.add(this.headers.next()),null,"ui-state-disabled",!!t)},_keydown:function(e){if(!e.altKey&&!e.ctrlKey){var i=t.ui.keyCode,s=this.headers.length,n=this.headers.index(e.target),o=!1;switch(e.keyCode){case i.RIGHT:case i.DOWN:o=this.headers[(n+1)%s];break;case i.LEFT:case i.UP:o=this.headers[(n-1+s)%s];break;case i.SPACE:case i.ENTER:this._eventHandler(e);break;case i.HOME:o=this.headers[0];break;case i.END:o=this.headers[s-1]}o&&(t(e.target).attr("tabIndex",-1),t(o).attr("tabIndex",0),t(o).trigger("focus"),e.preventDefault())}},_panelKeyDown:function(e){e.keyCode===t.ui.keyCode.UP&&e.ctrlKey&&t(e.currentTarget).prev().trigger("focus")},refresh:function(){var e=this.options;this._processPanels(),e.active===!1&&e.collapsible===!0||!this.headers.length?(e.active=!1,this.active=t()):e.active===!1?this._activate(0):this.active.length&&!t.contains(this.element[0],this.active[0])?this.headers.length===this.headers.find(".ui-state-disabled").length?(e.active=!1,this.active=t()):this._activate(Math.max(0,e.active-1)):e.active=this.headers.index(this.active),this._destroyIcons(),this._refresh()},_processPanels:function(){var t=this.headers,e=this.panels;this.headers=this.element.find(this.options.header),this._addClass(this.headers,"ui-accordion-header ui-accordion-header-collapsed","ui-state-default"),this.panels=this.headers.next().filter(":not(.ui-accordion-content-active)").hide(),this._addClass(this.panels,"ui-accordion-content","ui-helper-reset ui-widget-content"),e&&(this._off(t.not(this.headers)),this._off(e.not(this.panels)))},_refresh:function(){var e,i=this.options,s=i.heightStyle,n=this.element.parent();this.active=this._findActive(i.active),this._addClass(this.active,"ui-accordion-header-active","ui-state-active")._removeClass(this.active,"ui-accordion-header-collapsed"),this._addClass(this.active.next(),"ui-accordion-content-active"),this.active.next().show(),this.headers.attr("role","tab").each(function(){var e=t(this),i=e.uniqueId().attr("id"),s=e.next(),n=s.uniqueId().attr("id");e.attr("aria-controls",n),s.attr("aria-labelledby",i)}).next().attr("role","tabpanel"),this.headers.not(this.active).attr({"aria-selected":"false","aria-expanded":"false",tabIndex:-1}).next().attr({"aria-hidden":"true"}).hide(),this.active.length?this.active.attr({"aria-selected":"true","aria-expanded":"true",tabIndex:0}).next().attr({"aria-hidden":"false"}):this.headers.eq(0).attr("tabIndex",0),this._createIcons(),this._setupEvents(i.event),"fill"===s?(e=n.height(),this.element.siblings(":visible").each(function(){var i=t(this),s=i.css("position");"absolute"!==s&&"fixed"!==s&&(e-=i.outerHeight(!0))}),this.headers.each(function(){e-=t(this).outerHeight(!0)}),this.headers.next().each(function(){t(this).height(Math.max(0,e-t(this).innerHeight()+t(this).height()))}).css("overflow","auto")):"auto"===s&&(e=0,this.headers.next().each(function(){var i=t(this).is(":visible");i||t(this).show(),e=Math.max(e,t(this).css("height","").height()),i||t(this).hide()}).height(e))},_activate:function(e){var i=this._findActive(e)[0];i!==this.active[0]&&(i=i||this.active[0],this._eventHandler({target:i,currentTarget:i,preventDefault:t.noop}))},_findActive:function(e){return"number"==typeof e?this.headers.eq(e):t()},_setupEvents:function(e){var i={keydown:"_keydown"};e&&t.each(e.split(" "),function(t,e){i[e]="_eventHandler"}),this._off(this.headers.add(this.headers.next())),this._on(this.headers,i),this._on(this.headers.next(),{keydown:"_panelKeyDown"}),this._hoverable(this.headers),this._focusable(this.headers)},_eventHandler:function(e){var i,s,n=this.options,o=this.active,a=t(e.currentTarget),r=a[0]===o[0],h=r&&n.collapsible,l=h?t():a.next(),c=o.next(),u={oldHeader:o,oldPanel:c,newHeader:h?t():a,newPanel:l};e.preventDefault(),r&&!n.collapsible||this._trigger("beforeActivate",e,u)===!1||(n.active=h?!1:this.headers.index(a),this.active=r?t():a,this._toggle(u),this._removeClass(o,"ui-accordion-header-active","ui-state-active"),n.icons&&(i=o.children(".ui-accordion-header-icon"),this._removeClass(i,null,n.icons.activeHeader)._addClass(i,null,n.icons.header)),r||(this._removeClass(a,"ui-accordion-header-collapsed")._addClass(a,"ui-accordion-header-active","ui-state-active"),n.icons&&(s=a.children(".ui-accordion-header-icon"),this._removeClass(s,null,n.icons.header)._addClass(s,null,n.icons.activeHeader)),this._addClass(a.next(),"ui-accordion-content-active")))},_toggle:function(e){var i=e.newPanel,s=this.prevShow.length?this.prevShow:e.oldPanel;this.prevShow.add(this.prevHide).stop(!0,!0),this.prevShow=i,this.prevHide=s,this.options.animate?this._animate(i,s,e):(s.hide(),i.show(),this._toggleComplete(e)),s.attr({"aria-hidden":"true"}),s.prev().attr({"aria-selected":"false","aria-expanded":"false"}),i.length&&s.length?s.prev().attr({tabIndex:-1,"aria-expanded":"false"}):i.length&&this.headers.filter(function(){return 0===parseInt(t(this).attr("tabIndex"),10)}).attr("tabIndex",-1),i.attr("aria-hidden","false").prev().attr({"aria-selected":"true","aria-expanded":"true",tabIndex:0})},_animate:function(t,e,i){var s,n,o,a=this,r=0,h=t.css("box-sizing"),l=t.length&&(!e.length||t.index()<e.index()),c=this.options.animate||{},u=l&&c.down||c,d=function(){a._toggleComplete(i)};return"number"==typeof u&&(o=u),"string"==typeof u&&(n=u),n=n||u.easing||c.easing,o=o||u.duration||c.duration,e.length?t.length?(s=t.show().outerHeight(),e.animate(this.hideProps,{duration:o,easing:n,step:function(t,e){e.now=Math.round(t)}}),t.hide().animate(this.showProps,{duration:o,easing:n,complete:d,step:function(t,i){i.now=Math.round(t),"height"!==i.prop?"content-box"===h&&(r+=i.now):"content"!==a.options.heightStyle&&(i.now=Math.round(s-e.outerHeight()-r),r=0)}}),void 0):e.animate(this.hideProps,o,n,d):t.animate(this.showProps,o,n,d)},_toggleComplete:function(t){var e=t.oldPanel,i=e.prev();this._removeClass(e,"ui-accordion-content-active"),this._removeClass(i,"ui-accordion-header-active")._addClass(i,"ui-accordion-header-collapsed"),e.length&&(e.parent()[0].className=e.parent()[0].className),this._trigger("activate",null,t)}}),t.ui.safeActiveElement=function(t){var e;try{e=t.activeElement}catch(i){e=t.body}return e||(e=t.body),e.nodeName||(e=t.body),e},t.widget("ui.menu",{version:"1.12.1",defaultElement:"<ul>",delay:300,options:{icons:{submenu:"ui-icon-caret-1-e"},items:"> *",menus:"ul",position:{my:"left top",at:"right top"},role:"menu",blur:null,focus:null,select:null},_create:function(){this.activeMenu=this.element,this.mouseHandled=!1,this.element.uniqueId().attr({role:this.options.role,tabIndex:0}),this._addClass("ui-menu","ui-widget ui-widget-content"),this._on({"mousedown .ui-menu-item":function(t){t.preventDefault()},"click .ui-menu-item":function(e){var i=t(e.target),s=t(t.ui.safeActiveElement(this.document[0]));!this.mouseHandled&&i.not(".ui-state-disabled").length&&(this.select(e),e.isPropagationStopped()||(this.mouseHandled=!0),i.has(".ui-menu").length?this.expand(e):!this.element.is(":focus")&&s.closest(".ui-menu").length&&(this.element.trigger("focus",[!0]),this.active&&1===this.active.parents(".ui-menu").length&&clearTimeout(this.timer)))},"mouseenter .ui-menu-item":function(e){if(!this.previousFilter){var i=t(e.target).closest(".ui-menu-item"),s=t(e.currentTarget);i[0]===s[0]&&(this._removeClass(s.siblings().children(".ui-state-active"),null,"ui-state-active"),this.focus(e,s))}},mouseleave:"collapseAll","mouseleave .ui-menu":"collapseAll",focus:function(t,e){var i=this.active||this.element.find(this.options.items).eq(0);e||this.focus(t,i)},blur:function(e){this._delay(function(){var i=!t.contains(this.element[0],t.ui.safeActiveElement(this.document[0]));i&&this.collapseAll(e)})},keydown:"_keydown"}),this.refresh(),this._on(this.document,{click:function(t){this._closeOnDocumentClick(t)&&this.collapseAll(t),this.mouseHandled=!1}})},_destroy:function(){var e=this.element.find(".ui-menu-item").removeAttr("role aria-disabled"),i=e.children(".ui-menu-item-wrapper").removeUniqueId().removeAttr("tabIndex role aria-haspopup");this.element.removeAttr("aria-activedescendant").find(".ui-menu").addBack().removeAttr("role aria-labelledby aria-expanded aria-hidden aria-disabled tabIndex").removeUniqueId().show(),i.children().each(function(){var e=t(this);e.data("ui-menu-submenu-caret")&&e.remove()})},_keydown:function(e){var i,s,n,o,a=!0;switch(e.keyCode){case t.ui.keyCode.PAGE_UP:this.previousPage(e);break;case t.ui.keyCode.PAGE_DOWN:this.nextPage(e);break;case t.ui.keyCode.HOME:this._move("first","first",e);break;case t.ui.keyCode.END:this._move("last","last",e);break;case t.ui.keyCode.UP:this.previous(e);break;case t.ui.keyCode.DOWN:this.next(e);break;case t.ui.keyCode.LEFT:this.collapse(e);break;case t.ui.keyCode.RIGHT:this.active&&!this.active.is(".ui-state-disabled")&&this.expand(e);break;case t.ui.keyCode.ENTER:case t.ui.keyCode.SPACE:this._activate(e);break;case t.ui.keyCode.ESCAPE:this.collapse(e);break;default:a=!1,s=this.previousFilter||"",o=!1,n=e.keyCode>=96&&105>=e.keyCode?""+(e.keyCode-96):String.fromCharCode(e.keyCode),clearTimeout(this.filterTimer),n===s?o=!0:n=s+n,i=this._filterMenuItems(n),i=o&&-1!==i.index(this.active.next())?this.active.nextAll(".ui-menu-item"):i,i.length||(n=String.fromCharCode(e.keyCode),i=this._filterMenuItems(n)),i.length?(this.focus(e,i),this.previousFilter=n,this.filterTimer=this._delay(function(){delete this.previousFilter},1e3)):delete this.previousFilter}a&&e.preventDefault()},_activate:function(t){this.active&&!this.active.is(".ui-state-disabled")&&(this.active.children("[aria-haspopup='true']").length?this.expand(t):this.select(t))},refresh:function(){var e,i,s,n,o,a=this,r=this.options.icons.submenu,h=this.element.find(this.options.menus);this._toggleClass("ui-menu-icons",null,!!this.element.find(".ui-icon").length),s=h.filter(":not(.ui-menu)").hide().attr({role:this.options.role,"aria-hidden":"true","aria-expanded":"false"}).each(function(){var e=t(this),i=e.prev(),s=t("<span>").data("ui-menu-submenu-caret",!0);a._addClass(s,"ui-menu-icon","ui-icon "+r),i.attr("aria-haspopup","true").prepend(s),e.attr("aria-labelledby",i.attr("id"))}),this._addClass(s,"ui-menu","ui-widget ui-widget-content ui-front"),e=h.add(this.element),i=e.find(this.options.items),i.not(".ui-menu-item").each(function(){var e=t(this);a._isDivider(e)&&a._addClass(e,"ui-menu-divider","ui-widget-content")}),n=i.not(".ui-menu-item, .ui-menu-divider"),o=n.children().not(".ui-menu").uniqueId().attr({tabIndex:-1,role:this._itemRole()}),this._addClass(n,"ui-menu-item")._addClass(o,"ui-menu-item-wrapper"),i.filter(".ui-state-disabled").attr("aria-disabled","true"),this.active&&!t.contains(this.element[0],this.active[0])&&this.blur()},_itemRole:function(){return{menu:"menuitem",listbox:"option"}[this.options.role]},_setOption:function(t,e){if("icons"===t){var i=this.element.find(".ui-menu-icon");this._removeClass(i,null,this.options.icons.submenu)._addClass(i,null,e.submenu)}this._super(t,e)},_setOptionDisabled:function(t){this._super(t),this.element.attr("aria-disabled",t+""),this._toggleClass(null,"ui-state-disabled",!!t)},focus:function(t,e){var i,s,n;this.blur(t,t&&"focus"===t.type),this._scrollIntoView(e),this.active=e.first(),s=this.active.children(".ui-menu-item-wrapper"),this._addClass(s,null,"ui-state-active"),this.options.role&&this.element.attr("aria-activedescendant",s.attr("id")),n=this.active.parent().closest(".ui-menu-item").children(".ui-menu-item-wrapper"),this._addClass(n,null,"ui-state-active"),t&&"keydown"===t.type?this._close():this.timer=this._delay(function(){this._close()},this.delay),i=e.children(".ui-menu"),i.length&&t&&/^mouse/.test(t.type)&&this._startOpening(i),this.activeMenu=e.parent(),this._trigger("focus",t,{item:e})},_scrollIntoView:function(e){var i,s,n,o,a,r;this._hasScroll()&&(i=parseFloat(t.css(this.activeMenu[0],"borderTopWidth"))||0,s=parseFloat(t.css(this.activeMenu[0],"paddingTop"))||0,n=e.offset().top-this.activeMenu.offset().top-i-s,o=this.activeMenu.scrollTop(),a=this.activeMenu.height(),r=e.outerHeight(),0>n?this.activeMenu.scrollTop(o+n):n+r>a&&this.activeMenu.scrollTop(o+n-a+r))},blur:function(t,e){e||clearTimeout(this.timer),this.active&&(this._removeClass(this.active.children(".ui-menu-item-wrapper"),null,"ui-state-active"),this._trigger("blur",t,{item:this.active}),this.active=null)},_startOpening:function(t){clearTimeout(this.timer),"true"===t.attr("aria-hidden")&&(this.timer=this._delay(function(){this._close(),this._open(t)},this.delay))},_open:function(e){var i=t.extend({of:this.active},this.options.position);clearTimeout(this.timer),this.element.find(".ui-menu").not(e.parents(".ui-menu")).hide().attr("aria-hidden","true"),e.show().removeAttr("aria-hidden").attr("aria-expanded","true").position(i)},collapseAll:function(e,i){clearTimeout(this.timer),this.timer=this._delay(function(){var s=i?this.element:t(e&&e.target).closest(this.element.find(".ui-menu"));s.length||(s=this.element),this._close(s),this.blur(e),this._removeClass(s.find(".ui-state-active"),null,"ui-state-active"),this.activeMenu=s},this.delay)},_close:function(t){t||(t=this.active?this.active.parent():this.element),t.find(".ui-menu").hide().attr("aria-hidden","true").attr("aria-expanded","false")},_closeOnDocumentClick:function(e){return!t(e.target).closest(".ui-menu").length},_isDivider:function(t){return!/[^\-\u2014\u2013\s]/.test(t.text())},collapse:function(t){var e=this.active&&this.active.parent().closest(".ui-menu-item",this.element);e&&e.length&&(this._close(),this.focus(t,e))},expand:function(t){var e=this.active&&this.active.children(".ui-menu ").find(this.options.items).first();e&&e.length&&(this._open(e.parent()),this._delay(function(){this.focus(t,e)}))},next:function(t){this._move("next","first",t)},previous:function(t){this._move("prev","last",t)},isFirstItem:function(){return this.active&&!this.active.prevAll(".ui-menu-item").length},isLastItem:function(){return this.active&&!this.active.nextAll(".ui-menu-item").length},_move:function(t,e,i){var s;this.active&&(s="first"===t||"last"===t?this.active["first"===t?"prevAll":"nextAll"](".ui-menu-item").eq(-1):this.active[t+"All"](".ui-menu-item").eq(0)),s&&s.length&&this.active||(s=this.activeMenu.find(this.options.items)[e]()),this.focus(i,s)},nextPage:function(e){var i,s,n;return this.active?(this.isLastItem()||(this._hasScroll()?(s=this.active.offset().top,n=this.element.height(),this.active.nextAll(".ui-menu-item").each(function(){return i=t(this),0>i.offset().top-s-n}),this.focus(e,i)):this.focus(e,this.activeMenu.find(this.options.items)[this.active?"last":"first"]())),void 0):(this.next(e),void 0)},previousPage:function(e){var i,s,n;return this.active?(this.isFirstItem()||(this._hasScroll()?(s=this.active.offset().top,n=this.element.height(),this.active.prevAll(".ui-menu-item").each(function(){return i=t(this),i.offset().top-s+n>0}),this.focus(e,i)):this.focus(e,this.activeMenu.find(this.options.items).first())),void 0):(this.next(e),void 0)},_hasScroll:function(){return this.element.outerHeight()<this.element.prop("scrollHeight")},select:function(e){this.active=this.active||t(e.target).closest(".ui-menu-item");var i={item:this.active};this.active.has(".ui-menu").length||this.collapseAll(e,!0),this._trigger("select",e,i)},_filterMenuItems:function(e){var i=e.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g,"\\$&"),s=RegExp("^"+i,"i");return this.activeMenu.find(this.options.items).filter(".ui-menu-item").filter(function(){return s.test(t.trim(t(this).children(".ui-menu-item-wrapper").text()))})}}),t.widget("ui.autocomplete",{version:"1.12.1",defaultElement:"<input>",options:{appendTo:null,autoFocus:!1,delay:300,minLength:1,position:{my:"left top",at:"left bottom",collision:"none"},source:null,change:null,close:null,focus:null,open:null,response:null,search:null,select:null},requestIndex:0,pending:0,_create:function(){var e,i,s,n=this.element[0].nodeName.toLowerCase(),o="textarea"===n,a="input"===n;
this.isMultiLine=o||!a&&this._isContentEditable(this.element),this.valueMethod=this.element[o||a?"val":"text"],this.isNewMenu=!0,this._addClass("ui-autocomplete-input"),this.element.attr("autocomplete","off"),this._on(this.element,{keydown:function(n){if(this.element.prop("readOnly"))return e=!0,s=!0,i=!0,void 0;e=!1,s=!1,i=!1;var o=t.ui.keyCode;switch(n.keyCode){case o.PAGE_UP:e=!0,this._move("previousPage",n);break;case o.PAGE_DOWN:e=!0,this._move("nextPage",n);break;case o.UP:e=!0,this._keyEvent("previous",n);break;case o.DOWN:e=!0,this._keyEvent("next",n);break;case o.ENTER:this.menu.active&&(e=!0,n.preventDefault(),this.menu.select(n));break;case o.TAB:this.menu.active&&this.menu.select(n);break;case o.ESCAPE:this.menu.element.is(":visible")&&(this.isMultiLine||this._value(this.term),this.close(n),n.preventDefault());break;default:i=!0,this._searchTimeout(n)}},keypress:function(s){if(e)return e=!1,(!this.isMultiLine||this.menu.element.is(":visible"))&&s.preventDefault(),void 0;if(!i){var n=t.ui.keyCode;switch(s.keyCode){case n.PAGE_UP:this._move("previousPage",s);break;case n.PAGE_DOWN:this._move("nextPage",s);break;case n.UP:this._keyEvent("previous",s);break;case n.DOWN:this._keyEvent("next",s)}}},input:function(t){return s?(s=!1,t.preventDefault(),void 0):(this._searchTimeout(t),void 0)},focus:function(){this.selectedItem=null,this.previous=this._value()},blur:function(t){return this.cancelBlur?(delete this.cancelBlur,void 0):(clearTimeout(this.searching),this.close(t),this._change(t),void 0)}}),this._initSource(),this.menu=t("<ul>").appendTo(this._appendTo()).menu({role:null}).hide().menu("instance"),this._addClass(this.menu.element,"ui-autocomplete","ui-front"),this._on(this.menu.element,{mousedown:function(e){e.preventDefault(),this.cancelBlur=!0,this._delay(function(){delete this.cancelBlur,this.element[0]!==t.ui.safeActiveElement(this.document[0])&&this.element.trigger("focus")})},menufocus:function(e,i){var s,n;return this.isNewMenu&&(this.isNewMenu=!1,e.originalEvent&&/^mouse/.test(e.originalEvent.type))?(this.menu.blur(),this.document.one("mousemove",function(){t(e.target).trigger(e.originalEvent)}),void 0):(n=i.item.data("ui-autocomplete-item"),!1!==this._trigger("focus",e,{item:n})&&e.originalEvent&&/^key/.test(e.originalEvent.type)&&this._value(n.value),s=i.item.attr("aria-label")||n.value,s&&t.trim(s).length&&(this.liveRegion.children().hide(),t("<div>").text(s).appendTo(this.liveRegion)),void 0)},menuselect:function(e,i){var s=i.item.data("ui-autocomplete-item"),n=this.previous;this.element[0]!==t.ui.safeActiveElement(this.document[0])&&(this.element.trigger("focus"),this.previous=n,this._delay(function(){this.previous=n,this.selectedItem=s})),!1!==this._trigger("select",e,{item:s})&&this._value(s.value),this.term=this._value(),this.close(e),this.selectedItem=s}}),this.liveRegion=t("<div>",{role:"status","aria-live":"assertive","aria-relevant":"additions"}).appendTo(this.document[0].body),this._addClass(this.liveRegion,null,"ui-helper-hidden-accessible"),this._on(this.window,{beforeunload:function(){this.element.removeAttr("autocomplete")}})},_destroy:function(){clearTimeout(this.searching),this.element.removeAttr("autocomplete"),this.menu.element.remove(),this.liveRegion.remove()},_setOption:function(t,e){this._super(t,e),"source"===t&&this._initSource(),"appendTo"===t&&this.menu.element.appendTo(this._appendTo()),"disabled"===t&&e&&this.xhr&&this.xhr.abort()},_isEventTargetInWidget:function(e){var i=this.menu.element[0];return e.target===this.element[0]||e.target===i||t.contains(i,e.target)},_closeOnClickOutside:function(t){this._isEventTargetInWidget(t)||this.close()},_appendTo:function(){var e=this.options.appendTo;return e&&(e=e.jquery||e.nodeType?t(e):this.document.find(e).eq(0)),e&&e[0]||(e=this.element.closest(".ui-front, dialog")),e.length||(e=this.document[0].body),e},_initSource:function(){var e,i,s=this;t.isArray(this.options.source)?(e=this.options.source,this.source=function(i,s){s(t.ui.autocomplete.filter(e,i.term))}):"string"==typeof this.options.source?(i=this.options.source,this.source=function(e,n){s.xhr&&s.xhr.abort(),s.xhr=t.ajax({url:i,data:e,dataType:"json",success:function(t){n(t)},error:function(){n([])}})}):this.source=this.options.source},_searchTimeout:function(t){clearTimeout(this.searching),this.searching=this._delay(function(){var e=this.term===this._value(),i=this.menu.element.is(":visible"),s=t.altKey||t.ctrlKey||t.metaKey||t.shiftKey;(!e||e&&!i&&!s)&&(this.selectedItem=null,this.search(null,t))},this.options.delay)},search:function(t,e){return t=null!=t?t:this._value(),this.term=this._value(),t.length<this.options.minLength?this.close(e):this._trigger("search",e)!==!1?this._search(t):void 0},_search:function(t){this.pending++,this._addClass("ui-autocomplete-loading"),this.cancelSearch=!1,this.source({term:t},this._response())},_response:function(){var e=++this.requestIndex;return t.proxy(function(t){e===this.requestIndex&&this.__response(t),this.pending--,this.pending||this._removeClass("ui-autocomplete-loading")},this)},__response:function(t){t&&(t=this._normalize(t)),this._trigger("response",null,{content:t}),!this.options.disabled&&t&&t.length&&!this.cancelSearch?(this._suggest(t),this._trigger("open")):this._close()},close:function(t){this.cancelSearch=!0,this._close(t)},_close:function(t){this._off(this.document,"mousedown"),this.menu.element.is(":visible")&&(this.menu.element.hide(),this.menu.blur(),this.isNewMenu=!0,this._trigger("close",t))},_change:function(t){this.previous!==this._value()&&this._trigger("change",t,{item:this.selectedItem})},_normalize:function(e){return e.length&&e[0].label&&e[0].value?e:t.map(e,function(e){return"string"==typeof e?{label:e,value:e}:t.extend({},e,{label:e.label||e.value,value:e.value||e.label})})},_suggest:function(e){var i=this.menu.element.empty();this._renderMenu(i,e),this.isNewMenu=!0,this.menu.refresh(),i.show(),this._resizeMenu(),i.position(t.extend({of:this.element},this.options.position)),this.options.autoFocus&&this.menu.next(),this._on(this.document,{mousedown:"_closeOnClickOutside"})},_resizeMenu:function(){var t=this.menu.element;t.outerWidth(Math.max(t.width("").outerWidth()+1,this.element.outerWidth()))},_renderMenu:function(e,i){var s=this;t.each(i,function(t,i){s._renderItemData(e,i)})},_renderItemData:function(t,e){return this._renderItem(t,e).data("ui-autocomplete-item",e)},_renderItem:function(e,i){return t("<li>").append(t("<div>").text(i.label)).appendTo(e)},_move:function(t,e){return this.menu.element.is(":visible")?this.menu.isFirstItem()&&/^previous/.test(t)||this.menu.isLastItem()&&/^next/.test(t)?(this.isMultiLine||this._value(this.term),this.menu.blur(),void 0):(this.menu[t](e),void 0):(this.search(null,e),void 0)},widget:function(){return this.menu.element},_value:function(){return this.valueMethod.apply(this.element,arguments)},_keyEvent:function(t,e){(!this.isMultiLine||this.menu.element.is(":visible"))&&(this._move(t,e),e.preventDefault())},_isContentEditable:function(t){if(!t.length)return!1;var e=t.prop("contentEditable");return"inherit"===e?this._isContentEditable(t.parent()):"true"===e}}),t.extend(t.ui.autocomplete,{escapeRegex:function(t){return t.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g,"\\$&")},filter:function(e,i){var s=RegExp(t.ui.autocomplete.escapeRegex(i),"i");return t.grep(e,function(t){return s.test(t.label||t.value||t)})}}),t.widget("ui.autocomplete",t.ui.autocomplete,{options:{messages:{noResults:"No search results.",results:function(t){return t+(t>1?" results are":" result is")+" available, use up and down arrow keys to navigate."}}},__response:function(e){var i;this._superApply(arguments),this.options.disabled||this.cancelSearch||(i=e&&e.length?this.options.messages.results(e.length):this.options.messages.noResults,this.liveRegion.children().hide(),t("<div>").text(i).appendTo(this.liveRegion))}}),t.ui.autocomplete;var g=/ui-corner-([a-z]){2,6}/g;t.widget("ui.controlgroup",{version:"1.12.1",defaultElement:"<div>",options:{direction:"horizontal",disabled:null,onlyVisible:!0,items:{button:"input[type=button], input[type=submit], input[type=reset], button, a",controlgroupLabel:".ui-controlgroup-label",checkboxradio:"input[type='checkbox'], input[type='radio']",selectmenu:"select",spinner:".ui-spinner-input"}},_create:function(){this._enhance()},_enhance:function(){this.element.attr("role","toolbar"),this.refresh()},_destroy:function(){this._callChildMethod("destroy"),this.childWidgets.removeData("ui-controlgroup-data"),this.element.removeAttr("role"),this.options.items.controlgroupLabel&&this.element.find(this.options.items.controlgroupLabel).find(".ui-controlgroup-label-contents").contents().unwrap()},_initWidgets:function(){var e=this,i=[];t.each(this.options.items,function(s,n){var o,a={};return n?"controlgroupLabel"===s?(o=e.element.find(n),o.each(function(){var e=t(this);e.children(".ui-controlgroup-label-contents").length||e.contents().wrapAll("<span class='ui-controlgroup-label-contents'></span>")}),e._addClass(o,null,"ui-widget ui-widget-content ui-state-default"),i=i.concat(o.get()),void 0):(t.fn[s]&&(a=e["_"+s+"Options"]?e["_"+s+"Options"]("middle"):{classes:{}},e.element.find(n).each(function(){var n=t(this),o=n[s]("instance"),r=t.widget.extend({},a);if("button"!==s||!n.parent(".ui-spinner").length){o||(o=n[s]()[s]("instance")),o&&(r.classes=e._resolveClassesValues(r.classes,o)),n[s](r);var h=n[s]("widget");t.data(h[0],"ui-controlgroup-data",o?o:n[s]("instance")),i.push(h[0])}})),void 0):void 0}),this.childWidgets=t(t.unique(i)),this._addClass(this.childWidgets,"ui-controlgroup-item")},_callChildMethod:function(e){this.childWidgets.each(function(){var i=t(this),s=i.data("ui-controlgroup-data");s&&s[e]&&s[e]()})},_updateCornerClass:function(t,e){var i="ui-corner-top ui-corner-bottom ui-corner-left ui-corner-right ui-corner-all",s=this._buildSimpleOptions(e,"label").classes.label;this._removeClass(t,null,i),this._addClass(t,null,s)},_buildSimpleOptions:function(t,e){var i="vertical"===this.options.direction,s={classes:{}};return s.classes[e]={middle:"",first:"ui-corner-"+(i?"top":"left"),last:"ui-corner-"+(i?"bottom":"right"),only:"ui-corner-all"}[t],s},_spinnerOptions:function(t){var e=this._buildSimpleOptions(t,"ui-spinner");return e.classes["ui-spinner-up"]="",e.classes["ui-spinner-down"]="",e},_buttonOptions:function(t){return this._buildSimpleOptions(t,"ui-button")},_checkboxradioOptions:function(t){return this._buildSimpleOptions(t,"ui-checkboxradio-label")},_selectmenuOptions:function(t){var e="vertical"===this.options.direction;return{width:e?"auto":!1,classes:{middle:{"ui-selectmenu-button-open":"","ui-selectmenu-button-closed":""},first:{"ui-selectmenu-button-open":"ui-corner-"+(e?"top":"tl"),"ui-selectmenu-button-closed":"ui-corner-"+(e?"top":"left")},last:{"ui-selectmenu-button-open":e?"":"ui-corner-tr","ui-selectmenu-button-closed":"ui-corner-"+(e?"bottom":"right")},only:{"ui-selectmenu-button-open":"ui-corner-top","ui-selectmenu-button-closed":"ui-corner-all"}}[t]}},_resolveClassesValues:function(e,i){var s={};return t.each(e,function(n){var o=i.options.classes[n]||"";o=t.trim(o.replace(g,"")),s[n]=(o+" "+e[n]).replace(/\s+/g," ")}),s},_setOption:function(t,e){return"direction"===t&&this._removeClass("ui-controlgroup-"+this.options.direction),this._super(t,e),"disabled"===t?(this._callChildMethod(e?"disable":"enable"),void 0):(this.refresh(),void 0)},refresh:function(){var e,i=this;this._addClass("ui-controlgroup ui-controlgroup-"+this.options.direction),"horizontal"===this.options.direction&&this._addClass(null,"ui-helper-clearfix"),this._initWidgets(),e=this.childWidgets,this.options.onlyVisible&&(e=e.filter(":visible")),e.length&&(t.each(["first","last"],function(t,s){var n=e[s]().data("ui-controlgroup-data");if(n&&i["_"+n.widgetName+"Options"]){var o=i["_"+n.widgetName+"Options"](1===e.length?"only":s);o.classes=i._resolveClassesValues(o.classes,n),n.element[n.widgetName](o)}else i._updateCornerClass(e[s](),s)}),this._callChildMethod("refresh"))}}),t.widget("ui.checkboxradio",[t.ui.formResetMixin,{version:"1.12.1",options:{disabled:null,label:null,icon:!0,classes:{"ui-checkboxradio-label":"ui-corner-all","ui-checkboxradio-icon":"ui-corner-all"}},_getCreateOptions:function(){var e,i,s=this,n=this._super()||{};return this._readType(),i=this.element.labels(),this.label=t(i[i.length-1]),this.label.length||t.error("No label found for checkboxradio widget"),this.originalLabel="",this.label.contents().not(this.element[0]).each(function(){s.originalLabel+=3===this.nodeType?t(this).text():this.outerHTML}),this.originalLabel&&(n.label=this.originalLabel),e=this.element[0].disabled,null!=e&&(n.disabled=e),n},_create:function(){var t=this.element[0].checked;this._bindFormResetHandler(),null==this.options.disabled&&(this.options.disabled=this.element[0].disabled),this._setOption("disabled",this.options.disabled),this._addClass("ui-checkboxradio","ui-helper-hidden-accessible"),this._addClass(this.label,"ui-checkboxradio-label","ui-button ui-widget"),"radio"===this.type&&this._addClass(this.label,"ui-checkboxradio-radio-label"),this.options.label&&this.options.label!==this.originalLabel?this._updateLabel():this.originalLabel&&(this.options.label=this.originalLabel),this._enhance(),t&&(this._addClass(this.label,"ui-checkboxradio-checked","ui-state-active"),this.icon&&this._addClass(this.icon,null,"ui-state-hover")),this._on({change:"_toggleClasses",focus:function(){this._addClass(this.label,null,"ui-state-focus ui-visual-focus")},blur:function(){this._removeClass(this.label,null,"ui-state-focus ui-visual-focus")}})},_readType:function(){var e=this.element[0].nodeName.toLowerCase();this.type=this.element[0].type,"input"===e&&/radio|checkbox/.test(this.type)||t.error("Can't create checkboxradio on element.nodeName="+e+" and element.type="+this.type)},_enhance:function(){this._updateIcon(this.element[0].checked)},widget:function(){return this.label},_getRadioGroup:function(){var e,i=this.element[0].name,s="input[name='"+t.ui.escapeSelector(i)+"']";return i?(e=this.form.length?t(this.form[0].elements).filter(s):t(s).filter(function(){return 0===t(this).form().length}),e.not(this.element)):t([])},_toggleClasses:function(){var e=this.element[0].checked;this._toggleClass(this.label,"ui-checkboxradio-checked","ui-state-active",e),this.options.icon&&"checkbox"===this.type&&this._toggleClass(this.icon,null,"ui-icon-check ui-state-checked",e)._toggleClass(this.icon,null,"ui-icon-blank",!e),"radio"===this.type&&this._getRadioGroup().each(function(){var e=t(this).checkboxradio("instance");e&&e._removeClass(e.label,"ui-checkboxradio-checked","ui-state-active")})},_destroy:function(){this._unbindFormResetHandler(),this.icon&&(this.icon.remove(),this.iconSpace.remove())},_setOption:function(t,e){return"label"!==t||e?(this._super(t,e),"disabled"===t?(this._toggleClass(this.label,null,"ui-state-disabled",e),this.element[0].disabled=e,void 0):(this.refresh(),void 0)):void 0},_updateIcon:function(e){var i="ui-icon ui-icon-background ";this.options.icon?(this.icon||(this.icon=t("<span>"),this.iconSpace=t("<span> </span>"),this._addClass(this.iconSpace,"ui-checkboxradio-icon-space")),"checkbox"===this.type?(i+=e?"ui-icon-check ui-state-checked":"ui-icon-blank",this._removeClass(this.icon,null,e?"ui-icon-blank":"ui-icon-check")):i+="ui-icon-blank",this._addClass(this.icon,"ui-checkboxradio-icon",i),e||this._removeClass(this.icon,null,"ui-icon-check ui-state-checked"),this.icon.prependTo(this.label).after(this.iconSpace)):void 0!==this.icon&&(this.icon.remove(),this.iconSpace.remove(),delete this.icon)},_updateLabel:function(){var t=this.label.contents().not(this.element[0]);this.icon&&(t=t.not(this.icon[0])),this.iconSpace&&(t=t.not(this.iconSpace[0])),t.remove(),this.label.append(this.options.label)},refresh:function(){var t=this.element[0].checked,e=this.element[0].disabled;this._updateIcon(t),this._toggleClass(this.label,"ui-checkboxradio-checked","ui-state-active",t),null!==this.options.label&&this._updateLabel(),e!==this.options.disabled&&this._setOptions({disabled:e})}}]),t.ui.checkboxradio,t.widget("ui.button",{version:"1.12.1",defaultElement:"<button>",options:{classes:{"ui-button":"ui-corner-all"},disabled:null,icon:null,iconPosition:"beginning",label:null,showLabel:!0},_getCreateOptions:function(){var t,e=this._super()||{};return this.isInput=this.element.is("input"),t=this.element[0].disabled,null!=t&&(e.disabled=t),this.originalLabel=this.isInput?this.element.val():this.element.html(),this.originalLabel&&(e.label=this.originalLabel),e},_create:function(){!this.option.showLabel&!this.options.icon&&(this.options.showLabel=!0),null==this.options.disabled&&(this.options.disabled=this.element[0].disabled||!1),this.hasTitle=!!this.element.attr("title"),this.options.label&&this.options.label!==this.originalLabel&&(this.isInput?this.element.val(this.options.label):this.element.html(this.options.label)),this._addClass("ui-button","ui-widget"),this._setOption("disabled",this.options.disabled),this._enhance(),this.element.is("a")&&this._on({keyup:function(e){e.keyCode===t.ui.keyCode.SPACE&&(e.preventDefault(),this.element[0].click?this.element[0].click():this.element.trigger("click"))}})},_enhance:function(){this.element.is("button")||this.element.attr("role","button"),this.options.icon&&(this._updateIcon("icon",this.options.icon),this._updateTooltip())},_updateTooltip:function(){this.title=this.element.attr("title"),this.options.showLabel||this.title||this.element.attr("title",this.options.label)},_updateIcon:function(e,i){var s="iconPosition"!==e,n=s?this.options.iconPosition:i,o="top"===n||"bottom"===n;this.icon?s&&this._removeClass(this.icon,null,this.options.icon):(this.icon=t("<span>"),this._addClass(this.icon,"ui-button-icon","ui-icon"),this.options.showLabel||this._addClass("ui-button-icon-only")),s&&this._addClass(this.icon,null,i),this._attachIcon(n),o?(this._addClass(this.icon,null,"ui-widget-icon-block"),this.iconSpace&&this.iconSpace.remove()):(this.iconSpace||(this.iconSpace=t("<span> </span>"),this._addClass(this.iconSpace,"ui-button-icon-space")),this._removeClass(this.icon,null,"ui-wiget-icon-block"),this._attachIconSpace(n))},_destroy:function(){this.element.removeAttr("role"),this.icon&&this.icon.remove(),this.iconSpace&&this.iconSpace.remove(),this.hasTitle||this.element.removeAttr("title")},_attachIconSpace:function(t){this.icon[/^(?:end|bottom)/.test(t)?"before":"after"](this.iconSpace)},_attachIcon:function(t){this.element[/^(?:end|bottom)/.test(t)?"append":"prepend"](this.icon)},_setOptions:function(t){var e=void 0===t.showLabel?this.options.showLabel:t.showLabel,i=void 0===t.icon?this.options.icon:t.icon;e||i||(t.showLabel=!0),this._super(t)},_setOption:function(t,e){"icon"===t&&(e?this._updateIcon(t,e):this.icon&&(this.icon.remove(),this.iconSpace&&this.iconSpace.remove())),"iconPosition"===t&&this._updateIcon(t,e),"showLabel"===t&&(this._toggleClass("ui-button-icon-only",null,!e),this._updateTooltip()),"label"===t&&(this.isInput?this.element.val(e):(this.element.html(e),this.icon&&(this._attachIcon(this.options.iconPosition),this._attachIconSpace(this.options.iconPosition)))),this._super(t,e),"disabled"===t&&(this._toggleClass(null,"ui-state-disabled",e),this.element[0].disabled=e,e&&this.element.blur())},refresh:function(){var t=this.element.is("input, button")?this.element[0].disabled:this.element.hasClass("ui-button-disabled");t!==this.options.disabled&&this._setOptions({disabled:t}),this._updateTooltip()}}),t.uiBackCompat!==!1&&(t.widget("ui.button",t.ui.button,{options:{text:!0,icons:{primary:null,secondary:null}},_create:function(){this.options.showLabel&&!this.options.text&&(this.options.showLabel=this.options.text),!this.options.showLabel&&this.options.text&&(this.options.text=this.options.showLabel),this.options.icon||!this.options.icons.primary&&!this.options.icons.secondary?this.options.icon&&(this.options.icons.primary=this.options.icon):this.options.icons.primary?this.options.icon=this.options.icons.primary:(this.options.icon=this.options.icons.secondary,this.options.iconPosition="end"),this._super()},_setOption:function(t,e){return"text"===t?(this._super("showLabel",e),void 0):("showLabel"===t&&(this.options.text=e),"icon"===t&&(this.options.icons.primary=e),"icons"===t&&(e.primary?(this._super("icon",e.primary),this._super("iconPosition","beginning")):e.secondary&&(this._super("icon",e.secondary),this._super("iconPosition","end"))),this._superApply(arguments),void 0)}}),t.fn.button=function(e){return function(){return!this.length||this.length&&"INPUT"!==this[0].tagName||this.length&&"INPUT"===this[0].tagName&&"checkbox"!==this.attr("type")&&"radio"!==this.attr("type")?e.apply(this,arguments):(t.ui.checkboxradio||t.error("Checkboxradio widget missing"),0===arguments.length?this.checkboxradio({icon:!1}):this.checkboxradio.apply(this,arguments))}}(t.fn.button),t.fn.buttonset=function(){return t.ui.controlgroup||t.error("Controlgroup widget missing"),"option"===arguments[0]&&"items"===arguments[1]&&arguments[2]?this.controlgroup.apply(this,[arguments[0],"items.button",arguments[2]]):"option"===arguments[0]&&"items"===arguments[1]?this.controlgroup.apply(this,[arguments[0],"items.button"]):("object"==typeof arguments[0]&&arguments[0].items&&(arguments[0].items={button:arguments[0].items}),this.controlgroup.apply(this,arguments))}),t.ui.button,t.extend(t.ui,{datepicker:{version:"1.12.1"}});var m;t.extend(s.prototype,{markerClassName:"hasDatepicker",maxRows:4,_widgetDatepicker:function(){return this.dpDiv},setDefaults:function(t){return a(this._defaults,t||{}),this},_attachDatepicker:function(e,i){var s,n,o;s=e.nodeName.toLowerCase(),n="div"===s||"span"===s,e.id||(this.uuid+=1,e.id="dp"+this.uuid),o=this._newInst(t(e),n),o.settings=t.extend({},i||{}),"input"===s?this._connectDatepicker(e,o):n&&this._inlineDatepicker(e,o)},_newInst:function(e,i){var s=e[0].id.replace(/([^A-Za-z0-9_\-])/g,"\\\\$1");return{id:s,input:e,selectedDay:0,selectedMonth:0,selectedYear:0,drawMonth:0,drawYear:0,inline:i,dpDiv:i?n(t("<div class='"+this._inlineClass+" ui-datepicker ui-widget ui-widget-content ui-helper-clearfix ui-corner-all'></div>")):this.dpDiv}},_connectDatepicker:function(e,i){var s=t(e);i.append=t([]),i.trigger=t([]),s.hasClass(this.markerClassName)||(this._attachments(s,i),s.addClass(this.markerClassName).on("keydown",this._doKeyDown).on("keypress",this._doKeyPress).on("keyup",this._doKeyUp),this._autoSize(i),t.data(e,"datepicker",i),i.settings.disabled&&this._disableDatepicker(e))},_attachments:function(e,i){var s,n,o,a=this._get(i,"appendText"),r=this._get(i,"isRTL");i.append&&i.append.remove(),a&&(i.append=t("<span class='"+this._appendClass+"'>"+a+"</span>"),e[r?"before":"after"](i.append)),e.off("focus",this._showDatepicker),i.trigger&&i.trigger.remove(),s=this._get(i,"showOn"),("focus"===s||"both"===s)&&e.on("focus",this._showDatepicker),("button"===s||"both"===s)&&(n=this._get(i,"buttonText"),o=this._get(i,"buttonImage"),i.trigger=t(this._get(i,"buttonImageOnly")?t("<img/>").addClass(this._triggerClass).attr({src:o,alt:n,title:n}):t("<button type='button'></button>").addClass(this._triggerClass).html(o?t("<img/>").attr({src:o,alt:n,title:n}):n)),e[r?"before":"after"](i.trigger),i.trigger.on("click",function(){return t.datepicker._datepickerShowing&&t.datepicker._lastInput===e[0]?t.datepicker._hideDatepicker():t.datepicker._datepickerShowing&&t.datepicker._lastInput!==e[0]?(t.datepicker._hideDatepicker(),t.datepicker._showDatepicker(e[0])):t.datepicker._showDatepicker(e[0]),!1}))},_autoSize:function(t){if(this._get(t,"autoSize")&&!t.inline){var e,i,s,n,o=new Date(2009,11,20),a=this._get(t,"dateFormat");a.match(/[DM]/)&&(e=function(t){for(i=0,s=0,n=0;t.length>n;n++)t[n].length>i&&(i=t[n].length,s=n);return s},o.setMonth(e(this._get(t,a.match(/MM/)?"monthNames":"monthNamesShort"))),o.setDate(e(this._get(t,a.match(/DD/)?"dayNames":"dayNamesShort"))+20-o.getDay())),t.input.attr("size",this._formatDate(t,o).length)}},_inlineDatepicker:function(e,i){var s=t(e);s.hasClass(this.markerClassName)||(s.addClass(this.markerClassName).append(i.dpDiv),t.data(e,"datepicker",i),this._setDate(i,this._getDefaultDate(i),!0),this._updateDatepicker(i),this._updateAlternate(i),i.settings.disabled&&this._disableDatepicker(e),i.dpDiv.css("display","block"))},_dialogDatepicker:function(e,i,s,n,o){var r,h,l,c,u,d=this._dialogInst;return d||(this.uuid+=1,r="dp"+this.uuid,this._dialogInput=t("<input type='text' id='"+r+"' style='position: absolute; top: -100px; width: 0px;'/>"),this._dialogInput.on("keydown",this._doKeyDown),t("body").append(this._dialogInput),d=this._dialogInst=this._newInst(this._dialogInput,!1),d.settings={},t.data(this._dialogInput[0],"datepicker",d)),a(d.settings,n||{}),i=i&&i.constructor===Date?this._formatDate(d,i):i,this._dialogInput.val(i),this._pos=o?o.length?o:[o.pageX,o.pageY]:null,this._pos||(h=document.documentElement.clientWidth,l=document.documentElement.clientHeight,c=document.documentElement.scrollLeft||document.body.scrollLeft,u=document.documentElement.scrollTop||document.body.scrollTop,this._pos=[h/2-100+c,l/2-150+u]),this._dialogInput.css("left",this._pos[0]+20+"px").css("top",this._pos[1]+"px"),d.settings.onSelect=s,this._inDialog=!0,this.dpDiv.addClass(this._dialogClass),this._showDatepicker(this._dialogInput[0]),t.blockUI&&t.blockUI(this.dpDiv),t.data(this._dialogInput[0],"datepicker",d),this},_destroyDatepicker:function(e){var i,s=t(e),n=t.data(e,"datepicker");s.hasClass(this.markerClassName)&&(i=e.nodeName.toLowerCase(),t.removeData(e,"datepicker"),"input"===i?(n.append.remove(),n.trigger.remove(),s.removeClass(this.markerClassName).off("focus",this._showDatepicker).off("keydown",this._doKeyDown).off("keypress",this._doKeyPress).off("keyup",this._doKeyUp)):("div"===i||"span"===i)&&s.removeClass(this.markerClassName).empty(),m===n&&(m=null))},_enableDatepicker:function(e){var i,s,n=t(e),o=t.data(e,"datepicker");n.hasClass(this.markerClassName)&&(i=e.nodeName.toLowerCase(),"input"===i?(e.disabled=!1,o.trigger.filter("button").each(function(){this.disabled=!1}).end().filter("img").css({opacity:"1.0",cursor:""})):("div"===i||"span"===i)&&(s=n.children("."+this._inlineClass),s.children().removeClass("ui-state-disabled"),s.find("select.ui-datepicker-month, select.ui-datepicker-year").prop("disabled",!1)),this._disabledInputs=t.map(this._disabledInputs,function(t){return t===e?null:t}))},_disableDatepicker:function(e){var i,s,n=t(e),o=t.data(e,"datepicker");n.hasClass(this.markerClassName)&&(i=e.nodeName.toLowerCase(),"input"===i?(e.disabled=!0,o.trigger.filter("button").each(function(){this.disabled=!0}).end().filter("img").css({opacity:"0.5",cursor:"default"})):("div"===i||"span"===i)&&(s=n.children("."+this._inlineClass),s.children().addClass("ui-state-disabled"),s.find("select.ui-datepicker-month, select.ui-datepicker-year").prop("disabled",!0)),this._disabledInputs=t.map(this._disabledInputs,function(t){return t===e?null:t}),this._disabledInputs[this._disabledInputs.length]=e)},_isDisabledDatepicker:function(t){if(!t)return!1;for(var e=0;this._disabledInputs.length>e;e++)if(this._disabledInputs[e]===t)return!0;return!1},_getInst:function(e){try{return t.data(e,"datepicker")}catch(i){throw"Missing instance data for this datepicker"}},_optionDatepicker:function(e,i,s){var n,o,r,h,l=this._getInst(e);return 2===arguments.length&&"string"==typeof i?"defaults"===i?t.extend({},t.datepicker._defaults):l?"all"===i?t.extend({},l.settings):this._get(l,i):null:(n=i||{},"string"==typeof i&&(n={},n[i]=s),l&&(this._curInst===l&&this._hideDatepicker(),o=this._getDateDatepicker(e,!0),r=this._getMinMaxDate(l,"min"),h=this._getMinMaxDate(l,"max"),a(l.settings,n),null!==r&&void 0!==n.dateFormat&&void 0===n.minDate&&(l.settings.minDate=this._formatDate(l,r)),null!==h&&void 0!==n.dateFormat&&void 0===n.maxDate&&(l.settings.maxDate=this._formatDate(l,h)),"disabled"in n&&(n.disabled?this._disableDatepicker(e):this._enableDatepicker(e)),this._attachments(t(e),l),this._autoSize(l),this._setDate(l,o),this._updateAlternate(l),this._updateDatepicker(l)),void 0)},_changeDatepicker:function(t,e,i){this._optionDatepicker(t,e,i)},_refreshDatepicker:function(t){var e=this._getInst(t);e&&this._updateDatepicker(e)},_setDateDatepicker:function(t,e){var i=this._getInst(t);i&&(this._setDate(i,e),this._updateDatepicker(i),this._updateAlternate(i))},_getDateDatepicker:function(t,e){var i=this._getInst(t);return i&&!i.inline&&this._setDateFromField(i,e),i?this._getDate(i):null},_doKeyDown:function(e){var i,s,n,o=t.datepicker._getInst(e.target),a=!0,r=o.dpDiv.is(".ui-datepicker-rtl");if(o._keyEvent=!0,t.datepicker._datepickerShowing)switch(e.keyCode){case 9:t.datepicker._hideDatepicker(),a=!1;break;case 13:return n=t("td."+t.datepicker._dayOverClass+":not(."+t.datepicker._currentClass+")",o.dpDiv),n[0]&&t.datepicker._selectDay(e.target,o.selectedMonth,o.selectedYear,n[0]),i=t.datepicker._get(o,"onSelect"),i?(s=t.datepicker._formatDate(o),i.apply(o.input?o.input[0]:null,[s,o])):t.datepicker._hideDatepicker(),!1;case 27:t.datepicker._hideDatepicker();break;case 33:t.datepicker._adjustDate(e.target,e.ctrlKey?-t.datepicker._get(o,"stepBigMonths"):-t.datepicker._get(o,"stepMonths"),"M");break;case 34:t.datepicker._adjustDate(e.target,e.ctrlKey?+t.datepicker._get(o,"stepBigMonths"):+t.datepicker._get(o,"stepMonths"),"M");break;case 35:(e.ctrlKey||e.metaKey)&&t.datepicker._clearDate(e.target),a=e.ctrlKey||e.metaKey;break;case 36:(e.ctrlKey||e.metaKey)&&t.datepicker._gotoToday(e.target),a=e.ctrlKey||e.metaKey;break;case 37:(e.ctrlKey||e.metaKey)&&t.datepicker._adjustDate(e.target,r?1:-1,"D"),a=e.ctrlKey||e.metaKey,e.originalEvent.altKey&&t.datepicker._adjustDate(e.target,e.ctrlKey?-t.datepicker._get(o,"stepBigMonths"):-t.datepicker._get(o,"stepMonths"),"M");break;case 38:(e.ctrlKey||e.metaKey)&&t.datepicker._adjustDate(e.target,-7,"D"),a=e.ctrlKey||e.metaKey;break;case 39:(e.ctrlKey||e.metaKey)&&t.datepicker._adjustDate(e.target,r?-1:1,"D"),a=e.ctrlKey||e.metaKey,e.originalEvent.altKey&&t.datepicker._adjustDate(e.target,e.ctrlKey?+t.datepicker._get(o,"stepBigMonths"):+t.datepicker._get(o,"stepMonths"),"M");break;case 40:(e.ctrlKey||e.metaKey)&&t.datepicker._adjustDate(e.target,7,"D"),a=e.ctrlKey||e.metaKey;break;default:a=!1}else 36===e.keyCode&&e.ctrlKey?t.datepicker._showDatepicker(this):a=!1;a&&(e.preventDefault(),e.stopPropagation())},_doKeyPress:function(e){var i,s,n=t.datepicker._getInst(e.target);return t.datepicker._get(n,"constrainInput")?(i=t.datepicker._possibleChars(t.datepicker._get(n,"dateFormat")),s=String.fromCharCode(null==e.charCode?e.keyCode:e.charCode),e.ctrlKey||e.metaKey||" ">s||!i||i.indexOf(s)>-1):void 0},_doKeyUp:function(e){var i,s=t.datepicker._getInst(e.target);if(s.input.val()!==s.lastVal)try{i=t.datepicker.parseDate(t.datepicker._get(s,"dateFormat"),s.input?s.input.val():null,t.datepicker._getFormatConfig(s)),i&&(t.datepicker._setDateFromField(s),t.datepicker._updateAlternate(s),t.datepicker._updateDatepicker(s))}catch(n){}return!0},_showDatepicker:function(e){if(e=e.target||e,"input"!==e.nodeName.toLowerCase()&&(e=t("input",e.parentNode)[0]),!t.datepicker._isDisabledDatepicker(e)&&t.datepicker._lastInput!==e){var s,n,o,r,h,l,c;s=t.datepicker._getInst(e),t.datepicker._curInst&&t.datepicker._curInst!==s&&(t.datepicker._curInst.dpDiv.stop(!0,!0),s&&t.datepicker._datepickerShowing&&t.datepicker._hideDatepicker(t.datepicker._curInst.input[0])),n=t.datepicker._get(s,"beforeShow"),o=n?n.apply(e,[e,s]):{},o!==!1&&(a(s.settings,o),s.lastVal=null,t.datepicker._lastInput=e,t.datepicker._setDateFromField(s),t.datepicker._inDialog&&(e.value=""),t.datepicker._pos||(t.datepicker._pos=t.datepicker._findPos(e),t.datepicker._pos[1]+=e.offsetHeight),r=!1,t(e).parents().each(function(){return r|="fixed"===t(this).css("position"),!r}),h={left:t.datepicker._pos[0],top:t.datepicker._pos[1]},t.datepicker._pos=null,s.dpDiv.empty(),s.dpDiv.css({position:"absolute",display:"block",top:"-1000px"}),t.datepicker._updateDatepicker(s),h=t.datepicker._checkOffset(s,h,r),s.dpDiv.css({position:t.datepicker._inDialog&&t.blockUI?"static":r?"fixed":"absolute",display:"none",left:h.left+"px",top:h.top+"px"}),s.inline||(l=t.datepicker._get(s,"showAnim"),c=t.datepicker._get(s,"duration"),s.dpDiv.css("z-index",i(t(e))+4),t.datepicker._datepickerShowing=!0,t.effects&&t.effects.effect[l]?s.dpDiv.show(l,t.datepicker._get(s,"showOptions"),c):s.dpDiv[l||"show"](l?c:null),t.datepicker._shouldFocusInput(s)&&s.input.trigger("focus"),t.datepicker._curInst=s))
}},_updateDatepicker:function(e){this.maxRows=4,m=e,e.dpDiv.empty().append(this._generateHTML(e)),this._attachHandlers(e);var i,s=this._getNumberOfMonths(e),n=s[1],a=17,r=e.dpDiv.find("."+this._dayOverClass+" a");r.length>0&&o.apply(r.get(0)),e.dpDiv.removeClass("ui-datepicker-multi-2 ui-datepicker-multi-3 ui-datepicker-multi-4").width(""),n>1&&e.dpDiv.addClass("ui-datepicker-multi-"+n).css("width",a*n+"em"),e.dpDiv[(1!==s[0]||1!==s[1]?"add":"remove")+"Class"]("ui-datepicker-multi"),e.dpDiv[(this._get(e,"isRTL")?"add":"remove")+"Class"]("ui-datepicker-rtl"),e===t.datepicker._curInst&&t.datepicker._datepickerShowing&&t.datepicker._shouldFocusInput(e)&&e.input.trigger("focus"),e.yearshtml&&(i=e.yearshtml,setTimeout(function(){i===e.yearshtml&&e.yearshtml&&e.dpDiv.find("select.ui-datepicker-year:first").replaceWith(e.yearshtml),i=e.yearshtml=null},0))},_shouldFocusInput:function(t){return t.input&&t.input.is(":visible")&&!t.input.is(":disabled")&&!t.input.is(":focus")},_checkOffset:function(e,i,s){var n=e.dpDiv.outerWidth(),o=e.dpDiv.outerHeight(),a=e.input?e.input.outerWidth():0,r=e.input?e.input.outerHeight():0,h=document.documentElement.clientWidth+(s?0:t(document).scrollLeft()),l=document.documentElement.clientHeight+(s?0:t(document).scrollTop());return i.left-=this._get(e,"isRTL")?n-a:0,i.left-=s&&i.left===e.input.offset().left?t(document).scrollLeft():0,i.top-=s&&i.top===e.input.offset().top+r?t(document).scrollTop():0,i.left-=Math.min(i.left,i.left+n>h&&h>n?Math.abs(i.left+n-h):0),i.top-=Math.min(i.top,i.top+o>l&&l>o?Math.abs(o+r):0),i},_findPos:function(e){for(var i,s=this._getInst(e),n=this._get(s,"isRTL");e&&("hidden"===e.type||1!==e.nodeType||t.expr.filters.hidden(e));)e=e[n?"previousSibling":"nextSibling"];return i=t(e).offset(),[i.left,i.top]},_hideDatepicker:function(e){var i,s,n,o,a=this._curInst;!a||e&&a!==t.data(e,"datepicker")||this._datepickerShowing&&(i=this._get(a,"showAnim"),s=this._get(a,"duration"),n=function(){t.datepicker._tidyDialog(a)},t.effects&&(t.effects.effect[i]||t.effects[i])?a.dpDiv.hide(i,t.datepicker._get(a,"showOptions"),s,n):a.dpDiv["slideDown"===i?"slideUp":"fadeIn"===i?"fadeOut":"hide"](i?s:null,n),i||n(),this._datepickerShowing=!1,o=this._get(a,"onClose"),o&&o.apply(a.input?a.input[0]:null,[a.input?a.input.val():"",a]),this._lastInput=null,this._inDialog&&(this._dialogInput.css({position:"absolute",left:"0",top:"-100px"}),t.blockUI&&(t.unblockUI(),t("body").append(this.dpDiv))),this._inDialog=!1)},_tidyDialog:function(t){t.dpDiv.removeClass(this._dialogClass).off(".ui-datepicker-calendar")},_checkExternalClick:function(e){if(t.datepicker._curInst){var i=t(e.target),s=t.datepicker._getInst(i[0]);(i[0].id!==t.datepicker._mainDivId&&0===i.parents("#"+t.datepicker._mainDivId).length&&!i.hasClass(t.datepicker.markerClassName)&&!i.closest("."+t.datepicker._triggerClass).length&&t.datepicker._datepickerShowing&&(!t.datepicker._inDialog||!t.blockUI)||i.hasClass(t.datepicker.markerClassName)&&t.datepicker._curInst!==s)&&t.datepicker._hideDatepicker()}},_adjustDate:function(e,i,s){var n=t(e),o=this._getInst(n[0]);this._isDisabledDatepicker(n[0])||(this._adjustInstDate(o,i+("M"===s?this._get(o,"showCurrentAtPos"):0),s),this._updateDatepicker(o))},_gotoToday:function(e){var i,s=t(e),n=this._getInst(s[0]);this._get(n,"gotoCurrent")&&n.currentDay?(n.selectedDay=n.currentDay,n.drawMonth=n.selectedMonth=n.currentMonth,n.drawYear=n.selectedYear=n.currentYear):(i=new Date,n.selectedDay=i.getDate(),n.drawMonth=n.selectedMonth=i.getMonth(),n.drawYear=n.selectedYear=i.getFullYear()),this._notifyChange(n),this._adjustDate(s)},_selectMonthYear:function(e,i,s){var n=t(e),o=this._getInst(n[0]);o["selected"+("M"===s?"Month":"Year")]=o["draw"+("M"===s?"Month":"Year")]=parseInt(i.options[i.selectedIndex].value,10),this._notifyChange(o),this._adjustDate(n)},_selectDay:function(e,i,s,n){var o,a=t(e);t(n).hasClass(this._unselectableClass)||this._isDisabledDatepicker(a[0])||(o=this._getInst(a[0]),o.selectedDay=o.currentDay=t("a",n).html(),o.selectedMonth=o.currentMonth=i,o.selectedYear=o.currentYear=s,this._selectDate(e,this._formatDate(o,o.currentDay,o.currentMonth,o.currentYear)))},_clearDate:function(e){var i=t(e);this._selectDate(i,"")},_selectDate:function(e,i){var s,n=t(e),o=this._getInst(n[0]);i=null!=i?i:this._formatDate(o),o.input&&o.input.val(i),this._updateAlternate(o),s=this._get(o,"onSelect"),s?s.apply(o.input?o.input[0]:null,[i,o]):o.input&&o.input.trigger("change"),o.inline?this._updateDatepicker(o):(this._hideDatepicker(),this._lastInput=o.input[0],"object"!=typeof o.input[0]&&o.input.trigger("focus"),this._lastInput=null)},_updateAlternate:function(e){var i,s,n,o=this._get(e,"altField");o&&(i=this._get(e,"altFormat")||this._get(e,"dateFormat"),s=this._getDate(e),n=this.formatDate(i,s,this._getFormatConfig(e)),t(o).val(n))},noWeekends:function(t){var e=t.getDay();return[e>0&&6>e,""]},iso8601Week:function(t){var e,i=new Date(t.getTime());return i.setDate(i.getDate()+4-(i.getDay()||7)),e=i.getTime(),i.setMonth(0),i.setDate(1),Math.floor(Math.round((e-i)/864e5)/7)+1},parseDate:function(e,i,s){if(null==e||null==i)throw"Invalid arguments";if(i="object"==typeof i?""+i:i+"",""===i)return null;var n,o,a,r,h=0,l=(s?s.shortYearCutoff:null)||this._defaults.shortYearCutoff,c="string"!=typeof l?l:(new Date).getFullYear()%100+parseInt(l,10),u=(s?s.dayNamesShort:null)||this._defaults.dayNamesShort,d=(s?s.dayNames:null)||this._defaults.dayNames,p=(s?s.monthNamesShort:null)||this._defaults.monthNamesShort,f=(s?s.monthNames:null)||this._defaults.monthNames,g=-1,m=-1,_=-1,v=-1,b=!1,y=function(t){var i=e.length>n+1&&e.charAt(n+1)===t;return i&&n++,i},w=function(t){var e=y(t),s="@"===t?14:"!"===t?20:"y"===t&&e?4:"o"===t?3:2,n="y"===t?s:1,o=RegExp("^\\d{"+n+","+s+"}"),a=i.substring(h).match(o);if(!a)throw"Missing number at position "+h;return h+=a[0].length,parseInt(a[0],10)},k=function(e,s,n){var o=-1,a=t.map(y(e)?n:s,function(t,e){return[[e,t]]}).sort(function(t,e){return-(t[1].length-e[1].length)});if(t.each(a,function(t,e){var s=e[1];return i.substr(h,s.length).toLowerCase()===s.toLowerCase()?(o=e[0],h+=s.length,!1):void 0}),-1!==o)return o+1;throw"Unknown name at position "+h},x=function(){if(i.charAt(h)!==e.charAt(n))throw"Unexpected literal at position "+h;h++};for(n=0;e.length>n;n++)if(b)"'"!==e.charAt(n)||y("'")?x():b=!1;else switch(e.charAt(n)){case"d":_=w("d");break;case"D":k("D",u,d);break;case"o":v=w("o");break;case"m":m=w("m");break;case"M":m=k("M",p,f);break;case"y":g=w("y");break;case"@":r=new Date(w("@")),g=r.getFullYear(),m=r.getMonth()+1,_=r.getDate();break;case"!":r=new Date((w("!")-this._ticksTo1970)/1e4),g=r.getFullYear(),m=r.getMonth()+1,_=r.getDate();break;case"'":y("'")?x():b=!0;break;default:x()}if(i.length>h&&(a=i.substr(h),!/^\s+/.test(a)))throw"Extra/unparsed characters found in date: "+a;if(-1===g?g=(new Date).getFullYear():100>g&&(g+=(new Date).getFullYear()-(new Date).getFullYear()%100+(c>=g?0:-100)),v>-1)for(m=1,_=v;;){if(o=this._getDaysInMonth(g,m-1),o>=_)break;m++,_-=o}if(r=this._daylightSavingAdjust(new Date(g,m-1,_)),r.getFullYear()!==g||r.getMonth()+1!==m||r.getDate()!==_)throw"Invalid date";return r},ATOM:"yy-mm-dd",COOKIE:"D, dd M yy",ISO_8601:"yy-mm-dd",RFC_822:"D, d M y",RFC_850:"DD, dd-M-y",RFC_1036:"D, d M y",RFC_1123:"D, d M yy",RFC_2822:"D, d M yy",RSS:"D, d M y",TICKS:"!",TIMESTAMP:"@",W3C:"yy-mm-dd",_ticksTo1970:1e7*60*60*24*(718685+Math.floor(492.5)-Math.floor(19.7)+Math.floor(4.925)),formatDate:function(t,e,i){if(!e)return"";var s,n=(i?i.dayNamesShort:null)||this._defaults.dayNamesShort,o=(i?i.dayNames:null)||this._defaults.dayNames,a=(i?i.monthNamesShort:null)||this._defaults.monthNamesShort,r=(i?i.monthNames:null)||this._defaults.monthNames,h=function(e){var i=t.length>s+1&&t.charAt(s+1)===e;return i&&s++,i},l=function(t,e,i){var s=""+e;if(h(t))for(;i>s.length;)s="0"+s;return s},c=function(t,e,i,s){return h(t)?s[e]:i[e]},u="",d=!1;if(e)for(s=0;t.length>s;s++)if(d)"'"!==t.charAt(s)||h("'")?u+=t.charAt(s):d=!1;else switch(t.charAt(s)){case"d":u+=l("d",e.getDate(),2);break;case"D":u+=c("D",e.getDay(),n,o);break;case"o":u+=l("o",Math.round((new Date(e.getFullYear(),e.getMonth(),e.getDate()).getTime()-new Date(e.getFullYear(),0,0).getTime())/864e5),3);break;case"m":u+=l("m",e.getMonth()+1,2);break;case"M":u+=c("M",e.getMonth(),a,r);break;case"y":u+=h("y")?e.getFullYear():(10>e.getFullYear()%100?"0":"")+e.getFullYear()%100;break;case"@":u+=e.getTime();break;case"!":u+=1e4*e.getTime()+this._ticksTo1970;break;case"'":h("'")?u+="'":d=!0;break;default:u+=t.charAt(s)}return u},_possibleChars:function(t){var e,i="",s=!1,n=function(i){var s=t.length>e+1&&t.charAt(e+1)===i;return s&&e++,s};for(e=0;t.length>e;e++)if(s)"'"!==t.charAt(e)||n("'")?i+=t.charAt(e):s=!1;else switch(t.charAt(e)){case"d":case"m":case"y":case"@":i+="0123456789";break;case"D":case"M":return null;case"'":n("'")?i+="'":s=!0;break;default:i+=t.charAt(e)}return i},_get:function(t,e){return void 0!==t.settings[e]?t.settings[e]:this._defaults[e]},_setDateFromField:function(t,e){if(t.input.val()!==t.lastVal){var i=this._get(t,"dateFormat"),s=t.lastVal=t.input?t.input.val():null,n=this._getDefaultDate(t),o=n,a=this._getFormatConfig(t);try{o=this.parseDate(i,s,a)||n}catch(r){s=e?"":s}t.selectedDay=o.getDate(),t.drawMonth=t.selectedMonth=o.getMonth(),t.drawYear=t.selectedYear=o.getFullYear(),t.currentDay=s?o.getDate():0,t.currentMonth=s?o.getMonth():0,t.currentYear=s?o.getFullYear():0,this._adjustInstDate(t)}},_getDefaultDate:function(t){return this._restrictMinMax(t,this._determineDate(t,this._get(t,"defaultDate"),new Date))},_determineDate:function(e,i,s){var n=function(t){var e=new Date;return e.setDate(e.getDate()+t),e},o=function(i){try{return t.datepicker.parseDate(t.datepicker._get(e,"dateFormat"),i,t.datepicker._getFormatConfig(e))}catch(s){}for(var n=(i.toLowerCase().match(/^c/)?t.datepicker._getDate(e):null)||new Date,o=n.getFullYear(),a=n.getMonth(),r=n.getDate(),h=/([+\-]?[0-9]+)\s*(d|D|w|W|m|M|y|Y)?/g,l=h.exec(i);l;){switch(l[2]||"d"){case"d":case"D":r+=parseInt(l[1],10);break;case"w":case"W":r+=7*parseInt(l[1],10);break;case"m":case"M":a+=parseInt(l[1],10),r=Math.min(r,t.datepicker._getDaysInMonth(o,a));break;case"y":case"Y":o+=parseInt(l[1],10),r=Math.min(r,t.datepicker._getDaysInMonth(o,a))}l=h.exec(i)}return new Date(o,a,r)},a=null==i||""===i?s:"string"==typeof i?o(i):"number"==typeof i?isNaN(i)?s:n(i):new Date(i.getTime());return a=a&&"Invalid Date"==""+a?s:a,a&&(a.setHours(0),a.setMinutes(0),a.setSeconds(0),a.setMilliseconds(0)),this._daylightSavingAdjust(a)},_daylightSavingAdjust:function(t){return t?(t.setHours(t.getHours()>12?t.getHours()+2:0),t):null},_setDate:function(t,e,i){var s=!e,n=t.selectedMonth,o=t.selectedYear,a=this._restrictMinMax(t,this._determineDate(t,e,new Date));t.selectedDay=t.currentDay=a.getDate(),t.drawMonth=t.selectedMonth=t.currentMonth=a.getMonth(),t.drawYear=t.selectedYear=t.currentYear=a.getFullYear(),n===t.selectedMonth&&o===t.selectedYear||i||this._notifyChange(t),this._adjustInstDate(t),t.input&&t.input.val(s?"":this._formatDate(t))},_getDate:function(t){var e=!t.currentYear||t.input&&""===t.input.val()?null:this._daylightSavingAdjust(new Date(t.currentYear,t.currentMonth,t.currentDay));return e},_attachHandlers:function(e){var i=this._get(e,"stepMonths"),s="#"+e.id.replace(/\\\\/g,"\\");e.dpDiv.find("[data-handler]").map(function(){var e={prev:function(){t.datepicker._adjustDate(s,-i,"M")},next:function(){t.datepicker._adjustDate(s,+i,"M")},hide:function(){t.datepicker._hideDatepicker()},today:function(){t.datepicker._gotoToday(s)},selectDay:function(){return t.datepicker._selectDay(s,+this.getAttribute("data-month"),+this.getAttribute("data-year"),this),!1},selectMonth:function(){return t.datepicker._selectMonthYear(s,this,"M"),!1},selectYear:function(){return t.datepicker._selectMonthYear(s,this,"Y"),!1}};t(this).on(this.getAttribute("data-event"),e[this.getAttribute("data-handler")])})},_generateHTML:function(t){var e,i,s,n,o,a,r,h,l,c,u,d,p,f,g,m,_,v,b,y,w,k,x,C,D,I,T,P,M,S,H,z,O,A,N,W,E,F,L,R=new Date,B=this._daylightSavingAdjust(new Date(R.getFullYear(),R.getMonth(),R.getDate())),Y=this._get(t,"isRTL"),j=this._get(t,"showButtonPanel"),q=this._get(t,"hideIfNoPrevNext"),K=this._get(t,"navigationAsDateFormat"),U=this._getNumberOfMonths(t),V=this._get(t,"showCurrentAtPos"),$=this._get(t,"stepMonths"),X=1!==U[0]||1!==U[1],G=this._daylightSavingAdjust(t.currentDay?new Date(t.currentYear,t.currentMonth,t.currentDay):new Date(9999,9,9)),Q=this._getMinMaxDate(t,"min"),J=this._getMinMaxDate(t,"max"),Z=t.drawMonth-V,te=t.drawYear;if(0>Z&&(Z+=12,te--),J)for(e=this._daylightSavingAdjust(new Date(J.getFullYear(),J.getMonth()-U[0]*U[1]+1,J.getDate())),e=Q&&Q>e?Q:e;this._daylightSavingAdjust(new Date(te,Z,1))>e;)Z--,0>Z&&(Z=11,te--);for(t.drawMonth=Z,t.drawYear=te,i=this._get(t,"prevText"),i=K?this.formatDate(i,this._daylightSavingAdjust(new Date(te,Z-$,1)),this._getFormatConfig(t)):i,s=this._canAdjustMonth(t,-1,te,Z)?"<a class='ui-datepicker-prev ui-corner-all' data-handler='prev' data-event='click' title='"+i+"'><span class='ui-icon ui-icon-circle-triangle-"+(Y?"e":"w")+"'>"+i+"</span></a>":q?"":"<a class='ui-datepicker-prev ui-corner-all ui-state-disabled' title='"+i+"'><span class='ui-icon ui-icon-circle-triangle-"+(Y?"e":"w")+"'>"+i+"</span></a>",n=this._get(t,"nextText"),n=K?this.formatDate(n,this._daylightSavingAdjust(new Date(te,Z+$,1)),this._getFormatConfig(t)):n,o=this._canAdjustMonth(t,1,te,Z)?"<a class='ui-datepicker-next ui-corner-all' data-handler='next' data-event='click' title='"+n+"'><span class='ui-icon ui-icon-circle-triangle-"+(Y?"w":"e")+"'>"+n+"</span></a>":q?"":"<a class='ui-datepicker-next ui-corner-all ui-state-disabled' title='"+n+"'><span class='ui-icon ui-icon-circle-triangle-"+(Y?"w":"e")+"'>"+n+"</span></a>",a=this._get(t,"currentText"),r=this._get(t,"gotoCurrent")&&t.currentDay?G:B,a=K?this.formatDate(a,r,this._getFormatConfig(t)):a,h=t.inline?"":"<button type='button' class='ui-datepicker-close ui-state-default ui-priority-primary ui-corner-all' data-handler='hide' data-event='click'>"+this._get(t,"closeText")+"</button>",l=j?"<div class='ui-datepicker-buttonpane ui-widget-content'>"+(Y?h:"")+(this._isInRange(t,r)?"<button type='button' class='ui-datepicker-current ui-state-default ui-priority-secondary ui-corner-all' data-handler='today' data-event='click'>"+a+"</button>":"")+(Y?"":h)+"</div>":"",c=parseInt(this._get(t,"firstDay"),10),c=isNaN(c)?0:c,u=this._get(t,"showWeek"),d=this._get(t,"dayNames"),p=this._get(t,"dayNamesMin"),f=this._get(t,"monthNames"),g=this._get(t,"monthNamesShort"),m=this._get(t,"beforeShowDay"),_=this._get(t,"showOtherMonths"),v=this._get(t,"selectOtherMonths"),b=this._getDefaultDate(t),y="",k=0;U[0]>k;k++){for(x="",this.maxRows=4,C=0;U[1]>C;C++){if(D=this._daylightSavingAdjust(new Date(te,Z,t.selectedDay)),I=" ui-corner-all",T="",X){if(T+="<div class='ui-datepicker-group",U[1]>1)switch(C){case 0:T+=" ui-datepicker-group-first",I=" ui-corner-"+(Y?"right":"left");break;case U[1]-1:T+=" ui-datepicker-group-last",I=" ui-corner-"+(Y?"left":"right");break;default:T+=" ui-datepicker-group-middle",I=""}T+="'>"}for(T+="<div class='ui-datepicker-header ui-widget-header ui-helper-clearfix"+I+"'>"+(/all|left/.test(I)&&0===k?Y?o:s:"")+(/all|right/.test(I)&&0===k?Y?s:o:"")+this._generateMonthYearHeader(t,Z,te,Q,J,k>0||C>0,f,g)+"</div><table class='ui-datepicker-calendar'><thead>"+"<tr>",P=u?"<th class='ui-datepicker-week-col'>"+this._get(t,"weekHeader")+"</th>":"",w=0;7>w;w++)M=(w+c)%7,P+="<th scope='col'"+((w+c+6)%7>=5?" class='ui-datepicker-week-end'":"")+">"+"<span title='"+d[M]+"'>"+p[M]+"</span></th>";for(T+=P+"</tr></thead><tbody>",S=this._getDaysInMonth(te,Z),te===t.selectedYear&&Z===t.selectedMonth&&(t.selectedDay=Math.min(t.selectedDay,S)),H=(this._getFirstDayOfMonth(te,Z)-c+7)%7,z=Math.ceil((H+S)/7),O=X?this.maxRows>z?this.maxRows:z:z,this.maxRows=O,A=this._daylightSavingAdjust(new Date(te,Z,1-H)),N=0;O>N;N++){for(T+="<tr>",W=u?"<td class='ui-datepicker-week-col'>"+this._get(t,"calculateWeek")(A)+"</td>":"",w=0;7>w;w++)E=m?m.apply(t.input?t.input[0]:null,[A]):[!0,""],F=A.getMonth()!==Z,L=F&&!v||!E[0]||Q&&Q>A||J&&A>J,W+="<td class='"+((w+c+6)%7>=5?" ui-datepicker-week-end":"")+(F?" ui-datepicker-other-month":"")+(A.getTime()===D.getTime()&&Z===t.selectedMonth&&t._keyEvent||b.getTime()===A.getTime()&&b.getTime()===D.getTime()?" "+this._dayOverClass:"")+(L?" "+this._unselectableClass+" ui-state-disabled":"")+(F&&!_?"":" "+E[1]+(A.getTime()===G.getTime()?" "+this._currentClass:"")+(A.getTime()===B.getTime()?" ui-datepicker-today":""))+"'"+(F&&!_||!E[2]?"":" title='"+E[2].replace(/'/g,"&#39;")+"'")+(L?"":" data-handler='selectDay' data-event='click' data-month='"+A.getMonth()+"' data-year='"+A.getFullYear()+"'")+">"+(F&&!_?"&#xa0;":L?"<span class='ui-state-default'>"+A.getDate()+"</span>":"<a class='ui-state-default"+(A.getTime()===B.getTime()?" ui-state-highlight":"")+(A.getTime()===G.getTime()?" ui-state-active":"")+(F?" ui-priority-secondary":"")+"' href='#'>"+A.getDate()+"</a>")+"</td>",A.setDate(A.getDate()+1),A=this._daylightSavingAdjust(A);T+=W+"</tr>"}Z++,Z>11&&(Z=0,te++),T+="</tbody></table>"+(X?"</div>"+(U[0]>0&&C===U[1]-1?"<div class='ui-datepicker-row-break'></div>":""):""),x+=T}y+=x}return y+=l,t._keyEvent=!1,y},_generateMonthYearHeader:function(t,e,i,s,n,o,a,r){var h,l,c,u,d,p,f,g,m=this._get(t,"changeMonth"),_=this._get(t,"changeYear"),v=this._get(t,"showMonthAfterYear"),b="<div class='ui-datepicker-title'>",y="";if(o||!m)y+="<span class='ui-datepicker-month'>"+a[e]+"</span>";else{for(h=s&&s.getFullYear()===i,l=n&&n.getFullYear()===i,y+="<select class='ui-datepicker-month' data-handler='selectMonth' data-event='change'>",c=0;12>c;c++)(!h||c>=s.getMonth())&&(!l||n.getMonth()>=c)&&(y+="<option value='"+c+"'"+(c===e?" selected='selected'":"")+">"+r[c]+"</option>");y+="</select>"}if(v||(b+=y+(!o&&m&&_?"":"&#xa0;")),!t.yearshtml)if(t.yearshtml="",o||!_)b+="<span class='ui-datepicker-year'>"+i+"</span>";else{for(u=this._get(t,"yearRange").split(":"),d=(new Date).getFullYear(),p=function(t){var e=t.match(/c[+\-].*/)?i+parseInt(t.substring(1),10):t.match(/[+\-].*/)?d+parseInt(t,10):parseInt(t,10);return isNaN(e)?d:e},f=p(u[0]),g=Math.max(f,p(u[1]||"")),f=s?Math.max(f,s.getFullYear()):f,g=n?Math.min(g,n.getFullYear()):g,t.yearshtml+="<select class='ui-datepicker-year' data-handler='selectYear' data-event='change'>";g>=f;f++)t.yearshtml+="<option value='"+f+"'"+(f===i?" selected='selected'":"")+">"+f+"</option>";t.yearshtml+="</select>",b+=t.yearshtml,t.yearshtml=null}return b+=this._get(t,"yearSuffix"),v&&(b+=(!o&&m&&_?"":"&#xa0;")+y),b+="</div>"},_adjustInstDate:function(t,e,i){var s=t.selectedYear+("Y"===i?e:0),n=t.selectedMonth+("M"===i?e:0),o=Math.min(t.selectedDay,this._getDaysInMonth(s,n))+("D"===i?e:0),a=this._restrictMinMax(t,this._daylightSavingAdjust(new Date(s,n,o)));t.selectedDay=a.getDate(),t.drawMonth=t.selectedMonth=a.getMonth(),t.drawYear=t.selectedYear=a.getFullYear(),("M"===i||"Y"===i)&&this._notifyChange(t)},_restrictMinMax:function(t,e){var i=this._getMinMaxDate(t,"min"),s=this._getMinMaxDate(t,"max"),n=i&&i>e?i:e;return s&&n>s?s:n},_notifyChange:function(t){var e=this._get(t,"onChangeMonthYear");e&&e.apply(t.input?t.input[0]:null,[t.selectedYear,t.selectedMonth+1,t])},_getNumberOfMonths:function(t){var e=this._get(t,"numberOfMonths");return null==e?[1,1]:"number"==typeof e?[1,e]:e},_getMinMaxDate:function(t,e){return this._determineDate(t,this._get(t,e+"Date"),null)},_getDaysInMonth:function(t,e){return 32-this._daylightSavingAdjust(new Date(t,e,32)).getDate()},_getFirstDayOfMonth:function(t,e){return new Date(t,e,1).getDay()},_canAdjustMonth:function(t,e,i,s){var n=this._getNumberOfMonths(t),o=this._daylightSavingAdjust(new Date(i,s+(0>e?e:n[0]*n[1]),1));return 0>e&&o.setDate(this._getDaysInMonth(o.getFullYear(),o.getMonth())),this._isInRange(t,o)},_isInRange:function(t,e){var i,s,n=this._getMinMaxDate(t,"min"),o=this._getMinMaxDate(t,"max"),a=null,r=null,h=this._get(t,"yearRange");return h&&(i=h.split(":"),s=(new Date).getFullYear(),a=parseInt(i[0],10),r=parseInt(i[1],10),i[0].match(/[+\-].*/)&&(a+=s),i[1].match(/[+\-].*/)&&(r+=s)),(!n||e.getTime()>=n.getTime())&&(!o||e.getTime()<=o.getTime())&&(!a||e.getFullYear()>=a)&&(!r||r>=e.getFullYear())},_getFormatConfig:function(t){var e=this._get(t,"shortYearCutoff");return e="string"!=typeof e?e:(new Date).getFullYear()%100+parseInt(e,10),{shortYearCutoff:e,dayNamesShort:this._get(t,"dayNamesShort"),dayNames:this._get(t,"dayNames"),monthNamesShort:this._get(t,"monthNamesShort"),monthNames:this._get(t,"monthNames")}},_formatDate:function(t,e,i,s){e||(t.currentDay=t.selectedDay,t.currentMonth=t.selectedMonth,t.currentYear=t.selectedYear);var n=e?"object"==typeof e?e:this._daylightSavingAdjust(new Date(s,i,e)):this._daylightSavingAdjust(new Date(t.currentYear,t.currentMonth,t.currentDay));return this.formatDate(this._get(t,"dateFormat"),n,this._getFormatConfig(t))}}),t.fn.datepicker=function(e){if(!this.length)return this;t.datepicker.initialized||(t(document).on("mousedown",t.datepicker._checkExternalClick),t.datepicker.initialized=!0),0===t("#"+t.datepicker._mainDivId).length&&t("body").append(t.datepicker.dpDiv);var i=Array.prototype.slice.call(arguments,1);return"string"!=typeof e||"isDisabled"!==e&&"getDate"!==e&&"widget"!==e?"option"===e&&2===arguments.length&&"string"==typeof arguments[1]?t.datepicker["_"+e+"Datepicker"].apply(t.datepicker,[this[0]].concat(i)):this.each(function(){"string"==typeof e?t.datepicker["_"+e+"Datepicker"].apply(t.datepicker,[this].concat(i)):t.datepicker._attachDatepicker(this,e)}):t.datepicker["_"+e+"Datepicker"].apply(t.datepicker,[this[0]].concat(i))},t.datepicker=new s,t.datepicker.initialized=!1,t.datepicker.uuid=(new Date).getTime(),t.datepicker.version="1.12.1",t.datepicker,t.ui.ie=!!/msie [\w.]+/.exec(navigator.userAgent.toLowerCase());var _=!1;t(document).on("mouseup",function(){_=!1}),t.widget("ui.mouse",{version:"1.12.1",options:{cancel:"input, textarea, button, select, option",distance:1,delay:0},_mouseInit:function(){var e=this;this.element.on("mousedown."+this.widgetName,function(t){return e._mouseDown(t)}).on("click."+this.widgetName,function(i){return!0===t.data(i.target,e.widgetName+".preventClickEvent")?(t.removeData(i.target,e.widgetName+".preventClickEvent"),i.stopImmediatePropagation(),!1):void 0}),this.started=!1},_mouseDestroy:function(){this.element.off("."+this.widgetName),this._mouseMoveDelegate&&this.document.off("mousemove."+this.widgetName,this._mouseMoveDelegate).off("mouseup."+this.widgetName,this._mouseUpDelegate)},_mouseDown:function(e){if(!_){this._mouseMoved=!1,this._mouseStarted&&this._mouseUp(e),this._mouseDownEvent=e;var i=this,s=1===e.which,n="string"==typeof this.options.cancel&&e.target.nodeName?t(e.target).closest(this.options.cancel).length:!1;return s&&!n&&this._mouseCapture(e)?(this.mouseDelayMet=!this.options.delay,this.mouseDelayMet||(this._mouseDelayTimer=setTimeout(function(){i.mouseDelayMet=!0},this.options.delay)),this._mouseDistanceMet(e)&&this._mouseDelayMet(e)&&(this._mouseStarted=this._mouseStart(e)!==!1,!this._mouseStarted)?(e.preventDefault(),!0):(!0===t.data(e.target,this.widgetName+".preventClickEvent")&&t.removeData(e.target,this.widgetName+".preventClickEvent"),this._mouseMoveDelegate=function(t){return i._mouseMove(t)},this._mouseUpDelegate=function(t){return i._mouseUp(t)},this.document.on("mousemove."+this.widgetName,this._mouseMoveDelegate).on("mouseup."+this.widgetName,this._mouseUpDelegate),e.preventDefault(),_=!0,!0)):!0}},_mouseMove:function(e){if(this._mouseMoved){if(t.ui.ie&&(!document.documentMode||9>document.documentMode)&&!e.button)return this._mouseUp(e);if(!e.which)if(e.originalEvent.altKey||e.originalEvent.ctrlKey||e.originalEvent.metaKey||e.originalEvent.shiftKey)this.ignoreMissingWhich=!0;else if(!this.ignoreMissingWhich)return this._mouseUp(e)}return(e.which||e.button)&&(this._mouseMoved=!0),this._mouseStarted?(this._mouseDrag(e),e.preventDefault()):(this._mouseDistanceMet(e)&&this._mouseDelayMet(e)&&(this._mouseStarted=this._mouseStart(this._mouseDownEvent,e)!==!1,this._mouseStarted?this._mouseDrag(e):this._mouseUp(e)),!this._mouseStarted)},_mouseUp:function(e){this.document.off("mousemove."+this.widgetName,this._mouseMoveDelegate).off("mouseup."+this.widgetName,this._mouseUpDelegate),this._mouseStarted&&(this._mouseStarted=!1,e.target===this._mouseDownEvent.target&&t.data(e.target,this.widgetName+".preventClickEvent",!0),this._mouseStop(e)),this._mouseDelayTimer&&(clearTimeout(this._mouseDelayTimer),delete this._mouseDelayTimer),this.ignoreMissingWhich=!1,_=!1,e.preventDefault()},_mouseDistanceMet:function(t){return Math.max(Math.abs(this._mouseDownEvent.pageX-t.pageX),Math.abs(this._mouseDownEvent.pageY-t.pageY))>=this.options.distance},_mouseDelayMet:function(){return this.mouseDelayMet},_mouseStart:function(){},_mouseDrag:function(){},_mouseStop:function(){},_mouseCapture:function(){return!0}}),t.ui.plugin={add:function(e,i,s){var n,o=t.ui[e].prototype;for(n in s)o.plugins[n]=o.plugins[n]||[],o.plugins[n].push([i,s[n]])},call:function(t,e,i,s){var n,o=t.plugins[e];if(o&&(s||t.element[0].parentNode&&11!==t.element[0].parentNode.nodeType))for(n=0;o.length>n;n++)t.options[o[n][0]]&&o[n][1].apply(t.element,i)}},t.ui.safeBlur=function(e){e&&"body"!==e.nodeName.toLowerCase()&&t(e).trigger("blur")},t.widget("ui.draggable",t.ui.mouse,{version:"1.12.1",widgetEventPrefix:"drag",options:{addClasses:!0,appendTo:"parent",axis:!1,connectToSortable:!1,containment:!1,cursor:"auto",cursorAt:!1,grid:!1,handle:!1,helper:"original",iframeFix:!1,opacity:!1,refreshPositions:!1,revert:!1,revertDuration:500,scope:"default",scroll:!0,scrollSensitivity:20,scrollSpeed:20,snap:!1,snapMode:"both",snapTolerance:20,stack:!1,zIndex:!1,drag:null,start:null,stop:null},_create:function(){"original"===this.options.helper&&this._setPositionRelative(),this.options.addClasses&&this._addClass("ui-draggable"),this._setHandleClassName(),this._mouseInit()},_setOption:function(t,e){this._super(t,e),"handle"===t&&(this._removeHandleClassName(),this._setHandleClassName())},_destroy:function(){return(this.helper||this.element).is(".ui-draggable-dragging")?(this.destroyOnClear=!0,void 0):(this._removeHandleClassName(),this._mouseDestroy(),void 0)},_mouseCapture:function(e){var i=this.options;return this.helper||i.disabled||t(e.target).closest(".ui-resizable-handle").length>0?!1:(this.handle=this._getHandle(e),this.handle?(this._blurActiveElement(e),this._blockFrames(i.iframeFix===!0?"iframe":i.iframeFix),!0):!1)},_blockFrames:function(e){this.iframeBlocks=this.document.find(e).map(function(){var e=t(this);return t("<div>").css("position","absolute").appendTo(e.parent()).outerWidth(e.outerWidth()).outerHeight(e.outerHeight()).offset(e.offset())[0]})},_unblockFrames:function(){this.iframeBlocks&&(this.iframeBlocks.remove(),delete this.iframeBlocks)},_blurActiveElement:function(e){var i=t.ui.safeActiveElement(this.document[0]),s=t(e.target);s.closest(i).length||t.ui.safeBlur(i)},_mouseStart:function(e){var i=this.options;return this.helper=this._createHelper(e),this._addClass(this.helper,"ui-draggable-dragging"),this._cacheHelperProportions(),t.ui.ddmanager&&(t.ui.ddmanager.current=this),this._cacheMargins(),this.cssPosition=this.helper.css("position"),this.scrollParent=this.helper.scrollParent(!0),this.offsetParent=this.helper.offsetParent(),this.hasFixedAncestor=this.helper.parents().filter(function(){return"fixed"===t(this).css("position")}).length>0,this.positionAbs=this.element.offset(),this._refreshOffsets(e),this.originalPosition=this.position=this._generatePosition(e,!1),this.originalPageX=e.pageX,this.originalPageY=e.pageY,i.cursorAt&&this._adjustOffsetFromHelper(i.cursorAt),this._setContainment(),this._trigger("start",e)===!1?(this._clear(),!1):(this._cacheHelperProportions(),t.ui.ddmanager&&!i.dropBehaviour&&t.ui.ddmanager.prepareOffsets(this,e),this._mouseDrag(e,!0),t.ui.ddmanager&&t.ui.ddmanager.dragStart(this,e),!0)},_refreshOffsets:function(t){this.offset={top:this.positionAbs.top-this.margins.top,left:this.positionAbs.left-this.margins.left,scroll:!1,parent:this._getParentOffset(),relative:this._getRelativeOffset()},this.offset.click={left:t.pageX-this.offset.left,top:t.pageY-this.offset.top}},_mouseDrag:function(e,i){if(this.hasFixedAncestor&&(this.offset.parent=this._getParentOffset()),this.position=this._generatePosition(e,!0),this.positionAbs=this._convertPositionTo("absolute"),!i){var s=this._uiHash();if(this._trigger("drag",e,s)===!1)return this._mouseUp(new t.Event("mouseup",e)),!1;this.position=s.position}return this.helper[0].style.left=this.position.left+"px",this.helper[0].style.top=this.position.top+"px",t.ui.ddmanager&&t.ui.ddmanager.drag(this,e),!1},_mouseStop:function(e){var i=this,s=!1;return t.ui.ddmanager&&!this.options.dropBehaviour&&(s=t.ui.ddmanager.drop(this,e)),this.dropped&&(s=this.dropped,this.dropped=!1),"invalid"===this.options.revert&&!s||"valid"===this.options.revert&&s||this.options.revert===!0||t.isFunction(this.options.revert)&&this.options.revert.call(this.element,s)?t(this.helper).animate(this.originalPosition,parseInt(this.options.revertDuration,10),function(){i._trigger("stop",e)!==!1&&i._clear()}):this._trigger("stop",e)!==!1&&this._clear(),!1},_mouseUp:function(e){return this._unblockFrames(),t.ui.ddmanager&&t.ui.ddmanager.dragStop(this,e),this.handleElement.is(e.target)&&this.element.trigger("focus"),t.ui.mouse.prototype._mouseUp.call(this,e)},cancel:function(){return this.helper.is(".ui-draggable-dragging")?this._mouseUp(new t.Event("mouseup",{target:this.element[0]})):this._clear(),this},_getHandle:function(e){return this.options.handle?!!t(e.target).closest(this.element.find(this.options.handle)).length:!0},_setHandleClassName:function(){this.handleElement=this.options.handle?this.element.find(this.options.handle):this.element,this._addClass(this.handleElement,"ui-draggable-handle")},_removeHandleClassName:function(){this._removeClass(this.handleElement,"ui-draggable-handle")},_createHelper:function(e){var i=this.options,s=t.isFunction(i.helper),n=s?t(i.helper.apply(this.element[0],[e])):"clone"===i.helper?this.element.clone().removeAttr("id"):this.element;return n.parents("body").length||n.appendTo("parent"===i.appendTo?this.element[0].parentNode:i.appendTo),s&&n[0]===this.element[0]&&this._setPositionRelative(),n[0]===this.element[0]||/(fixed|absolute)/.test(n.css("position"))||n.css("position","absolute"),n},_setPositionRelative:function(){/^(?:r|a|f)/.test(this.element.css("position"))||(this.element[0].style.position="relative")},_adjustOffsetFromHelper:function(e){"string"==typeof e&&(e=e.split(" ")),t.isArray(e)&&(e={left:+e[0],top:+e[1]||0}),"left"in e&&(this.offset.click.left=e.left+this.margins.left),"right"in e&&(this.offset.click.left=this.helperProportions.width-e.right+this.margins.left),"top"in e&&(this.offset.click.top=e.top+this.margins.top),"bottom"in e&&(this.offset.click.top=this.helperProportions.height-e.bottom+this.margins.top)},_isRootNode:function(t){return/(html|body)/i.test(t.tagName)||t===this.document[0]},_getParentOffset:function(){var e=this.offsetParent.offset(),i=this.document[0];return"absolute"===this.cssPosition&&this.scrollParent[0]!==i&&t.contains(this.scrollParent[0],this.offsetParent[0])&&(e.left+=this.scrollParent.scrollLeft(),e.top+=this.scrollParent.scrollTop()),this._isRootNode(this.offsetParent[0])&&(e={top:0,left:0}),{top:e.top+(parseInt(this.offsetParent.css("borderTopWidth"),10)||0),left:e.left+(parseInt(this.offsetParent.css("borderLeftWidth"),10)||0)}},_getRelativeOffset:function(){if("relative"!==this.cssPosition)return{top:0,left:0};var t=this.element.position(),e=this._isRootNode(this.scrollParent[0]);return{top:t.top-(parseInt(this.helper.css("top"),10)||0)+(e?0:this.scrollParent.scrollTop()),left:t.left-(parseInt(this.helper.css("left"),10)||0)+(e?0:this.scrollParent.scrollLeft())}
},_cacheMargins:function(){this.margins={left:parseInt(this.element.css("marginLeft"),10)||0,top:parseInt(this.element.css("marginTop"),10)||0,right:parseInt(this.element.css("marginRight"),10)||0,bottom:parseInt(this.element.css("marginBottom"),10)||0}},_cacheHelperProportions:function(){this.helperProportions={width:this.helper.outerWidth(),height:this.helper.outerHeight()}},_setContainment:function(){var e,i,s,n=this.options,o=this.document[0];return this.relativeContainer=null,n.containment?"window"===n.containment?(this.containment=[t(window).scrollLeft()-this.offset.relative.left-this.offset.parent.left,t(window).scrollTop()-this.offset.relative.top-this.offset.parent.top,t(window).scrollLeft()+t(window).width()-this.helperProportions.width-this.margins.left,t(window).scrollTop()+(t(window).height()||o.body.parentNode.scrollHeight)-this.helperProportions.height-this.margins.top],void 0):"document"===n.containment?(this.containment=[0,0,t(o).width()-this.helperProportions.width-this.margins.left,(t(o).height()||o.body.parentNode.scrollHeight)-this.helperProportions.height-this.margins.top],void 0):n.containment.constructor===Array?(this.containment=n.containment,void 0):("parent"===n.containment&&(n.containment=this.helper[0].parentNode),i=t(n.containment),s=i[0],s&&(e=/(scroll|auto)/.test(i.css("overflow")),this.containment=[(parseInt(i.css("borderLeftWidth"),10)||0)+(parseInt(i.css("paddingLeft"),10)||0),(parseInt(i.css("borderTopWidth"),10)||0)+(parseInt(i.css("paddingTop"),10)||0),(e?Math.max(s.scrollWidth,s.offsetWidth):s.offsetWidth)-(parseInt(i.css("borderRightWidth"),10)||0)-(parseInt(i.css("paddingRight"),10)||0)-this.helperProportions.width-this.margins.left-this.margins.right,(e?Math.max(s.scrollHeight,s.offsetHeight):s.offsetHeight)-(parseInt(i.css("borderBottomWidth"),10)||0)-(parseInt(i.css("paddingBottom"),10)||0)-this.helperProportions.height-this.margins.top-this.margins.bottom],this.relativeContainer=i),void 0):(this.containment=null,void 0)},_convertPositionTo:function(t,e){e||(e=this.position);var i="absolute"===t?1:-1,s=this._isRootNode(this.scrollParent[0]);return{top:e.top+this.offset.relative.top*i+this.offset.parent.top*i-("fixed"===this.cssPosition?-this.offset.scroll.top:s?0:this.offset.scroll.top)*i,left:e.left+this.offset.relative.left*i+this.offset.parent.left*i-("fixed"===this.cssPosition?-this.offset.scroll.left:s?0:this.offset.scroll.left)*i}},_generatePosition:function(t,e){var i,s,n,o,a=this.options,r=this._isRootNode(this.scrollParent[0]),h=t.pageX,l=t.pageY;return r&&this.offset.scroll||(this.offset.scroll={top:this.scrollParent.scrollTop(),left:this.scrollParent.scrollLeft()}),e&&(this.containment&&(this.relativeContainer?(s=this.relativeContainer.offset(),i=[this.containment[0]+s.left,this.containment[1]+s.top,this.containment[2]+s.left,this.containment[3]+s.top]):i=this.containment,t.pageX-this.offset.click.left<i[0]&&(h=i[0]+this.offset.click.left),t.pageY-this.offset.click.top<i[1]&&(l=i[1]+this.offset.click.top),t.pageX-this.offset.click.left>i[2]&&(h=i[2]+this.offset.click.left),t.pageY-this.offset.click.top>i[3]&&(l=i[3]+this.offset.click.top)),a.grid&&(n=a.grid[1]?this.originalPageY+Math.round((l-this.originalPageY)/a.grid[1])*a.grid[1]:this.originalPageY,l=i?n-this.offset.click.top>=i[1]||n-this.offset.click.top>i[3]?n:n-this.offset.click.top>=i[1]?n-a.grid[1]:n+a.grid[1]:n,o=a.grid[0]?this.originalPageX+Math.round((h-this.originalPageX)/a.grid[0])*a.grid[0]:this.originalPageX,h=i?o-this.offset.click.left>=i[0]||o-this.offset.click.left>i[2]?o:o-this.offset.click.left>=i[0]?o-a.grid[0]:o+a.grid[0]:o),"y"===a.axis&&(h=this.originalPageX),"x"===a.axis&&(l=this.originalPageY)),{top:l-this.offset.click.top-this.offset.relative.top-this.offset.parent.top+("fixed"===this.cssPosition?-this.offset.scroll.top:r?0:this.offset.scroll.top),left:h-this.offset.click.left-this.offset.relative.left-this.offset.parent.left+("fixed"===this.cssPosition?-this.offset.scroll.left:r?0:this.offset.scroll.left)}},_clear:function(){this._removeClass(this.helper,"ui-draggable-dragging"),this.helper[0]===this.element[0]||this.cancelHelperRemoval||this.helper.remove(),this.helper=null,this.cancelHelperRemoval=!1,this.destroyOnClear&&this.destroy()},_trigger:function(e,i,s){return s=s||this._uiHash(),t.ui.plugin.call(this,e,[i,s,this],!0),/^(drag|start|stop)/.test(e)&&(this.positionAbs=this._convertPositionTo("absolute"),s.offset=this.positionAbs),t.Widget.prototype._trigger.call(this,e,i,s)},plugins:{},_uiHash:function(){return{helper:this.helper,position:this.position,originalPosition:this.originalPosition,offset:this.positionAbs}}}),t.ui.plugin.add("draggable","connectToSortable",{start:function(e,i,s){var n=t.extend({},i,{item:s.element});s.sortables=[],t(s.options.connectToSortable).each(function(){var i=t(this).sortable("instance");i&&!i.options.disabled&&(s.sortables.push(i),i.refreshPositions(),i._trigger("activate",e,n))})},stop:function(e,i,s){var n=t.extend({},i,{item:s.element});s.cancelHelperRemoval=!1,t.each(s.sortables,function(){var t=this;t.isOver?(t.isOver=0,s.cancelHelperRemoval=!0,t.cancelHelperRemoval=!1,t._storedCSS={position:t.placeholder.css("position"),top:t.placeholder.css("top"),left:t.placeholder.css("left")},t._mouseStop(e),t.options.helper=t.options._helper):(t.cancelHelperRemoval=!0,t._trigger("deactivate",e,n))})},drag:function(e,i,s){t.each(s.sortables,function(){var n=!1,o=this;o.positionAbs=s.positionAbs,o.helperProportions=s.helperProportions,o.offset.click=s.offset.click,o._intersectsWith(o.containerCache)&&(n=!0,t.each(s.sortables,function(){return this.positionAbs=s.positionAbs,this.helperProportions=s.helperProportions,this.offset.click=s.offset.click,this!==o&&this._intersectsWith(this.containerCache)&&t.contains(o.element[0],this.element[0])&&(n=!1),n})),n?(o.isOver||(o.isOver=1,s._parent=i.helper.parent(),o.currentItem=i.helper.appendTo(o.element).data("ui-sortable-item",!0),o.options._helper=o.options.helper,o.options.helper=function(){return i.helper[0]},e.target=o.currentItem[0],o._mouseCapture(e,!0),o._mouseStart(e,!0,!0),o.offset.click.top=s.offset.click.top,o.offset.click.left=s.offset.click.left,o.offset.parent.left-=s.offset.parent.left-o.offset.parent.left,o.offset.parent.top-=s.offset.parent.top-o.offset.parent.top,s._trigger("toSortable",e),s.dropped=o.element,t.each(s.sortables,function(){this.refreshPositions()}),s.currentItem=s.element,o.fromOutside=s),o.currentItem&&(o._mouseDrag(e),i.position=o.position)):o.isOver&&(o.isOver=0,o.cancelHelperRemoval=!0,o.options._revert=o.options.revert,o.options.revert=!1,o._trigger("out",e,o._uiHash(o)),o._mouseStop(e,!0),o.options.revert=o.options._revert,o.options.helper=o.options._helper,o.placeholder&&o.placeholder.remove(),i.helper.appendTo(s._parent),s._refreshOffsets(e),i.position=s._generatePosition(e,!0),s._trigger("fromSortable",e),s.dropped=!1,t.each(s.sortables,function(){this.refreshPositions()}))})}}),t.ui.plugin.add("draggable","cursor",{start:function(e,i,s){var n=t("body"),o=s.options;n.css("cursor")&&(o._cursor=n.css("cursor")),n.css("cursor",o.cursor)},stop:function(e,i,s){var n=s.options;n._cursor&&t("body").css("cursor",n._cursor)}}),t.ui.plugin.add("draggable","opacity",{start:function(e,i,s){var n=t(i.helper),o=s.options;n.css("opacity")&&(o._opacity=n.css("opacity")),n.css("opacity",o.opacity)},stop:function(e,i,s){var n=s.options;n._opacity&&t(i.helper).css("opacity",n._opacity)}}),t.ui.plugin.add("draggable","scroll",{start:function(t,e,i){i.scrollParentNotHidden||(i.scrollParentNotHidden=i.helper.scrollParent(!1)),i.scrollParentNotHidden[0]!==i.document[0]&&"HTML"!==i.scrollParentNotHidden[0].tagName&&(i.overflowOffset=i.scrollParentNotHidden.offset())},drag:function(e,i,s){var n=s.options,o=!1,a=s.scrollParentNotHidden[0],r=s.document[0];a!==r&&"HTML"!==a.tagName?(n.axis&&"x"===n.axis||(s.overflowOffset.top+a.offsetHeight-e.pageY<n.scrollSensitivity?a.scrollTop=o=a.scrollTop+n.scrollSpeed:e.pageY-s.overflowOffset.top<n.scrollSensitivity&&(a.scrollTop=o=a.scrollTop-n.scrollSpeed)),n.axis&&"y"===n.axis||(s.overflowOffset.left+a.offsetWidth-e.pageX<n.scrollSensitivity?a.scrollLeft=o=a.scrollLeft+n.scrollSpeed:e.pageX-s.overflowOffset.left<n.scrollSensitivity&&(a.scrollLeft=o=a.scrollLeft-n.scrollSpeed))):(n.axis&&"x"===n.axis||(e.pageY-t(r).scrollTop()<n.scrollSensitivity?o=t(r).scrollTop(t(r).scrollTop()-n.scrollSpeed):t(window).height()-(e.pageY-t(r).scrollTop())<n.scrollSensitivity&&(o=t(r).scrollTop(t(r).scrollTop()+n.scrollSpeed))),n.axis&&"y"===n.axis||(e.pageX-t(r).scrollLeft()<n.scrollSensitivity?o=t(r).scrollLeft(t(r).scrollLeft()-n.scrollSpeed):t(window).width()-(e.pageX-t(r).scrollLeft())<n.scrollSensitivity&&(o=t(r).scrollLeft(t(r).scrollLeft()+n.scrollSpeed)))),o!==!1&&t.ui.ddmanager&&!n.dropBehaviour&&t.ui.ddmanager.prepareOffsets(s,e)}}),t.ui.plugin.add("draggable","snap",{start:function(e,i,s){var n=s.options;s.snapElements=[],t(n.snap.constructor!==String?n.snap.items||":data(ui-draggable)":n.snap).each(function(){var e=t(this),i=e.offset();this!==s.element[0]&&s.snapElements.push({item:this,width:e.outerWidth(),height:e.outerHeight(),top:i.top,left:i.left})})},drag:function(e,i,s){var n,o,a,r,h,l,c,u,d,p,f=s.options,g=f.snapTolerance,m=i.offset.left,_=m+s.helperProportions.width,v=i.offset.top,b=v+s.helperProportions.height;for(d=s.snapElements.length-1;d>=0;d--)h=s.snapElements[d].left-s.margins.left,l=h+s.snapElements[d].width,c=s.snapElements[d].top-s.margins.top,u=c+s.snapElements[d].height,h-g>_||m>l+g||c-g>b||v>u+g||!t.contains(s.snapElements[d].item.ownerDocument,s.snapElements[d].item)?(s.snapElements[d].snapping&&s.options.snap.release&&s.options.snap.release.call(s.element,e,t.extend(s._uiHash(),{snapItem:s.snapElements[d].item})),s.snapElements[d].snapping=!1):("inner"!==f.snapMode&&(n=g>=Math.abs(c-b),o=g>=Math.abs(u-v),a=g>=Math.abs(h-_),r=g>=Math.abs(l-m),n&&(i.position.top=s._convertPositionTo("relative",{top:c-s.helperProportions.height,left:0}).top),o&&(i.position.top=s._convertPositionTo("relative",{top:u,left:0}).top),a&&(i.position.left=s._convertPositionTo("relative",{top:0,left:h-s.helperProportions.width}).left),r&&(i.position.left=s._convertPositionTo("relative",{top:0,left:l}).left)),p=n||o||a||r,"outer"!==f.snapMode&&(n=g>=Math.abs(c-v),o=g>=Math.abs(u-b),a=g>=Math.abs(h-m),r=g>=Math.abs(l-_),n&&(i.position.top=s._convertPositionTo("relative",{top:c,left:0}).top),o&&(i.position.top=s._convertPositionTo("relative",{top:u-s.helperProportions.height,left:0}).top),a&&(i.position.left=s._convertPositionTo("relative",{top:0,left:h}).left),r&&(i.position.left=s._convertPositionTo("relative",{top:0,left:l-s.helperProportions.width}).left)),!s.snapElements[d].snapping&&(n||o||a||r||p)&&s.options.snap.snap&&s.options.snap.snap.call(s.element,e,t.extend(s._uiHash(),{snapItem:s.snapElements[d].item})),s.snapElements[d].snapping=n||o||a||r||p)}}),t.ui.plugin.add("draggable","stack",{start:function(e,i,s){var n,o=s.options,a=t.makeArray(t(o.stack)).sort(function(e,i){return(parseInt(t(e).css("zIndex"),10)||0)-(parseInt(t(i).css("zIndex"),10)||0)});a.length&&(n=parseInt(t(a[0]).css("zIndex"),10)||0,t(a).each(function(e){t(this).css("zIndex",n+e)}),this.css("zIndex",n+a.length))}}),t.ui.plugin.add("draggable","zIndex",{start:function(e,i,s){var n=t(i.helper),o=s.options;n.css("zIndex")&&(o._zIndex=n.css("zIndex")),n.css("zIndex",o.zIndex)},stop:function(e,i,s){var n=s.options;n._zIndex&&t(i.helper).css("zIndex",n._zIndex)}}),t.ui.draggable,t.widget("ui.resizable",t.ui.mouse,{version:"1.12.1",widgetEventPrefix:"resize",options:{alsoResize:!1,animate:!1,animateDuration:"slow",animateEasing:"swing",aspectRatio:!1,autoHide:!1,classes:{"ui-resizable-se":"ui-icon ui-icon-gripsmall-diagonal-se"},containment:!1,ghost:!1,grid:!1,handles:"e,s,se",helper:!1,maxHeight:null,maxWidth:null,minHeight:10,minWidth:10,zIndex:90,resize:null,start:null,stop:null},_num:function(t){return parseFloat(t)||0},_isNumber:function(t){return!isNaN(parseFloat(t))},_hasScroll:function(e,i){if("hidden"===t(e).css("overflow"))return!1;var s=i&&"left"===i?"scrollLeft":"scrollTop",n=!1;return e[s]>0?!0:(e[s]=1,n=e[s]>0,e[s]=0,n)},_create:function(){var e,i=this.options,s=this;this._addClass("ui-resizable"),t.extend(this,{_aspectRatio:!!i.aspectRatio,aspectRatio:i.aspectRatio,originalElement:this.element,_proportionallyResizeElements:[],_helper:i.helper||i.ghost||i.animate?i.helper||"ui-resizable-helper":null}),this.element[0].nodeName.match(/^(canvas|textarea|input|select|button|img)$/i)&&(this.element.wrap(t("<div class='ui-wrapper' style='overflow: hidden;'></div>").css({position:this.element.css("position"),width:this.element.outerWidth(),height:this.element.outerHeight(),top:this.element.css("top"),left:this.element.css("left")})),this.element=this.element.parent().data("ui-resizable",this.element.resizable("instance")),this.elementIsWrapper=!0,e={marginTop:this.originalElement.css("marginTop"),marginRight:this.originalElement.css("marginRight"),marginBottom:this.originalElement.css("marginBottom"),marginLeft:this.originalElement.css("marginLeft")},this.element.css(e),this.originalElement.css("margin",0),this.originalResizeStyle=this.originalElement.css("resize"),this.originalElement.css("resize","none"),this._proportionallyResizeElements.push(this.originalElement.css({position:"static",zoom:1,display:"block"})),this.originalElement.css(e),this._proportionallyResize()),this._setupHandles(),i.autoHide&&t(this.element).on("mouseenter",function(){i.disabled||(s._removeClass("ui-resizable-autohide"),s._handles.show())}).on("mouseleave",function(){i.disabled||s.resizing||(s._addClass("ui-resizable-autohide"),s._handles.hide())}),this._mouseInit()},_destroy:function(){this._mouseDestroy();var e,i=function(e){t(e).removeData("resizable").removeData("ui-resizable").off(".resizable").find(".ui-resizable-handle").remove()};return this.elementIsWrapper&&(i(this.element),e=this.element,this.originalElement.css({position:e.css("position"),width:e.outerWidth(),height:e.outerHeight(),top:e.css("top"),left:e.css("left")}).insertAfter(e),e.remove()),this.originalElement.css("resize",this.originalResizeStyle),i(this.originalElement),this},_setOption:function(t,e){switch(this._super(t,e),t){case"handles":this._removeHandles(),this._setupHandles();break;default:}},_setupHandles:function(){var e,i,s,n,o,a=this.options,r=this;if(this.handles=a.handles||(t(".ui-resizable-handle",this.element).length?{n:".ui-resizable-n",e:".ui-resizable-e",s:".ui-resizable-s",w:".ui-resizable-w",se:".ui-resizable-se",sw:".ui-resizable-sw",ne:".ui-resizable-ne",nw:".ui-resizable-nw"}:"e,s,se"),this._handles=t(),this.handles.constructor===String)for("all"===this.handles&&(this.handles="n,e,s,w,se,sw,ne,nw"),s=this.handles.split(","),this.handles={},i=0;s.length>i;i++)e=t.trim(s[i]),n="ui-resizable-"+e,o=t("<div>"),this._addClass(o,"ui-resizable-handle "+n),o.css({zIndex:a.zIndex}),this.handles[e]=".ui-resizable-"+e,this.element.append(o);this._renderAxis=function(e){var i,s,n,o;e=e||this.element;for(i in this.handles)this.handles[i].constructor===String?this.handles[i]=this.element.children(this.handles[i]).first().show():(this.handles[i].jquery||this.handles[i].nodeType)&&(this.handles[i]=t(this.handles[i]),this._on(this.handles[i],{mousedown:r._mouseDown})),this.elementIsWrapper&&this.originalElement[0].nodeName.match(/^(textarea|input|select|button)$/i)&&(s=t(this.handles[i],this.element),o=/sw|ne|nw|se|n|s/.test(i)?s.outerHeight():s.outerWidth(),n=["padding",/ne|nw|n/.test(i)?"Top":/se|sw|s/.test(i)?"Bottom":/^e$/.test(i)?"Right":"Left"].join(""),e.css(n,o),this._proportionallyResize()),this._handles=this._handles.add(this.handles[i])},this._renderAxis(this.element),this._handles=this._handles.add(this.element.find(".ui-resizable-handle")),this._handles.disableSelection(),this._handles.on("mouseover",function(){r.resizing||(this.className&&(o=this.className.match(/ui-resizable-(se|sw|ne|nw|n|e|s|w)/i)),r.axis=o&&o[1]?o[1]:"se")}),a.autoHide&&(this._handles.hide(),this._addClass("ui-resizable-autohide"))},_removeHandles:function(){this._handles.remove()},_mouseCapture:function(e){var i,s,n=!1;for(i in this.handles)s=t(this.handles[i])[0],(s===e.target||t.contains(s,e.target))&&(n=!0);return!this.options.disabled&&n},_mouseStart:function(e){var i,s,n,o=this.options,a=this.element;return this.resizing=!0,this._renderProxy(),i=this._num(this.helper.css("left")),s=this._num(this.helper.css("top")),o.containment&&(i+=t(o.containment).scrollLeft()||0,s+=t(o.containment).scrollTop()||0),this.offset=this.helper.offset(),this.position={left:i,top:s},this.size=this._helper?{width:this.helper.width(),height:this.helper.height()}:{width:a.width(),height:a.height()},this.originalSize=this._helper?{width:a.outerWidth(),height:a.outerHeight()}:{width:a.width(),height:a.height()},this.sizeDiff={width:a.outerWidth()-a.width(),height:a.outerHeight()-a.height()},this.originalPosition={left:i,top:s},this.originalMousePosition={left:e.pageX,top:e.pageY},this.aspectRatio="number"==typeof o.aspectRatio?o.aspectRatio:this.originalSize.width/this.originalSize.height||1,n=t(".ui-resizable-"+this.axis).css("cursor"),t("body").css("cursor","auto"===n?this.axis+"-resize":n),this._addClass("ui-resizable-resizing"),this._propagate("start",e),!0},_mouseDrag:function(e){var i,s,n=this.originalMousePosition,o=this.axis,a=e.pageX-n.left||0,r=e.pageY-n.top||0,h=this._change[o];return this._updatePrevProperties(),h?(i=h.apply(this,[e,a,r]),this._updateVirtualBoundaries(e.shiftKey),(this._aspectRatio||e.shiftKey)&&(i=this._updateRatio(i,e)),i=this._respectSize(i,e),this._updateCache(i),this._propagate("resize",e),s=this._applyChanges(),!this._helper&&this._proportionallyResizeElements.length&&this._proportionallyResize(),t.isEmptyObject(s)||(this._updatePrevProperties(),this._trigger("resize",e,this.ui()),this._applyChanges()),!1):!1},_mouseStop:function(e){this.resizing=!1;var i,s,n,o,a,r,h,l=this.options,c=this;return this._helper&&(i=this._proportionallyResizeElements,s=i.length&&/textarea/i.test(i[0].nodeName),n=s&&this._hasScroll(i[0],"left")?0:c.sizeDiff.height,o=s?0:c.sizeDiff.width,a={width:c.helper.width()-o,height:c.helper.height()-n},r=parseFloat(c.element.css("left"))+(c.position.left-c.originalPosition.left)||null,h=parseFloat(c.element.css("top"))+(c.position.top-c.originalPosition.top)||null,l.animate||this.element.css(t.extend(a,{top:h,left:r})),c.helper.height(c.size.height),c.helper.width(c.size.width),this._helper&&!l.animate&&this._proportionallyResize()),t("body").css("cursor","auto"),this._removeClass("ui-resizable-resizing"),this._propagate("stop",e),this._helper&&this.helper.remove(),!1},_updatePrevProperties:function(){this.prevPosition={top:this.position.top,left:this.position.left},this.prevSize={width:this.size.width,height:this.size.height}},_applyChanges:function(){var t={};return this.position.top!==this.prevPosition.top&&(t.top=this.position.top+"px"),this.position.left!==this.prevPosition.left&&(t.left=this.position.left+"px"),this.size.width!==this.prevSize.width&&(t.width=this.size.width+"px"),this.size.height!==this.prevSize.height&&(t.height=this.size.height+"px"),this.helper.css(t),t},_updateVirtualBoundaries:function(t){var e,i,s,n,o,a=this.options;o={minWidth:this._isNumber(a.minWidth)?a.minWidth:0,maxWidth:this._isNumber(a.maxWidth)?a.maxWidth:1/0,minHeight:this._isNumber(a.minHeight)?a.minHeight:0,maxHeight:this._isNumber(a.maxHeight)?a.maxHeight:1/0},(this._aspectRatio||t)&&(e=o.minHeight*this.aspectRatio,s=o.minWidth/this.aspectRatio,i=o.maxHeight*this.aspectRatio,n=o.maxWidth/this.aspectRatio,e>o.minWidth&&(o.minWidth=e),s>o.minHeight&&(o.minHeight=s),o.maxWidth>i&&(o.maxWidth=i),o.maxHeight>n&&(o.maxHeight=n)),this._vBoundaries=o},_updateCache:function(t){this.offset=this.helper.offset(),this._isNumber(t.left)&&(this.position.left=t.left),this._isNumber(t.top)&&(this.position.top=t.top),this._isNumber(t.height)&&(this.size.height=t.height),this._isNumber(t.width)&&(this.size.width=t.width)},_updateRatio:function(t){var e=this.position,i=this.size,s=this.axis;return this._isNumber(t.height)?t.width=t.height*this.aspectRatio:this._isNumber(t.width)&&(t.height=t.width/this.aspectRatio),"sw"===s&&(t.left=e.left+(i.width-t.width),t.top=null),"nw"===s&&(t.top=e.top+(i.height-t.height),t.left=e.left+(i.width-t.width)),t},_respectSize:function(t){var e=this._vBoundaries,i=this.axis,s=this._isNumber(t.width)&&e.maxWidth&&e.maxWidth<t.width,n=this._isNumber(t.height)&&e.maxHeight&&e.maxHeight<t.height,o=this._isNumber(t.width)&&e.minWidth&&e.minWidth>t.width,a=this._isNumber(t.height)&&e.minHeight&&e.minHeight>t.height,r=this.originalPosition.left+this.originalSize.width,h=this.originalPosition.top+this.originalSize.height,l=/sw|nw|w/.test(i),c=/nw|ne|n/.test(i);return o&&(t.width=e.minWidth),a&&(t.height=e.minHeight),s&&(t.width=e.maxWidth),n&&(t.height=e.maxHeight),o&&l&&(t.left=r-e.minWidth),s&&l&&(t.left=r-e.maxWidth),a&&c&&(t.top=h-e.minHeight),n&&c&&(t.top=h-e.maxHeight),t.width||t.height||t.left||!t.top?t.width||t.height||t.top||!t.left||(t.left=null):t.top=null,t},_getPaddingPlusBorderDimensions:function(t){for(var e=0,i=[],s=[t.css("borderTopWidth"),t.css("borderRightWidth"),t.css("borderBottomWidth"),t.css("borderLeftWidth")],n=[t.css("paddingTop"),t.css("paddingRight"),t.css("paddingBottom"),t.css("paddingLeft")];4>e;e++)i[e]=parseFloat(s[e])||0,i[e]+=parseFloat(n[e])||0;return{height:i[0]+i[2],width:i[1]+i[3]}},_proportionallyResize:function(){if(this._proportionallyResizeElements.length)for(var t,e=0,i=this.helper||this.element;this._proportionallyResizeElements.length>e;e++)t=this._proportionallyResizeElements[e],this.outerDimensions||(this.outerDimensions=this._getPaddingPlusBorderDimensions(t)),t.css({height:i.height()-this.outerDimensions.height||0,width:i.width()-this.outerDimensions.width||0})},_renderProxy:function(){var e=this.element,i=this.options;this.elementOffset=e.offset(),this._helper?(this.helper=this.helper||t("<div style='overflow:hidden;'></div>"),this._addClass(this.helper,this._helper),this.helper.css({width:this.element.outerWidth(),height:this.element.outerHeight(),position:"absolute",left:this.elementOffset.left+"px",top:this.elementOffset.top+"px",zIndex:++i.zIndex}),this.helper.appendTo("body").disableSelection()):this.helper=this.element},_change:{e:function(t,e){return{width:this.originalSize.width+e}},w:function(t,e){var i=this.originalSize,s=this.originalPosition;return{left:s.left+e,width:i.width-e}},n:function(t,e,i){var s=this.originalSize,n=this.originalPosition;return{top:n.top+i,height:s.height-i}},s:function(t,e,i){return{height:this.originalSize.height+i}},se:function(e,i,s){return t.extend(this._change.s.apply(this,arguments),this._change.e.apply(this,[e,i,s]))},sw:function(e,i,s){return t.extend(this._change.s.apply(this,arguments),this._change.w.apply(this,[e,i,s]))},ne:function(e,i,s){return t.extend(this._change.n.apply(this,arguments),this._change.e.apply(this,[e,i,s]))},nw:function(e,i,s){return t.extend(this._change.n.apply(this,arguments),this._change.w.apply(this,[e,i,s]))}},_propagate:function(e,i){t.ui.plugin.call(this,e,[i,this.ui()]),"resize"!==e&&this._trigger(e,i,this.ui())},plugins:{},ui:function(){return{originalElement:this.originalElement,element:this.element,helper:this.helper,position:this.position,size:this.size,originalSize:this.originalSize,originalPosition:this.originalPosition}}}),t.ui.plugin.add("resizable","animate",{stop:function(e){var i=t(this).resizable("instance"),s=i.options,n=i._proportionallyResizeElements,o=n.length&&/textarea/i.test(n[0].nodeName),a=o&&i._hasScroll(n[0],"left")?0:i.sizeDiff.height,r=o?0:i.sizeDiff.width,h={width:i.size.width-r,height:i.size.height-a},l=parseFloat(i.element.css("left"))+(i.position.left-i.originalPosition.left)||null,c=parseFloat(i.element.css("top"))+(i.position.top-i.originalPosition.top)||null;i.element.animate(t.extend(h,c&&l?{top:c,left:l}:{}),{duration:s.animateDuration,easing:s.animateEasing,step:function(){var s={width:parseFloat(i.element.css("width")),height:parseFloat(i.element.css("height")),top:parseFloat(i.element.css("top")),left:parseFloat(i.element.css("left"))};n&&n.length&&t(n[0]).css({width:s.width,height:s.height}),i._updateCache(s),i._propagate("resize",e)}})}}),t.ui.plugin.add("resizable","containment",{start:function(){var e,i,s,n,o,a,r,h=t(this).resizable("instance"),l=h.options,c=h.element,u=l.containment,d=u instanceof t?u.get(0):/parent/.test(u)?c.parent().get(0):u;d&&(h.containerElement=t(d),/document/.test(u)||u===document?(h.containerOffset={left:0,top:0},h.containerPosition={left:0,top:0},h.parentData={element:t(document),left:0,top:0,width:t(document).width(),height:t(document).height()||document.body.parentNode.scrollHeight}):(e=t(d),i=[],t(["Top","Right","Left","Bottom"]).each(function(t,s){i[t]=h._num(e.css("padding"+s))}),h.containerOffset=e.offset(),h.containerPosition=e.position(),h.containerSize={height:e.innerHeight()-i[3],width:e.innerWidth()-i[1]},s=h.containerOffset,n=h.containerSize.height,o=h.containerSize.width,a=h._hasScroll(d,"left")?d.scrollWidth:o,r=h._hasScroll(d)?d.scrollHeight:n,h.parentData={element:d,left:s.left,top:s.top,width:a,height:r}))},resize:function(e){var i,s,n,o,a=t(this).resizable("instance"),r=a.options,h=a.containerOffset,l=a.position,c=a._aspectRatio||e.shiftKey,u={top:0,left:0},d=a.containerElement,p=!0;d[0]!==document&&/static/.test(d.css("position"))&&(u=h),l.left<(a._helper?h.left:0)&&(a.size.width=a.size.width+(a._helper?a.position.left-h.left:a.position.left-u.left),c&&(a.size.height=a.size.width/a.aspectRatio,p=!1),a.position.left=r.helper?h.left:0),l.top<(a._helper?h.top:0)&&(a.size.height=a.size.height+(a._helper?a.position.top-h.top:a.position.top),c&&(a.size.width=a.size.height*a.aspectRatio,p=!1),a.position.top=a._helper?h.top:0),n=a.containerElement.get(0)===a.element.parent().get(0),o=/relative|absolute/.test(a.containerElement.css("position")),n&&o?(a.offset.left=a.parentData.left+a.position.left,a.offset.top=a.parentData.top+a.position.top):(a.offset.left=a.element.offset().left,a.offset.top=a.element.offset().top),i=Math.abs(a.sizeDiff.width+(a._helper?a.offset.left-u.left:a.offset.left-h.left)),s=Math.abs(a.sizeDiff.height+(a._helper?a.offset.top-u.top:a.offset.top-h.top)),i+a.size.width>=a.parentData.width&&(a.size.width=a.parentData.width-i,c&&(a.size.height=a.size.width/a.aspectRatio,p=!1)),s+a.size.height>=a.parentData.height&&(a.size.height=a.parentData.height-s,c&&(a.size.width=a.size.height*a.aspectRatio,p=!1)),p||(a.position.left=a.prevPosition.left,a.position.top=a.prevPosition.top,a.size.width=a.prevSize.width,a.size.height=a.prevSize.height)},stop:function(){var e=t(this).resizable("instance"),i=e.options,s=e.containerOffset,n=e.containerPosition,o=e.containerElement,a=t(e.helper),r=a.offset(),h=a.outerWidth()-e.sizeDiff.width,l=a.outerHeight()-e.sizeDiff.height;e._helper&&!i.animate&&/relative/.test(o.css("position"))&&t(this).css({left:r.left-n.left-s.left,width:h,height:l}),e._helper&&!i.animate&&/static/.test(o.css("position"))&&t(this).css({left:r.left-n.left-s.left,width:h,height:l})}}),t.ui.plugin.add("resizable","alsoResize",{start:function(){var e=t(this).resizable("instance"),i=e.options;t(i.alsoResize).each(function(){var e=t(this);e.data("ui-resizable-alsoresize",{width:parseFloat(e.width()),height:parseFloat(e.height()),left:parseFloat(e.css("left")),top:parseFloat(e.css("top"))})})},resize:function(e,i){var s=t(this).resizable("instance"),n=s.options,o=s.originalSize,a=s.originalPosition,r={height:s.size.height-o.height||0,width:s.size.width-o.width||0,top:s.position.top-a.top||0,left:s.position.left-a.left||0};t(n.alsoResize).each(function(){var e=t(this),s=t(this).data("ui-resizable-alsoresize"),n={},o=e.parents(i.originalElement[0]).length?["width","height"]:["width","height","top","left"];t.each(o,function(t,e){var i=(s[e]||0)+(r[e]||0);i&&i>=0&&(n[e]=i||null)}),e.css(n)})},stop:function(){t(this).removeData("ui-resizable-alsoresize")}}),t.ui.plugin.add("resizable","ghost",{start:function(){var e=t(this).resizable("instance"),i=e.size;e.ghost=e.originalElement.clone(),e.ghost.css({opacity:.25,display:"block",position:"relative",height:i.height,width:i.width,margin:0,left:0,top:0}),e._addClass(e.ghost,"ui-resizable-ghost"),t.uiBackCompat!==!1&&"string"==typeof e.options.ghost&&e.ghost.addClass(this.options.ghost),e.ghost.appendTo(e.helper)},resize:function(){var e=t(this).resizable("instance");e.ghost&&e.ghost.css({position:"relative",height:e.size.height,width:e.size.width})},stop:function(){var e=t(this).resizable("instance");e.ghost&&e.helper&&e.helper.get(0).removeChild(e.ghost.get(0))}}),t.ui.plugin.add("resizable","grid",{resize:function(){var e,i=t(this).resizable("instance"),s=i.options,n=i.size,o=i.originalSize,a=i.originalPosition,r=i.axis,h="number"==typeof s.grid?[s.grid,s.grid]:s.grid,l=h[0]||1,c=h[1]||1,u=Math.round((n.width-o.width)/l)*l,d=Math.round((n.height-o.height)/c)*c,p=o.width+u,f=o.height+d,g=s.maxWidth&&p>s.maxWidth,m=s.maxHeight&&f>s.maxHeight,_=s.minWidth&&s.minWidth>p,v=s.minHeight&&s.minHeight>f;s.grid=h,_&&(p+=l),v&&(f+=c),g&&(p-=l),m&&(f-=c),/^(se|s|e)$/.test(r)?(i.size.width=p,i.size.height=f):/^(ne)$/.test(r)?(i.size.width=p,i.size.height=f,i.position.top=a.top-d):/^(sw)$/.test(r)?(i.size.width=p,i.size.height=f,i.position.left=a.left-u):((0>=f-c||0>=p-l)&&(e=i._getPaddingPlusBorderDimensions(this)),f-c>0?(i.size.height=f,i.position.top=a.top-d):(f=c-e.height,i.size.height=f,i.position.top=a.top+o.height-f),p-l>0?(i.size.width=p,i.position.left=a.left-u):(p=l-e.width,i.size.width=p,i.position.left=a.left+o.width-p))}}),t.ui.resizable,t.widget("ui.dialog",{version:"1.12.1",options:{appendTo:"body",autoOpen:!0,buttons:[],classes:{"ui-dialog":"ui-corner-all","ui-dialog-titlebar":"ui-corner-all"},closeOnEscape:!0,closeText:"Close",draggable:!0,hide:null,height:"auto",maxHeight:null,maxWidth:null,minHeight:150,minWidth:150,modal:!1,position:{my:"center",at:"center",of:window,collision:"fit",using:function(e){var i=t(this).css(e).offset().top;0>i&&t(this).css("top",e.top-i)}},resizable:!0,show:null,title:null,width:300,beforeClose:null,close:null,drag:null,dragStart:null,dragStop:null,focus:null,open:null,resize:null,resizeStart:null,resizeStop:null},sizeRelatedOptions:{buttons:!0,height:!0,maxHeight:!0,maxWidth:!0,minHeight:!0,minWidth:!0,width:!0},resizableRelatedOptions:{maxHeight:!0,maxWidth:!0,minHeight:!0,minWidth:!0},_create:function(){this.originalCss={display:this.element[0].style.display,width:this.element[0].style.width,minHeight:this.element[0].style.minHeight,maxHeight:this.element[0].style.maxHeight,height:this.element[0].style.height},this.originalPosition={parent:this.element.parent(),index:this.element.parent().children().index(this.element)},this.originalTitle=this.element.attr("title"),null==this.options.title&&null!=this.originalTitle&&(this.options.title=this.originalTitle),this.options.disabled&&(this.options.disabled=!1),this._createWrapper(),this.element.show().removeAttr("title").appendTo(this.uiDialog),this._addClass("ui-dialog-content","ui-widget-content"),this._createTitlebar(),this._createButtonPane(),this.options.draggable&&t.fn.draggable&&this._makeDraggable(),this.options.resizable&&t.fn.resizable&&this._makeResizable(),this._isOpen=!1,this._trackFocus()},_init:function(){this.options.autoOpen&&this.open()},_appendTo:function(){var e=this.options.appendTo;return e&&(e.jquery||e.nodeType)?t(e):this.document.find(e||"body").eq(0)},_destroy:function(){var t,e=this.originalPosition;this._untrackInstance(),this._destroyOverlay(),this.element.removeUniqueId().css(this.originalCss).detach(),this.uiDialog.remove(),this.originalTitle&&this.element.attr("title",this.originalTitle),t=e.parent.children().eq(e.index),t.length&&t[0]!==this.element[0]?t.before(this.element):e.parent.append(this.element)},widget:function(){return this.uiDialog
},disable:t.noop,enable:t.noop,close:function(e){var i=this;this._isOpen&&this._trigger("beforeClose",e)!==!1&&(this._isOpen=!1,this._focusedElement=null,this._destroyOverlay(),this._untrackInstance(),this.opener.filter(":focusable").trigger("focus").length||t.ui.safeBlur(t.ui.safeActiveElement(this.document[0])),this._hide(this.uiDialog,this.options.hide,function(){i._trigger("close",e)}))},isOpen:function(){return this._isOpen},moveToTop:function(){this._moveToTop()},_moveToTop:function(e,i){var s=!1,n=this.uiDialog.siblings(".ui-front:visible").map(function(){return+t(this).css("z-index")}).get(),o=Math.max.apply(null,n);return o>=+this.uiDialog.css("z-index")&&(this.uiDialog.css("z-index",o+1),s=!0),s&&!i&&this._trigger("focus",e),s},open:function(){var e=this;return this._isOpen?(this._moveToTop()&&this._focusTabbable(),void 0):(this._isOpen=!0,this.opener=t(t.ui.safeActiveElement(this.document[0])),this._size(),this._position(),this._createOverlay(),this._moveToTop(null,!0),this.overlay&&this.overlay.css("z-index",this.uiDialog.css("z-index")-1),this._show(this.uiDialog,this.options.show,function(){e._focusTabbable(),e._trigger("focus")}),this._makeFocusTarget(),this._trigger("open"),void 0)},_focusTabbable:function(){var t=this._focusedElement;t||(t=this.element.find("[autofocus]")),t.length||(t=this.element.find(":tabbable")),t.length||(t=this.uiDialogButtonPane.find(":tabbable")),t.length||(t=this.uiDialogTitlebarClose.filter(":tabbable")),t.length||(t=this.uiDialog),t.eq(0).trigger("focus")},_keepFocus:function(e){function i(){var e=t.ui.safeActiveElement(this.document[0]),i=this.uiDialog[0]===e||t.contains(this.uiDialog[0],e);i||this._focusTabbable()}e.preventDefault(),i.call(this),this._delay(i)},_createWrapper:function(){this.uiDialog=t("<div>").hide().attr({tabIndex:-1,role:"dialog"}).appendTo(this._appendTo()),this._addClass(this.uiDialog,"ui-dialog","ui-widget ui-widget-content ui-front"),this._on(this.uiDialog,{keydown:function(e){if(this.options.closeOnEscape&&!e.isDefaultPrevented()&&e.keyCode&&e.keyCode===t.ui.keyCode.ESCAPE)return e.preventDefault(),this.close(e),void 0;if(e.keyCode===t.ui.keyCode.TAB&&!e.isDefaultPrevented()){var i=this.uiDialog.find(":tabbable"),s=i.filter(":first"),n=i.filter(":last");e.target!==n[0]&&e.target!==this.uiDialog[0]||e.shiftKey?e.target!==s[0]&&e.target!==this.uiDialog[0]||!e.shiftKey||(this._delay(function(){n.trigger("focus")}),e.preventDefault()):(this._delay(function(){s.trigger("focus")}),e.preventDefault())}},mousedown:function(t){this._moveToTop(t)&&this._focusTabbable()}}),this.element.find("[aria-describedby]").length||this.uiDialog.attr({"aria-describedby":this.element.uniqueId().attr("id")})},_createTitlebar:function(){var e;this.uiDialogTitlebar=t("<div>"),this._addClass(this.uiDialogTitlebar,"ui-dialog-titlebar","ui-widget-header ui-helper-clearfix"),this._on(this.uiDialogTitlebar,{mousedown:function(e){t(e.target).closest(".ui-dialog-titlebar-close")||this.uiDialog.trigger("focus")}}),this.uiDialogTitlebarClose=t("<button type='button'></button>").button({label:t("<a>").text(this.options.closeText).html(),icon:"ui-icon-closethick",showLabel:!1}).appendTo(this.uiDialogTitlebar),this._addClass(this.uiDialogTitlebarClose,"ui-dialog-titlebar-close"),this._on(this.uiDialogTitlebarClose,{click:function(t){t.preventDefault(),this.close(t)}}),e=t("<span>").uniqueId().prependTo(this.uiDialogTitlebar),this._addClass(e,"ui-dialog-title"),this._title(e),this.uiDialogTitlebar.prependTo(this.uiDialog),this.uiDialog.attr({"aria-labelledby":e.attr("id")})},_title:function(t){this.options.title?t.text(this.options.title):t.html("&#160;")},_createButtonPane:function(){this.uiDialogButtonPane=t("<div>"),this._addClass(this.uiDialogButtonPane,"ui-dialog-buttonpane","ui-widget-content ui-helper-clearfix"),this.uiButtonSet=t("<div>").appendTo(this.uiDialogButtonPane),this._addClass(this.uiButtonSet,"ui-dialog-buttonset"),this._createButtons()},_createButtons:function(){var e=this,i=this.options.buttons;return this.uiDialogButtonPane.remove(),this.uiButtonSet.empty(),t.isEmptyObject(i)||t.isArray(i)&&!i.length?(this._removeClass(this.uiDialog,"ui-dialog-buttons"),void 0):(t.each(i,function(i,s){var n,o;s=t.isFunction(s)?{click:s,text:i}:s,s=t.extend({type:"button"},s),n=s.click,o={icon:s.icon,iconPosition:s.iconPosition,showLabel:s.showLabel,icons:s.icons,text:s.text},delete s.click,delete s.icon,delete s.iconPosition,delete s.showLabel,delete s.icons,"boolean"==typeof s.text&&delete s.text,t("<button></button>",s).button(o).appendTo(e.uiButtonSet).on("click",function(){n.apply(e.element[0],arguments)})}),this._addClass(this.uiDialog,"ui-dialog-buttons"),this.uiDialogButtonPane.appendTo(this.uiDialog),void 0)},_makeDraggable:function(){function e(t){return{position:t.position,offset:t.offset}}var i=this,s=this.options;this.uiDialog.draggable({cancel:".ui-dialog-content, .ui-dialog-titlebar-close",handle:".ui-dialog-titlebar",containment:"document",start:function(s,n){i._addClass(t(this),"ui-dialog-dragging"),i._blockFrames(),i._trigger("dragStart",s,e(n))},drag:function(t,s){i._trigger("drag",t,e(s))},stop:function(n,o){var a=o.offset.left-i.document.scrollLeft(),r=o.offset.top-i.document.scrollTop();s.position={my:"left top",at:"left"+(a>=0?"+":"")+a+" "+"top"+(r>=0?"+":"")+r,of:i.window},i._removeClass(t(this),"ui-dialog-dragging"),i._unblockFrames(),i._trigger("dragStop",n,e(o))}})},_makeResizable:function(){function e(t){return{originalPosition:t.originalPosition,originalSize:t.originalSize,position:t.position,size:t.size}}var i=this,s=this.options,n=s.resizable,o=this.uiDialog.css("position"),a="string"==typeof n?n:"n,e,s,w,se,sw,ne,nw";this.uiDialog.resizable({cancel:".ui-dialog-content",containment:"document",alsoResize:this.element,maxWidth:s.maxWidth,maxHeight:s.maxHeight,minWidth:s.minWidth,minHeight:this._minHeight(),handles:a,start:function(s,n){i._addClass(t(this),"ui-dialog-resizing"),i._blockFrames(),i._trigger("resizeStart",s,e(n))},resize:function(t,s){i._trigger("resize",t,e(s))},stop:function(n,o){var a=i.uiDialog.offset(),r=a.left-i.document.scrollLeft(),h=a.top-i.document.scrollTop();s.height=i.uiDialog.height(),s.width=i.uiDialog.width(),s.position={my:"left top",at:"left"+(r>=0?"+":"")+r+" "+"top"+(h>=0?"+":"")+h,of:i.window},i._removeClass(t(this),"ui-dialog-resizing"),i._unblockFrames(),i._trigger("resizeStop",n,e(o))}}).css("position",o)},_trackFocus:function(){this._on(this.widget(),{focusin:function(e){this._makeFocusTarget(),this._focusedElement=t(e.target)}})},_makeFocusTarget:function(){this._untrackInstance(),this._trackingInstances().unshift(this)},_untrackInstance:function(){var e=this._trackingInstances(),i=t.inArray(this,e);-1!==i&&e.splice(i,1)},_trackingInstances:function(){var t=this.document.data("ui-dialog-instances");return t||(t=[],this.document.data("ui-dialog-instances",t)),t},_minHeight:function(){var t=this.options;return"auto"===t.height?t.minHeight:Math.min(t.minHeight,t.height)},_position:function(){var t=this.uiDialog.is(":visible");t||this.uiDialog.show(),this.uiDialog.position(this.options.position),t||this.uiDialog.hide()},_setOptions:function(e){var i=this,s=!1,n={};t.each(e,function(t,e){i._setOption(t,e),t in i.sizeRelatedOptions&&(s=!0),t in i.resizableRelatedOptions&&(n[t]=e)}),s&&(this._size(),this._position()),this.uiDialog.is(":data(ui-resizable)")&&this.uiDialog.resizable("option",n)},_setOption:function(e,i){var s,n,o=this.uiDialog;"disabled"!==e&&(this._super(e,i),"appendTo"===e&&this.uiDialog.appendTo(this._appendTo()),"buttons"===e&&this._createButtons(),"closeText"===e&&this.uiDialogTitlebarClose.button({label:t("<a>").text(""+this.options.closeText).html()}),"draggable"===e&&(s=o.is(":data(ui-draggable)"),s&&!i&&o.draggable("destroy"),!s&&i&&this._makeDraggable()),"position"===e&&this._position(),"resizable"===e&&(n=o.is(":data(ui-resizable)"),n&&!i&&o.resizable("destroy"),n&&"string"==typeof i&&o.resizable("option","handles",i),n||i===!1||this._makeResizable()),"title"===e&&this._title(this.uiDialogTitlebar.find(".ui-dialog-title")))},_size:function(){var t,e,i,s=this.options;this.element.show().css({width:"auto",minHeight:0,maxHeight:"none",height:0}),s.minWidth>s.width&&(s.width=s.minWidth),t=this.uiDialog.css({height:"auto",width:s.width}).outerHeight(),e=Math.max(0,s.minHeight-t),i="number"==typeof s.maxHeight?Math.max(0,s.maxHeight-t):"none","auto"===s.height?this.element.css({minHeight:e,maxHeight:i,height:"auto"}):this.element.height(Math.max(0,s.height-t)),this.uiDialog.is(":data(ui-resizable)")&&this.uiDialog.resizable("option","minHeight",this._minHeight())},_blockFrames:function(){this.iframeBlocks=this.document.find("iframe").map(function(){var e=t(this);return t("<div>").css({position:"absolute",width:e.outerWidth(),height:e.outerHeight()}).appendTo(e.parent()).offset(e.offset())[0]})},_unblockFrames:function(){this.iframeBlocks&&(this.iframeBlocks.remove(),delete this.iframeBlocks)},_allowInteraction:function(e){return t(e.target).closest(".ui-dialog").length?!0:!!t(e.target).closest(".ui-datepicker").length},_createOverlay:function(){if(this.options.modal){var e=!0;this._delay(function(){e=!1}),this.document.data("ui-dialog-overlays")||this._on(this.document,{focusin:function(t){e||this._allowInteraction(t)||(t.preventDefault(),this._trackingInstances()[0]._focusTabbable())}}),this.overlay=t("<div>").appendTo(this._appendTo()),this._addClass(this.overlay,null,"ui-widget-overlay ui-front"),this._on(this.overlay,{mousedown:"_keepFocus"}),this.document.data("ui-dialog-overlays",(this.document.data("ui-dialog-overlays")||0)+1)}},_destroyOverlay:function(){if(this.options.modal&&this.overlay){var t=this.document.data("ui-dialog-overlays")-1;t?this.document.data("ui-dialog-overlays",t):(this._off(this.document,"focusin"),this.document.removeData("ui-dialog-overlays")),this.overlay.remove(),this.overlay=null}}}),t.uiBackCompat!==!1&&t.widget("ui.dialog",t.ui.dialog,{options:{dialogClass:""},_createWrapper:function(){this._super(),this.uiDialog.addClass(this.options.dialogClass)},_setOption:function(t,e){"dialogClass"===t&&this.uiDialog.removeClass(this.options.dialogClass).addClass(e),this._superApply(arguments)}}),t.ui.dialog,t.widget("ui.droppable",{version:"1.12.1",widgetEventPrefix:"drop",options:{accept:"*",addClasses:!0,greedy:!1,scope:"default",tolerance:"intersect",activate:null,deactivate:null,drop:null,out:null,over:null},_create:function(){var e,i=this.options,s=i.accept;this.isover=!1,this.isout=!0,this.accept=t.isFunction(s)?s:function(t){return t.is(s)},this.proportions=function(){return arguments.length?(e=arguments[0],void 0):e?e:e={width:this.element[0].offsetWidth,height:this.element[0].offsetHeight}},this._addToManager(i.scope),i.addClasses&&this._addClass("ui-droppable")},_addToManager:function(e){t.ui.ddmanager.droppables[e]=t.ui.ddmanager.droppables[e]||[],t.ui.ddmanager.droppables[e].push(this)},_splice:function(t){for(var e=0;t.length>e;e++)t[e]===this&&t.splice(e,1)},_destroy:function(){var e=t.ui.ddmanager.droppables[this.options.scope];this._splice(e)},_setOption:function(e,i){if("accept"===e)this.accept=t.isFunction(i)?i:function(t){return t.is(i)};else if("scope"===e){var s=t.ui.ddmanager.droppables[this.options.scope];this._splice(s),this._addToManager(i)}this._super(e,i)},_activate:function(e){var i=t.ui.ddmanager.current;this._addActiveClass(),i&&this._trigger("activate",e,this.ui(i))},_deactivate:function(e){var i=t.ui.ddmanager.current;this._removeActiveClass(),i&&this._trigger("deactivate",e,this.ui(i))},_over:function(e){var i=t.ui.ddmanager.current;i&&(i.currentItem||i.element)[0]!==this.element[0]&&this.accept.call(this.element[0],i.currentItem||i.element)&&(this._addHoverClass(),this._trigger("over",e,this.ui(i)))},_out:function(e){var i=t.ui.ddmanager.current;i&&(i.currentItem||i.element)[0]!==this.element[0]&&this.accept.call(this.element[0],i.currentItem||i.element)&&(this._removeHoverClass(),this._trigger("out",e,this.ui(i)))},_drop:function(e,i){var s=i||t.ui.ddmanager.current,n=!1;return s&&(s.currentItem||s.element)[0]!==this.element[0]?(this.element.find(":data(ui-droppable)").not(".ui-draggable-dragging").each(function(){var i=t(this).droppable("instance");return i.options.greedy&&!i.options.disabled&&i.options.scope===s.options.scope&&i.accept.call(i.element[0],s.currentItem||s.element)&&v(s,t.extend(i,{offset:i.element.offset()}),i.options.tolerance,e)?(n=!0,!1):void 0}),n?!1:this.accept.call(this.element[0],s.currentItem||s.element)?(this._removeActiveClass(),this._removeHoverClass(),this._trigger("drop",e,this.ui(s)),this.element):!1):!1},ui:function(t){return{draggable:t.currentItem||t.element,helper:t.helper,position:t.position,offset:t.positionAbs}},_addHoverClass:function(){this._addClass("ui-droppable-hover")},_removeHoverClass:function(){this._removeClass("ui-droppable-hover")},_addActiveClass:function(){this._addClass("ui-droppable-active")},_removeActiveClass:function(){this._removeClass("ui-droppable-active")}});var v=t.ui.intersect=function(){function t(t,e,i){return t>=e&&e+i>t}return function(e,i,s,n){if(!i.offset)return!1;var o=(e.positionAbs||e.position.absolute).left+e.margins.left,a=(e.positionAbs||e.position.absolute).top+e.margins.top,r=o+e.helperProportions.width,h=a+e.helperProportions.height,l=i.offset.left,c=i.offset.top,u=l+i.proportions().width,d=c+i.proportions().height;switch(s){case"fit":return o>=l&&u>=r&&a>=c&&d>=h;case"intersect":return o+e.helperProportions.width/2>l&&u>r-e.helperProportions.width/2&&a+e.helperProportions.height/2>c&&d>h-e.helperProportions.height/2;case"pointer":return t(n.pageY,c,i.proportions().height)&&t(n.pageX,l,i.proportions().width);case"touch":return(a>=c&&d>=a||h>=c&&d>=h||c>a&&h>d)&&(o>=l&&u>=o||r>=l&&u>=r||l>o&&r>u);default:return!1}}}();t.ui.ddmanager={current:null,droppables:{"default":[]},prepareOffsets:function(e,i){var s,n,o=t.ui.ddmanager.droppables[e.options.scope]||[],a=i?i.type:null,r=(e.currentItem||e.element).find(":data(ui-droppable)").addBack();t:for(s=0;o.length>s;s++)if(!(o[s].options.disabled||e&&!o[s].accept.call(o[s].element[0],e.currentItem||e.element))){for(n=0;r.length>n;n++)if(r[n]===o[s].element[0]){o[s].proportions().height=0;continue t}o[s].visible="none"!==o[s].element.css("display"),o[s].visible&&("mousedown"===a&&o[s]._activate.call(o[s],i),o[s].offset=o[s].element.offset(),o[s].proportions({width:o[s].element[0].offsetWidth,height:o[s].element[0].offsetHeight}))}},drop:function(e,i){var s=!1;return t.each((t.ui.ddmanager.droppables[e.options.scope]||[]).slice(),function(){this.options&&(!this.options.disabled&&this.visible&&v(e,this,this.options.tolerance,i)&&(s=this._drop.call(this,i)||s),!this.options.disabled&&this.visible&&this.accept.call(this.element[0],e.currentItem||e.element)&&(this.isout=!0,this.isover=!1,this._deactivate.call(this,i)))}),s},dragStart:function(e,i){e.element.parentsUntil("body").on("scroll.droppable",function(){e.options.refreshPositions||t.ui.ddmanager.prepareOffsets(e,i)})},drag:function(e,i){e.options.refreshPositions&&t.ui.ddmanager.prepareOffsets(e,i),t.each(t.ui.ddmanager.droppables[e.options.scope]||[],function(){if(!this.options.disabled&&!this.greedyChild&&this.visible){var s,n,o,a=v(e,this,this.options.tolerance,i),r=!a&&this.isover?"isout":a&&!this.isover?"isover":null;r&&(this.options.greedy&&(n=this.options.scope,o=this.element.parents(":data(ui-droppable)").filter(function(){return t(this).droppable("instance").options.scope===n}),o.length&&(s=t(o[0]).droppable("instance"),s.greedyChild="isover"===r)),s&&"isover"===r&&(s.isover=!1,s.isout=!0,s._out.call(s,i)),this[r]=!0,this["isout"===r?"isover":"isout"]=!1,this["isover"===r?"_over":"_out"].call(this,i),s&&"isout"===r&&(s.isout=!1,s.isover=!0,s._over.call(s,i)))}})},dragStop:function(e,i){e.element.parentsUntil("body").off("scroll.droppable"),e.options.refreshPositions||t.ui.ddmanager.prepareOffsets(e,i)}},t.uiBackCompat!==!1&&t.widget("ui.droppable",t.ui.droppable,{options:{hoverClass:!1,activeClass:!1},_addActiveClass:function(){this._super(),this.options.activeClass&&this.element.addClass(this.options.activeClass)},_removeActiveClass:function(){this._super(),this.options.activeClass&&this.element.removeClass(this.options.activeClass)},_addHoverClass:function(){this._super(),this.options.hoverClass&&this.element.addClass(this.options.hoverClass)},_removeHoverClass:function(){this._super(),this.options.hoverClass&&this.element.removeClass(this.options.hoverClass)}}),t.ui.droppable,t.widget("ui.progressbar",{version:"1.12.1",options:{classes:{"ui-progressbar":"ui-corner-all","ui-progressbar-value":"ui-corner-left","ui-progressbar-complete":"ui-corner-right"},max:100,value:0,change:null,complete:null},min:0,_create:function(){this.oldValue=this.options.value=this._constrainedValue(),this.element.attr({role:"progressbar","aria-valuemin":this.min}),this._addClass("ui-progressbar","ui-widget ui-widget-content"),this.valueDiv=t("<div>").appendTo(this.element),this._addClass(this.valueDiv,"ui-progressbar-value","ui-widget-header"),this._refreshValue()},_destroy:function(){this.element.removeAttr("role aria-valuemin aria-valuemax aria-valuenow"),this.valueDiv.remove()},value:function(t){return void 0===t?this.options.value:(this.options.value=this._constrainedValue(t),this._refreshValue(),void 0)},_constrainedValue:function(t){return void 0===t&&(t=this.options.value),this.indeterminate=t===!1,"number"!=typeof t&&(t=0),this.indeterminate?!1:Math.min(this.options.max,Math.max(this.min,t))},_setOptions:function(t){var e=t.value;delete t.value,this._super(t),this.options.value=this._constrainedValue(e),this._refreshValue()},_setOption:function(t,e){"max"===t&&(e=Math.max(this.min,e)),this._super(t,e)},_setOptionDisabled:function(t){this._super(t),this.element.attr("aria-disabled",t),this._toggleClass(null,"ui-state-disabled",!!t)},_percentage:function(){return this.indeterminate?100:100*(this.options.value-this.min)/(this.options.max-this.min)},_refreshValue:function(){var e=this.options.value,i=this._percentage();this.valueDiv.toggle(this.indeterminate||e>this.min).width(i.toFixed(0)+"%"),this._toggleClass(this.valueDiv,"ui-progressbar-complete",null,e===this.options.max)._toggleClass("ui-progressbar-indeterminate",null,this.indeterminate),this.indeterminate?(this.element.removeAttr("aria-valuenow"),this.overlayDiv||(this.overlayDiv=t("<div>").appendTo(this.valueDiv),this._addClass(this.overlayDiv,"ui-progressbar-overlay"))):(this.element.attr({"aria-valuemax":this.options.max,"aria-valuenow":e}),this.overlayDiv&&(this.overlayDiv.remove(),this.overlayDiv=null)),this.oldValue!==e&&(this.oldValue=e,this._trigger("change")),e===this.options.max&&this._trigger("complete")}}),t.widget("ui.selectable",t.ui.mouse,{version:"1.12.1",options:{appendTo:"body",autoRefresh:!0,distance:0,filter:"*",tolerance:"touch",selected:null,selecting:null,start:null,stop:null,unselected:null,unselecting:null},_create:function(){var e=this;this._addClass("ui-selectable"),this.dragged=!1,this.refresh=function(){e.elementPos=t(e.element[0]).offset(),e.selectees=t(e.options.filter,e.element[0]),e._addClass(e.selectees,"ui-selectee"),e.selectees.each(function(){var i=t(this),s=i.offset(),n={left:s.left-e.elementPos.left,top:s.top-e.elementPos.top};t.data(this,"selectable-item",{element:this,$element:i,left:n.left,top:n.top,right:n.left+i.outerWidth(),bottom:n.top+i.outerHeight(),startselected:!1,selected:i.hasClass("ui-selected"),selecting:i.hasClass("ui-selecting"),unselecting:i.hasClass("ui-unselecting")})})},this.refresh(),this._mouseInit(),this.helper=t("<div>"),this._addClass(this.helper,"ui-selectable-helper")},_destroy:function(){this.selectees.removeData("selectable-item"),this._mouseDestroy()},_mouseStart:function(e){var i=this,s=this.options;this.opos=[e.pageX,e.pageY],this.elementPos=t(this.element[0]).offset(),this.options.disabled||(this.selectees=t(s.filter,this.element[0]),this._trigger("start",e),t(s.appendTo).append(this.helper),this.helper.css({left:e.pageX,top:e.pageY,width:0,height:0}),s.autoRefresh&&this.refresh(),this.selectees.filter(".ui-selected").each(function(){var s=t.data(this,"selectable-item");s.startselected=!0,e.metaKey||e.ctrlKey||(i._removeClass(s.$element,"ui-selected"),s.selected=!1,i._addClass(s.$element,"ui-unselecting"),s.unselecting=!0,i._trigger("unselecting",e,{unselecting:s.element}))}),t(e.target).parents().addBack().each(function(){var s,n=t.data(this,"selectable-item");return n?(s=!e.metaKey&&!e.ctrlKey||!n.$element.hasClass("ui-selected"),i._removeClass(n.$element,s?"ui-unselecting":"ui-selected")._addClass(n.$element,s?"ui-selecting":"ui-unselecting"),n.unselecting=!s,n.selecting=s,n.selected=s,s?i._trigger("selecting",e,{selecting:n.element}):i._trigger("unselecting",e,{unselecting:n.element}),!1):void 0}))},_mouseDrag:function(e){if(this.dragged=!0,!this.options.disabled){var i,s=this,n=this.options,o=this.opos[0],a=this.opos[1],r=e.pageX,h=e.pageY;return o>r&&(i=r,r=o,o=i),a>h&&(i=h,h=a,a=i),this.helper.css({left:o,top:a,width:r-o,height:h-a}),this.selectees.each(function(){var i=t.data(this,"selectable-item"),l=!1,c={};i&&i.element!==s.element[0]&&(c.left=i.left+s.elementPos.left,c.right=i.right+s.elementPos.left,c.top=i.top+s.elementPos.top,c.bottom=i.bottom+s.elementPos.top,"touch"===n.tolerance?l=!(c.left>r||o>c.right||c.top>h||a>c.bottom):"fit"===n.tolerance&&(l=c.left>o&&r>c.right&&c.top>a&&h>c.bottom),l?(i.selected&&(s._removeClass(i.$element,"ui-selected"),i.selected=!1),i.unselecting&&(s._removeClass(i.$element,"ui-unselecting"),i.unselecting=!1),i.selecting||(s._addClass(i.$element,"ui-selecting"),i.selecting=!0,s._trigger("selecting",e,{selecting:i.element}))):(i.selecting&&((e.metaKey||e.ctrlKey)&&i.startselected?(s._removeClass(i.$element,"ui-selecting"),i.selecting=!1,s._addClass(i.$element,"ui-selected"),i.selected=!0):(s._removeClass(i.$element,"ui-selecting"),i.selecting=!1,i.startselected&&(s._addClass(i.$element,"ui-unselecting"),i.unselecting=!0),s._trigger("unselecting",e,{unselecting:i.element}))),i.selected&&(e.metaKey||e.ctrlKey||i.startselected||(s._removeClass(i.$element,"ui-selected"),i.selected=!1,s._addClass(i.$element,"ui-unselecting"),i.unselecting=!0,s._trigger("unselecting",e,{unselecting:i.element})))))}),!1}},_mouseStop:function(e){var i=this;return this.dragged=!1,t(".ui-unselecting",this.element[0]).each(function(){var s=t.data(this,"selectable-item");i._removeClass(s.$element,"ui-unselecting"),s.unselecting=!1,s.startselected=!1,i._trigger("unselected",e,{unselected:s.element})}),t(".ui-selecting",this.element[0]).each(function(){var s=t.data(this,"selectable-item");i._removeClass(s.$element,"ui-selecting")._addClass(s.$element,"ui-selected"),s.selecting=!1,s.selected=!0,s.startselected=!0,i._trigger("selected",e,{selected:s.element})}),this._trigger("stop",e),this.helper.remove(),!1}}),t.widget("ui.selectmenu",[t.ui.formResetMixin,{version:"1.12.1",defaultElement:"<select>",options:{appendTo:null,classes:{"ui-selectmenu-button-open":"ui-corner-top","ui-selectmenu-button-closed":"ui-corner-all"},disabled:null,icons:{button:"ui-icon-triangle-1-s"},position:{my:"left top",at:"left bottom",collision:"none"},width:!1,change:null,close:null,focus:null,open:null,select:null},_create:function(){var e=this.element.uniqueId().attr("id");this.ids={element:e,button:e+"-button",menu:e+"-menu"},this._drawButton(),this._drawMenu(),this._bindFormResetHandler(),this._rendered=!1,this.menuItems=t()},_drawButton:function(){var e,i=this,s=this._parseOption(this.element.find("option:selected"),this.element[0].selectedIndex);this.labels=this.element.labels().attr("for",this.ids.button),this._on(this.labels,{click:function(t){this.button.focus(),t.preventDefault()}}),this.element.hide(),this.button=t("<span>",{tabindex:this.options.disabled?-1:0,id:this.ids.button,role:"combobox","aria-expanded":"false","aria-autocomplete":"list","aria-owns":this.ids.menu,"aria-haspopup":"true",title:this.element.attr("title")}).insertAfter(this.element),this._addClass(this.button,"ui-selectmenu-button ui-selectmenu-button-closed","ui-button ui-widget"),e=t("<span>").appendTo(this.button),this._addClass(e,"ui-selectmenu-icon","ui-icon "+this.options.icons.button),this.buttonItem=this._renderButtonItem(s).appendTo(this.button),this.options.width!==!1&&this._resizeButton(),this._on(this.button,this._buttonEvents),this.button.one("focusin",function(){i._rendered||i._refreshMenu()})},_drawMenu:function(){var e=this;this.menu=t("<ul>",{"aria-hidden":"true","aria-labelledby":this.ids.button,id:this.ids.menu}),this.menuWrap=t("<div>").append(this.menu),this._addClass(this.menuWrap,"ui-selectmenu-menu","ui-front"),this.menuWrap.appendTo(this._appendTo()),this.menuInstance=this.menu.menu({classes:{"ui-menu":"ui-corner-bottom"},role:"listbox",select:function(t,i){t.preventDefault(),e._setSelection(),e._select(i.item.data("ui-selectmenu-item"),t)},focus:function(t,i){var s=i.item.data("ui-selectmenu-item");null!=e.focusIndex&&s.index!==e.focusIndex&&(e._trigger("focus",t,{item:s}),e.isOpen||e._select(s,t)),e.focusIndex=s.index,e.button.attr("aria-activedescendant",e.menuItems.eq(s.index).attr("id"))}}).menu("instance"),this.menuInstance._off(this.menu,"mouseleave"),this.menuInstance._closeOnDocumentClick=function(){return!1},this.menuInstance._isDivider=function(){return!1}},refresh:function(){this._refreshMenu(),this.buttonItem.replaceWith(this.buttonItem=this._renderButtonItem(this._getSelectedItem().data("ui-selectmenu-item")||{})),null===this.options.width&&this._resizeButton()},_refreshMenu:function(){var t,e=this.element.find("option");this.menu.empty(),this._parseOptions(e),this._renderMenu(this.menu,this.items),this.menuInstance.refresh(),this.menuItems=this.menu.find("li").not(".ui-selectmenu-optgroup").find(".ui-menu-item-wrapper"),this._rendered=!0,e.length&&(t=this._getSelectedItem(),this.menuInstance.focus(null,t),this._setAria(t.data("ui-selectmenu-item")),this._setOption("disabled",this.element.prop("disabled")))},open:function(t){this.options.disabled||(this._rendered?(this._removeClass(this.menu.find(".ui-state-active"),null,"ui-state-active"),this.menuInstance.focus(null,this._getSelectedItem())):this._refreshMenu(),this.menuItems.length&&(this.isOpen=!0,this._toggleAttr(),this._resizeMenu(),this._position(),this._on(this.document,this._documentClick),this._trigger("open",t)))},_position:function(){this.menuWrap.position(t.extend({of:this.button},this.options.position))},close:function(t){this.isOpen&&(this.isOpen=!1,this._toggleAttr(),this.range=null,this._off(this.document),this._trigger("close",t))},widget:function(){return this.button},menuWidget:function(){return this.menu},_renderButtonItem:function(e){var i=t("<span>");return this._setText(i,e.label),this._addClass(i,"ui-selectmenu-text"),i},_renderMenu:function(e,i){var s=this,n="";t.each(i,function(i,o){var a;o.optgroup!==n&&(a=t("<li>",{text:o.optgroup}),s._addClass(a,"ui-selectmenu-optgroup","ui-menu-divider"+(o.element.parent("optgroup").prop("disabled")?" ui-state-disabled":"")),a.appendTo(e),n=o.optgroup),s._renderItemData(e,o)})},_renderItemData:function(t,e){return this._renderItem(t,e).data("ui-selectmenu-item",e)},_renderItem:function(e,i){var s=t("<li>"),n=t("<div>",{title:i.element.attr("title")});return i.disabled&&this._addClass(s,null,"ui-state-disabled"),this._setText(n,i.label),s.append(n).appendTo(e)},_setText:function(t,e){e?t.text(e):t.html("&#160;")},_move:function(t,e){var i,s,n=".ui-menu-item";this.isOpen?i=this.menuItems.eq(this.focusIndex).parent("li"):(i=this.menuItems.eq(this.element[0].selectedIndex).parent("li"),n+=":not(.ui-state-disabled)"),s="first"===t||"last"===t?i["first"===t?"prevAll":"nextAll"](n).eq(-1):i[t+"All"](n).eq(0),s.length&&this.menuInstance.focus(e,s)},_getSelectedItem:function(){return this.menuItems.eq(this.element[0].selectedIndex).parent("li")},_toggle:function(t){this[this.isOpen?"close":"open"](t)},_setSelection:function(){var t;this.range&&(window.getSelection?(t=window.getSelection(),t.removeAllRanges(),t.addRange(this.range)):this.range.select(),this.button.focus())},_documentClick:{mousedown:function(e){this.isOpen&&(t(e.target).closest(".ui-selectmenu-menu, #"+t.ui.escapeSelector(this.ids.button)).length||this.close(e))}},_buttonEvents:{mousedown:function(){var t;window.getSelection?(t=window.getSelection(),t.rangeCount&&(this.range=t.getRangeAt(0))):this.range=document.selection.createRange()},click:function(t){this._setSelection(),this._toggle(t)},keydown:function(e){var i=!0;switch(e.keyCode){case t.ui.keyCode.TAB:case t.ui.keyCode.ESCAPE:this.close(e),i=!1;break;case t.ui.keyCode.ENTER:this.isOpen&&this._selectFocusedItem(e);break;case t.ui.keyCode.UP:e.altKey?this._toggle(e):this._move("prev",e);break;case t.ui.keyCode.DOWN:e.altKey?this._toggle(e):this._move("next",e);break;case t.ui.keyCode.SPACE:this.isOpen?this._selectFocusedItem(e):this._toggle(e);break;case t.ui.keyCode.LEFT:this._move("prev",e);break;case t.ui.keyCode.RIGHT:this._move("next",e);break;case t.ui.keyCode.HOME:case t.ui.keyCode.PAGE_UP:this._move("first",e);break;case t.ui.keyCode.END:case t.ui.keyCode.PAGE_DOWN:this._move("last",e);break;default:this.menu.trigger(e),i=!1}i&&e.preventDefault()}},_selectFocusedItem:function(t){var e=this.menuItems.eq(this.focusIndex).parent("li");e.hasClass("ui-state-disabled")||this._select(e.data("ui-selectmenu-item"),t)},_select:function(t,e){var i=this.element[0].selectedIndex;this.element[0].selectedIndex=t.index,this.buttonItem.replaceWith(this.buttonItem=this._renderButtonItem(t)),this._setAria(t),this._trigger("select",e,{item:t}),t.index!==i&&this._trigger("change",e,{item:t}),this.close(e)},_setAria:function(t){var e=this.menuItems.eq(t.index).attr("id");this.button.attr({"aria-labelledby":e,"aria-activedescendant":e}),this.menu.attr("aria-activedescendant",e)},_setOption:function(t,e){if("icons"===t){var i=this.button.find("span.ui-icon");this._removeClass(i,null,this.options.icons.button)._addClass(i,null,e.button)}this._super(t,e),"appendTo"===t&&this.menuWrap.appendTo(this._appendTo()),"width"===t&&this._resizeButton()},_setOptionDisabled:function(t){this._super(t),this.menuInstance.option("disabled",t),this.button.attr("aria-disabled",t),this._toggleClass(this.button,null,"ui-state-disabled",t),this.element.prop("disabled",t),t?(this.button.attr("tabindex",-1),this.close()):this.button.attr("tabindex",0)},_appendTo:function(){var e=this.options.appendTo;return e&&(e=e.jquery||e.nodeType?t(e):this.document.find(e).eq(0)),e&&e[0]||(e=this.element.closest(".ui-front, dialog")),e.length||(e=this.document[0].body),e},_toggleAttr:function(){this.button.attr("aria-expanded",this.isOpen),this._removeClass(this.button,"ui-selectmenu-button-"+(this.isOpen?"closed":"open"))._addClass(this.button,"ui-selectmenu-button-"+(this.isOpen?"open":"closed"))._toggleClass(this.menuWrap,"ui-selectmenu-open",null,this.isOpen),this.menu.attr("aria-hidden",!this.isOpen)},_resizeButton:function(){var t=this.options.width;return t===!1?(this.button.css("width",""),void 0):(null===t&&(t=this.element.show().outerWidth(),this.element.hide()),this.button.outerWidth(t),void 0)},_resizeMenu:function(){this.menu.outerWidth(Math.max(this.button.outerWidth(),this.menu.width("").outerWidth()+1))},_getCreateOptions:function(){var t=this._super();return t.disabled=this.element.prop("disabled"),t},_parseOptions:function(e){var i=this,s=[];e.each(function(e,n){s.push(i._parseOption(t(n),e))}),this.items=s},_parseOption:function(t,e){var i=t.parent("optgroup");return{element:t,index:e,value:t.val(),label:t.text(),optgroup:i.attr("label")||"",disabled:i.prop("disabled")||t.prop("disabled")}},_destroy:function(){this._unbindFormResetHandler(),this.menuWrap.remove(),this.button.remove(),this.element.show(),this.element.removeUniqueId(),this.labels.attr("for",this.ids.element)}}]),t.widget("ui.slider",t.ui.mouse,{version:"1.12.1",widgetEventPrefix:"slide",options:{animate:!1,classes:{"ui-slider":"ui-corner-all","ui-slider-handle":"ui-corner-all","ui-slider-range":"ui-corner-all ui-widget-header"},distance:0,max:100,min:0,orientation:"horizontal",range:!1,step:1,value:0,values:null,change:null,slide:null,start:null,stop:null},numPages:5,_create:function(){this._keySliding=!1,this._mouseSliding=!1,this._animateOff=!0,this._handleIndex=null,this._detectOrientation(),this._mouseInit(),this._calculateNewMax(),this._addClass("ui-slider ui-slider-"+this.orientation,"ui-widget ui-widget-content"),this._refresh(),this._animateOff=!1
},_refresh:function(){this._createRange(),this._createHandles(),this._setupEvents(),this._refreshValue()},_createHandles:function(){var e,i,s=this.options,n=this.element.find(".ui-slider-handle"),o="<span tabindex='0'></span>",a=[];for(i=s.values&&s.values.length||1,n.length>i&&(n.slice(i).remove(),n=n.slice(0,i)),e=n.length;i>e;e++)a.push(o);this.handles=n.add(t(a.join("")).appendTo(this.element)),this._addClass(this.handles,"ui-slider-handle","ui-state-default"),this.handle=this.handles.eq(0),this.handles.each(function(e){t(this).data("ui-slider-handle-index",e).attr("tabIndex",0)})},_createRange:function(){var e=this.options;e.range?(e.range===!0&&(e.values?e.values.length&&2!==e.values.length?e.values=[e.values[0],e.values[0]]:t.isArray(e.values)&&(e.values=e.values.slice(0)):e.values=[this._valueMin(),this._valueMin()]),this.range&&this.range.length?(this._removeClass(this.range,"ui-slider-range-min ui-slider-range-max"),this.range.css({left:"",bottom:""})):(this.range=t("<div>").appendTo(this.element),this._addClass(this.range,"ui-slider-range")),("min"===e.range||"max"===e.range)&&this._addClass(this.range,"ui-slider-range-"+e.range)):(this.range&&this.range.remove(),this.range=null)},_setupEvents:function(){this._off(this.handles),this._on(this.handles,this._handleEvents),this._hoverable(this.handles),this._focusable(this.handles)},_destroy:function(){this.handles.remove(),this.range&&this.range.remove(),this._mouseDestroy()},_mouseCapture:function(e){var i,s,n,o,a,r,h,l,c=this,u=this.options;return u.disabled?!1:(this.elementSize={width:this.element.outerWidth(),height:this.element.outerHeight()},this.elementOffset=this.element.offset(),i={x:e.pageX,y:e.pageY},s=this._normValueFromMouse(i),n=this._valueMax()-this._valueMin()+1,this.handles.each(function(e){var i=Math.abs(s-c.values(e));(n>i||n===i&&(e===c._lastChangedValue||c.values(e)===u.min))&&(n=i,o=t(this),a=e)}),r=this._start(e,a),r===!1?!1:(this._mouseSliding=!0,this._handleIndex=a,this._addClass(o,null,"ui-state-active"),o.trigger("focus"),h=o.offset(),l=!t(e.target).parents().addBack().is(".ui-slider-handle"),this._clickOffset=l?{left:0,top:0}:{left:e.pageX-h.left-o.width()/2,top:e.pageY-h.top-o.height()/2-(parseInt(o.css("borderTopWidth"),10)||0)-(parseInt(o.css("borderBottomWidth"),10)||0)+(parseInt(o.css("marginTop"),10)||0)},this.handles.hasClass("ui-state-hover")||this._slide(e,a,s),this._animateOff=!0,!0))},_mouseStart:function(){return!0},_mouseDrag:function(t){var e={x:t.pageX,y:t.pageY},i=this._normValueFromMouse(e);return this._slide(t,this._handleIndex,i),!1},_mouseStop:function(t){return this._removeClass(this.handles,null,"ui-state-active"),this._mouseSliding=!1,this._stop(t,this._handleIndex),this._change(t,this._handleIndex),this._handleIndex=null,this._clickOffset=null,this._animateOff=!1,!1},_detectOrientation:function(){this.orientation="vertical"===this.options.orientation?"vertical":"horizontal"},_normValueFromMouse:function(t){var e,i,s,n,o;return"horizontal"===this.orientation?(e=this.elementSize.width,i=t.x-this.elementOffset.left-(this._clickOffset?this._clickOffset.left:0)):(e=this.elementSize.height,i=t.y-this.elementOffset.top-(this._clickOffset?this._clickOffset.top:0)),s=i/e,s>1&&(s=1),0>s&&(s=0),"vertical"===this.orientation&&(s=1-s),n=this._valueMax()-this._valueMin(),o=this._valueMin()+s*n,this._trimAlignValue(o)},_uiHash:function(t,e,i){var s={handle:this.handles[t],handleIndex:t,value:void 0!==e?e:this.value()};return this._hasMultipleValues()&&(s.value=void 0!==e?e:this.values(t),s.values=i||this.values()),s},_hasMultipleValues:function(){return this.options.values&&this.options.values.length},_start:function(t,e){return this._trigger("start",t,this._uiHash(e))},_slide:function(t,e,i){var s,n,o=this.value(),a=this.values();this._hasMultipleValues()&&(n=this.values(e?0:1),o=this.values(e),2===this.options.values.length&&this.options.range===!0&&(i=0===e?Math.min(n,i):Math.max(n,i)),a[e]=i),i!==o&&(s=this._trigger("slide",t,this._uiHash(e,i,a)),s!==!1&&(this._hasMultipleValues()?this.values(e,i):this.value(i)))},_stop:function(t,e){this._trigger("stop",t,this._uiHash(e))},_change:function(t,e){this._keySliding||this._mouseSliding||(this._lastChangedValue=e,this._trigger("change",t,this._uiHash(e)))},value:function(t){return arguments.length?(this.options.value=this._trimAlignValue(t),this._refreshValue(),this._change(null,0),void 0):this._value()},values:function(e,i){var s,n,o;if(arguments.length>1)return this.options.values[e]=this._trimAlignValue(i),this._refreshValue(),this._change(null,e),void 0;if(!arguments.length)return this._values();if(!t.isArray(arguments[0]))return this._hasMultipleValues()?this._values(e):this.value();for(s=this.options.values,n=arguments[0],o=0;s.length>o;o+=1)s[o]=this._trimAlignValue(n[o]),this._change(null,o);this._refreshValue()},_setOption:function(e,i){var s,n=0;switch("range"===e&&this.options.range===!0&&("min"===i?(this.options.value=this._values(0),this.options.values=null):"max"===i&&(this.options.value=this._values(this.options.values.length-1),this.options.values=null)),t.isArray(this.options.values)&&(n=this.options.values.length),this._super(e,i),e){case"orientation":this._detectOrientation(),this._removeClass("ui-slider-horizontal ui-slider-vertical")._addClass("ui-slider-"+this.orientation),this._refreshValue(),this.options.range&&this._refreshRange(i),this.handles.css("horizontal"===i?"bottom":"left","");break;case"value":this._animateOff=!0,this._refreshValue(),this._change(null,0),this._animateOff=!1;break;case"values":for(this._animateOff=!0,this._refreshValue(),s=n-1;s>=0;s--)this._change(null,s);this._animateOff=!1;break;case"step":case"min":case"max":this._animateOff=!0,this._calculateNewMax(),this._refreshValue(),this._animateOff=!1;break;case"range":this._animateOff=!0,this._refresh(),this._animateOff=!1}},_setOptionDisabled:function(t){this._super(t),this._toggleClass(null,"ui-state-disabled",!!t)},_value:function(){var t=this.options.value;return t=this._trimAlignValue(t)},_values:function(t){var e,i,s;if(arguments.length)return e=this.options.values[t],e=this._trimAlignValue(e);if(this._hasMultipleValues()){for(i=this.options.values.slice(),s=0;i.length>s;s+=1)i[s]=this._trimAlignValue(i[s]);return i}return[]},_trimAlignValue:function(t){if(this._valueMin()>=t)return this._valueMin();if(t>=this._valueMax())return this._valueMax();var e=this.options.step>0?this.options.step:1,i=(t-this._valueMin())%e,s=t-i;return 2*Math.abs(i)>=e&&(s+=i>0?e:-e),parseFloat(s.toFixed(5))},_calculateNewMax:function(){var t=this.options.max,e=this._valueMin(),i=this.options.step,s=Math.round((t-e)/i)*i;t=s+e,t>this.options.max&&(t-=i),this.max=parseFloat(t.toFixed(this._precision()))},_precision:function(){var t=this._precisionOf(this.options.step);return null!==this.options.min&&(t=Math.max(t,this._precisionOf(this.options.min))),t},_precisionOf:function(t){var e=""+t,i=e.indexOf(".");return-1===i?0:e.length-i-1},_valueMin:function(){return this.options.min},_valueMax:function(){return this.max},_refreshRange:function(t){"vertical"===t&&this.range.css({width:"",left:""}),"horizontal"===t&&this.range.css({height:"",bottom:""})},_refreshValue:function(){var e,i,s,n,o,a=this.options.range,r=this.options,h=this,l=this._animateOff?!1:r.animate,c={};this._hasMultipleValues()?this.handles.each(function(s){i=100*((h.values(s)-h._valueMin())/(h._valueMax()-h._valueMin())),c["horizontal"===h.orientation?"left":"bottom"]=i+"%",t(this).stop(1,1)[l?"animate":"css"](c,r.animate),h.options.range===!0&&("horizontal"===h.orientation?(0===s&&h.range.stop(1,1)[l?"animate":"css"]({left:i+"%"},r.animate),1===s&&h.range[l?"animate":"css"]({width:i-e+"%"},{queue:!1,duration:r.animate})):(0===s&&h.range.stop(1,1)[l?"animate":"css"]({bottom:i+"%"},r.animate),1===s&&h.range[l?"animate":"css"]({height:i-e+"%"},{queue:!1,duration:r.animate}))),e=i}):(s=this.value(),n=this._valueMin(),o=this._valueMax(),i=o!==n?100*((s-n)/(o-n)):0,c["horizontal"===this.orientation?"left":"bottom"]=i+"%",this.handle.stop(1,1)[l?"animate":"css"](c,r.animate),"min"===a&&"horizontal"===this.orientation&&this.range.stop(1,1)[l?"animate":"css"]({width:i+"%"},r.animate),"max"===a&&"horizontal"===this.orientation&&this.range.stop(1,1)[l?"animate":"css"]({width:100-i+"%"},r.animate),"min"===a&&"vertical"===this.orientation&&this.range.stop(1,1)[l?"animate":"css"]({height:i+"%"},r.animate),"max"===a&&"vertical"===this.orientation&&this.range.stop(1,1)[l?"animate":"css"]({height:100-i+"%"},r.animate))},_handleEvents:{keydown:function(e){var i,s,n,o,a=t(e.target).data("ui-slider-handle-index");switch(e.keyCode){case t.ui.keyCode.HOME:case t.ui.keyCode.END:case t.ui.keyCode.PAGE_UP:case t.ui.keyCode.PAGE_DOWN:case t.ui.keyCode.UP:case t.ui.keyCode.RIGHT:case t.ui.keyCode.DOWN:case t.ui.keyCode.LEFT:if(e.preventDefault(),!this._keySliding&&(this._keySliding=!0,this._addClass(t(e.target),null,"ui-state-active"),i=this._start(e,a),i===!1))return}switch(o=this.options.step,s=n=this._hasMultipleValues()?this.values(a):this.value(),e.keyCode){case t.ui.keyCode.HOME:n=this._valueMin();break;case t.ui.keyCode.END:n=this._valueMax();break;case t.ui.keyCode.PAGE_UP:n=this._trimAlignValue(s+(this._valueMax()-this._valueMin())/this.numPages);break;case t.ui.keyCode.PAGE_DOWN:n=this._trimAlignValue(s-(this._valueMax()-this._valueMin())/this.numPages);break;case t.ui.keyCode.UP:case t.ui.keyCode.RIGHT:if(s===this._valueMax())return;n=this._trimAlignValue(s+o);break;case t.ui.keyCode.DOWN:case t.ui.keyCode.LEFT:if(s===this._valueMin())return;n=this._trimAlignValue(s-o)}this._slide(e,a,n)},keyup:function(e){var i=t(e.target).data("ui-slider-handle-index");this._keySliding&&(this._keySliding=!1,this._stop(e,i),this._change(e,i),this._removeClass(t(e.target),null,"ui-state-active"))}}}),t.widget("ui.sortable",t.ui.mouse,{version:"1.12.1",widgetEventPrefix:"sort",ready:!1,options:{appendTo:"parent",axis:!1,connectWith:!1,containment:!1,cursor:"auto",cursorAt:!1,dropOnEmpty:!0,forcePlaceholderSize:!1,forceHelperSize:!1,grid:!1,handle:!1,helper:"original",items:"> *",opacity:!1,placeholder:!1,revert:!1,scroll:!0,scrollSensitivity:20,scrollSpeed:20,scope:"default",tolerance:"intersect",zIndex:1e3,activate:null,beforeStop:null,change:null,deactivate:null,out:null,over:null,receive:null,remove:null,sort:null,start:null,stop:null,update:null},_isOverAxis:function(t,e,i){return t>=e&&e+i>t},_isFloating:function(t){return/left|right/.test(t.css("float"))||/inline|table-cell/.test(t.css("display"))},_create:function(){this.containerCache={},this._addClass("ui-sortable"),this.refresh(),this.offset=this.element.offset(),this._mouseInit(),this._setHandleClassName(),this.ready=!0},_setOption:function(t,e){this._super(t,e),"handle"===t&&this._setHandleClassName()},_setHandleClassName:function(){var e=this;this._removeClass(this.element.find(".ui-sortable-handle"),"ui-sortable-handle"),t.each(this.items,function(){e._addClass(this.instance.options.handle?this.item.find(this.instance.options.handle):this.item,"ui-sortable-handle")})},_destroy:function(){this._mouseDestroy();for(var t=this.items.length-1;t>=0;t--)this.items[t].item.removeData(this.widgetName+"-item");return this},_mouseCapture:function(e,i){var s=null,n=!1,o=this;return this.reverting?!1:this.options.disabled||"static"===this.options.type?!1:(this._refreshItems(e),t(e.target).parents().each(function(){return t.data(this,o.widgetName+"-item")===o?(s=t(this),!1):void 0}),t.data(e.target,o.widgetName+"-item")===o&&(s=t(e.target)),s?!this.options.handle||i||(t(this.options.handle,s).find("*").addBack().each(function(){this===e.target&&(n=!0)}),n)?(this.currentItem=s,this._removeCurrentsFromItems(),!0):!1:!1)},_mouseStart:function(e,i,s){var n,o,a=this.options;if(this.currentContainer=this,this.refreshPositions(),this.helper=this._createHelper(e),this._cacheHelperProportions(),this._cacheMargins(),this.scrollParent=this.helper.scrollParent(),this.offset=this.currentItem.offset(),this.offset={top:this.offset.top-this.margins.top,left:this.offset.left-this.margins.left},t.extend(this.offset,{click:{left:e.pageX-this.offset.left,top:e.pageY-this.offset.top},parent:this._getParentOffset(),relative:this._getRelativeOffset()}),this.helper.css("position","absolute"),this.cssPosition=this.helper.css("position"),this.originalPosition=this._generatePosition(e),this.originalPageX=e.pageX,this.originalPageY=e.pageY,a.cursorAt&&this._adjustOffsetFromHelper(a.cursorAt),this.domPosition={prev:this.currentItem.prev()[0],parent:this.currentItem.parent()[0]},this.helper[0]!==this.currentItem[0]&&this.currentItem.hide(),this._createPlaceholder(),a.containment&&this._setContainment(),a.cursor&&"auto"!==a.cursor&&(o=this.document.find("body"),this.storedCursor=o.css("cursor"),o.css("cursor",a.cursor),this.storedStylesheet=t("<style>*{ cursor: "+a.cursor+" !important; }</style>").appendTo(o)),a.opacity&&(this.helper.css("opacity")&&(this._storedOpacity=this.helper.css("opacity")),this.helper.css("opacity",a.opacity)),a.zIndex&&(this.helper.css("zIndex")&&(this._storedZIndex=this.helper.css("zIndex")),this.helper.css("zIndex",a.zIndex)),this.scrollParent[0]!==this.document[0]&&"HTML"!==this.scrollParent[0].tagName&&(this.overflowOffset=this.scrollParent.offset()),this._trigger("start",e,this._uiHash()),this._preserveHelperProportions||this._cacheHelperProportions(),!s)for(n=this.containers.length-1;n>=0;n--)this.containers[n]._trigger("activate",e,this._uiHash(this));return t.ui.ddmanager&&(t.ui.ddmanager.current=this),t.ui.ddmanager&&!a.dropBehaviour&&t.ui.ddmanager.prepareOffsets(this,e),this.dragging=!0,this._addClass(this.helper,"ui-sortable-helper"),this._mouseDrag(e),!0},_mouseDrag:function(e){var i,s,n,o,a=this.options,r=!1;for(this.position=this._generatePosition(e),this.positionAbs=this._convertPositionTo("absolute"),this.lastPositionAbs||(this.lastPositionAbs=this.positionAbs),this.options.scroll&&(this.scrollParent[0]!==this.document[0]&&"HTML"!==this.scrollParent[0].tagName?(this.overflowOffset.top+this.scrollParent[0].offsetHeight-e.pageY<a.scrollSensitivity?this.scrollParent[0].scrollTop=r=this.scrollParent[0].scrollTop+a.scrollSpeed:e.pageY-this.overflowOffset.top<a.scrollSensitivity&&(this.scrollParent[0].scrollTop=r=this.scrollParent[0].scrollTop-a.scrollSpeed),this.overflowOffset.left+this.scrollParent[0].offsetWidth-e.pageX<a.scrollSensitivity?this.scrollParent[0].scrollLeft=r=this.scrollParent[0].scrollLeft+a.scrollSpeed:e.pageX-this.overflowOffset.left<a.scrollSensitivity&&(this.scrollParent[0].scrollLeft=r=this.scrollParent[0].scrollLeft-a.scrollSpeed)):(e.pageY-this.document.scrollTop()<a.scrollSensitivity?r=this.document.scrollTop(this.document.scrollTop()-a.scrollSpeed):this.window.height()-(e.pageY-this.document.scrollTop())<a.scrollSensitivity&&(r=this.document.scrollTop(this.document.scrollTop()+a.scrollSpeed)),e.pageX-this.document.scrollLeft()<a.scrollSensitivity?r=this.document.scrollLeft(this.document.scrollLeft()-a.scrollSpeed):this.window.width()-(e.pageX-this.document.scrollLeft())<a.scrollSensitivity&&(r=this.document.scrollLeft(this.document.scrollLeft()+a.scrollSpeed))),r!==!1&&t.ui.ddmanager&&!a.dropBehaviour&&t.ui.ddmanager.prepareOffsets(this,e)),this.positionAbs=this._convertPositionTo("absolute"),this.options.axis&&"y"===this.options.axis||(this.helper[0].style.left=this.position.left+"px"),this.options.axis&&"x"===this.options.axis||(this.helper[0].style.top=this.position.top+"px"),i=this.items.length-1;i>=0;i--)if(s=this.items[i],n=s.item[0],o=this._intersectsWithPointer(s),o&&s.instance===this.currentContainer&&n!==this.currentItem[0]&&this.placeholder[1===o?"next":"prev"]()[0]!==n&&!t.contains(this.placeholder[0],n)&&("semi-dynamic"===this.options.type?!t.contains(this.element[0],n):!0)){if(this.direction=1===o?"down":"up","pointer"!==this.options.tolerance&&!this._intersectsWithSides(s))break;this._rearrange(e,s),this._trigger("change",e,this._uiHash());break}return this._contactContainers(e),t.ui.ddmanager&&t.ui.ddmanager.drag(this,e),this._trigger("sort",e,this._uiHash()),this.lastPositionAbs=this.positionAbs,!1},_mouseStop:function(e,i){if(e){if(t.ui.ddmanager&&!this.options.dropBehaviour&&t.ui.ddmanager.drop(this,e),this.options.revert){var s=this,n=this.placeholder.offset(),o=this.options.axis,a={};o&&"x"!==o||(a.left=n.left-this.offset.parent.left-this.margins.left+(this.offsetParent[0]===this.document[0].body?0:this.offsetParent[0].scrollLeft)),o&&"y"!==o||(a.top=n.top-this.offset.parent.top-this.margins.top+(this.offsetParent[0]===this.document[0].body?0:this.offsetParent[0].scrollTop)),this.reverting=!0,t(this.helper).animate(a,parseInt(this.options.revert,10)||500,function(){s._clear(e)})}else this._clear(e,i);return!1}},cancel:function(){if(this.dragging){this._mouseUp(new t.Event("mouseup",{target:null})),"original"===this.options.helper?(this.currentItem.css(this._storedCSS),this._removeClass(this.currentItem,"ui-sortable-helper")):this.currentItem.show();for(var e=this.containers.length-1;e>=0;e--)this.containers[e]._trigger("deactivate",null,this._uiHash(this)),this.containers[e].containerCache.over&&(this.containers[e]._trigger("out",null,this._uiHash(this)),this.containers[e].containerCache.over=0)}return this.placeholder&&(this.placeholder[0].parentNode&&this.placeholder[0].parentNode.removeChild(this.placeholder[0]),"original"!==this.options.helper&&this.helper&&this.helper[0].parentNode&&this.helper.remove(),t.extend(this,{helper:null,dragging:!1,reverting:!1,_noFinalSort:null}),this.domPosition.prev?t(this.domPosition.prev).after(this.currentItem):t(this.domPosition.parent).prepend(this.currentItem)),this},serialize:function(e){var i=this._getItemsAsjQuery(e&&e.connected),s=[];return e=e||{},t(i).each(function(){var i=(t(e.item||this).attr(e.attribute||"id")||"").match(e.expression||/(.+)[\-=_](.+)/);i&&s.push((e.key||i[1]+"[]")+"="+(e.key&&e.expression?i[1]:i[2]))}),!s.length&&e.key&&s.push(e.key+"="),s.join("&")},toArray:function(e){var i=this._getItemsAsjQuery(e&&e.connected),s=[];return e=e||{},i.each(function(){s.push(t(e.item||this).attr(e.attribute||"id")||"")}),s},_intersectsWith:function(t){var e=this.positionAbs.left,i=e+this.helperProportions.width,s=this.positionAbs.top,n=s+this.helperProportions.height,o=t.left,a=o+t.width,r=t.top,h=r+t.height,l=this.offset.click.top,c=this.offset.click.left,u="x"===this.options.axis||s+l>r&&h>s+l,d="y"===this.options.axis||e+c>o&&a>e+c,p=u&&d;return"pointer"===this.options.tolerance||this.options.forcePointerForContainers||"pointer"!==this.options.tolerance&&this.helperProportions[this.floating?"width":"height"]>t[this.floating?"width":"height"]?p:e+this.helperProportions.width/2>o&&a>i-this.helperProportions.width/2&&s+this.helperProportions.height/2>r&&h>n-this.helperProportions.height/2},_intersectsWithPointer:function(t){var e,i,s="x"===this.options.axis||this._isOverAxis(this.positionAbs.top+this.offset.click.top,t.top,t.height),n="y"===this.options.axis||this._isOverAxis(this.positionAbs.left+this.offset.click.left,t.left,t.width),o=s&&n;return o?(e=this._getDragVerticalDirection(),i=this._getDragHorizontalDirection(),this.floating?"right"===i||"down"===e?2:1:e&&("down"===e?2:1)):!1},_intersectsWithSides:function(t){var e=this._isOverAxis(this.positionAbs.top+this.offset.click.top,t.top+t.height/2,t.height),i=this._isOverAxis(this.positionAbs.left+this.offset.click.left,t.left+t.width/2,t.width),s=this._getDragVerticalDirection(),n=this._getDragHorizontalDirection();return this.floating&&n?"right"===n&&i||"left"===n&&!i:s&&("down"===s&&e||"up"===s&&!e)},_getDragVerticalDirection:function(){var t=this.positionAbs.top-this.lastPositionAbs.top;return 0!==t&&(t>0?"down":"up")},_getDragHorizontalDirection:function(){var t=this.positionAbs.left-this.lastPositionAbs.left;return 0!==t&&(t>0?"right":"left")},refresh:function(t){return this._refreshItems(t),this._setHandleClassName(),this.refreshPositions(),this},_connectWith:function(){var t=this.options;return t.connectWith.constructor===String?[t.connectWith]:t.connectWith},_getItemsAsjQuery:function(e){function i(){r.push(this)}var s,n,o,a,r=[],h=[],l=this._connectWith();if(l&&e)for(s=l.length-1;s>=0;s--)for(o=t(l[s],this.document[0]),n=o.length-1;n>=0;n--)a=t.data(o[n],this.widgetFullName),a&&a!==this&&!a.options.disabled&&h.push([t.isFunction(a.options.items)?a.options.items.call(a.element):t(a.options.items,a.element).not(".ui-sortable-helper").not(".ui-sortable-placeholder"),a]);for(h.push([t.isFunction(this.options.items)?this.options.items.call(this.element,null,{options:this.options,item:this.currentItem}):t(this.options.items,this.element).not(".ui-sortable-helper").not(".ui-sortable-placeholder"),this]),s=h.length-1;s>=0;s--)h[s][0].each(i);return t(r)},_removeCurrentsFromItems:function(){var e=this.currentItem.find(":data("+this.widgetName+"-item)");this.items=t.grep(this.items,function(t){for(var i=0;e.length>i;i++)if(e[i]===t.item[0])return!1;return!0})},_refreshItems:function(e){this.items=[],this.containers=[this];var i,s,n,o,a,r,h,l,c=this.items,u=[[t.isFunction(this.options.items)?this.options.items.call(this.element[0],e,{item:this.currentItem}):t(this.options.items,this.element),this]],d=this._connectWith();if(d&&this.ready)for(i=d.length-1;i>=0;i--)for(n=t(d[i],this.document[0]),s=n.length-1;s>=0;s--)o=t.data(n[s],this.widgetFullName),o&&o!==this&&!o.options.disabled&&(u.push([t.isFunction(o.options.items)?o.options.items.call(o.element[0],e,{item:this.currentItem}):t(o.options.items,o.element),o]),this.containers.push(o));for(i=u.length-1;i>=0;i--)for(a=u[i][1],r=u[i][0],s=0,l=r.length;l>s;s++)h=t(r[s]),h.data(this.widgetName+"-item",a),c.push({item:h,instance:a,width:0,height:0,left:0,top:0})},refreshPositions:function(e){this.floating=this.items.length?"x"===this.options.axis||this._isFloating(this.items[0].item):!1,this.offsetParent&&this.helper&&(this.offset.parent=this._getParentOffset());var i,s,n,o;for(i=this.items.length-1;i>=0;i--)s=this.items[i],s.instance!==this.currentContainer&&this.currentContainer&&s.item[0]!==this.currentItem[0]||(n=this.options.toleranceElement?t(this.options.toleranceElement,s.item):s.item,e||(s.width=n.outerWidth(),s.height=n.outerHeight()),o=n.offset(),s.left=o.left,s.top=o.top);if(this.options.custom&&this.options.custom.refreshContainers)this.options.custom.refreshContainers.call(this);else for(i=this.containers.length-1;i>=0;i--)o=this.containers[i].element.offset(),this.containers[i].containerCache.left=o.left,this.containers[i].containerCache.top=o.top,this.containers[i].containerCache.width=this.containers[i].element.outerWidth(),this.containers[i].containerCache.height=this.containers[i].element.outerHeight();return this},_createPlaceholder:function(e){e=e||this;var i,s=e.options;s.placeholder&&s.placeholder.constructor!==String||(i=s.placeholder,s.placeholder={element:function(){var s=e.currentItem[0].nodeName.toLowerCase(),n=t("<"+s+">",e.document[0]);return e._addClass(n,"ui-sortable-placeholder",i||e.currentItem[0].className)._removeClass(n,"ui-sortable-helper"),"tbody"===s?e._createTrPlaceholder(e.currentItem.find("tr").eq(0),t("<tr>",e.document[0]).appendTo(n)):"tr"===s?e._createTrPlaceholder(e.currentItem,n):"img"===s&&n.attr("src",e.currentItem.attr("src")),i||n.css("visibility","hidden"),n},update:function(t,n){(!i||s.forcePlaceholderSize)&&(n.height()||n.height(e.currentItem.innerHeight()-parseInt(e.currentItem.css("paddingTop")||0,10)-parseInt(e.currentItem.css("paddingBottom")||0,10)),n.width()||n.width(e.currentItem.innerWidth()-parseInt(e.currentItem.css("paddingLeft")||0,10)-parseInt(e.currentItem.css("paddingRight")||0,10)))}}),e.placeholder=t(s.placeholder.element.call(e.element,e.currentItem)),e.currentItem.after(e.placeholder),s.placeholder.update(e,e.placeholder)},_createTrPlaceholder:function(e,i){var s=this;e.children().each(function(){t("<td>&#160;</td>",s.document[0]).attr("colspan",t(this).attr("colspan")||1).appendTo(i)})},_contactContainers:function(e){var i,s,n,o,a,r,h,l,c,u,d=null,p=null;for(i=this.containers.length-1;i>=0;i--)if(!t.contains(this.currentItem[0],this.containers[i].element[0]))if(this._intersectsWith(this.containers[i].containerCache)){if(d&&t.contains(this.containers[i].element[0],d.element[0]))continue;d=this.containers[i],p=i}else this.containers[i].containerCache.over&&(this.containers[i]._trigger("out",e,this._uiHash(this)),this.containers[i].containerCache.over=0);if(d)if(1===this.containers.length)this.containers[p].containerCache.over||(this.containers[p]._trigger("over",e,this._uiHash(this)),this.containers[p].containerCache.over=1);else{for(n=1e4,o=null,c=d.floating||this._isFloating(this.currentItem),a=c?"left":"top",r=c?"width":"height",u=c?"pageX":"pageY",s=this.items.length-1;s>=0;s--)t.contains(this.containers[p].element[0],this.items[s].item[0])&&this.items[s].item[0]!==this.currentItem[0]&&(h=this.items[s].item.offset()[a],l=!1,e[u]-h>this.items[s][r]/2&&(l=!0),n>Math.abs(e[u]-h)&&(n=Math.abs(e[u]-h),o=this.items[s],this.direction=l?"up":"down"));if(!o&&!this.options.dropOnEmpty)return;if(this.currentContainer===this.containers[p])return this.currentContainer.containerCache.over||(this.containers[p]._trigger("over",e,this._uiHash()),this.currentContainer.containerCache.over=1),void 0;o?this._rearrange(e,o,null,!0):this._rearrange(e,null,this.containers[p].element,!0),this._trigger("change",e,this._uiHash()),this.containers[p]._trigger("change",e,this._uiHash(this)),this.currentContainer=this.containers[p],this.options.placeholder.update(this.currentContainer,this.placeholder),this.containers[p]._trigger("over",e,this._uiHash(this)),this.containers[p].containerCache.over=1}},_createHelper:function(e){var i=this.options,s=t.isFunction(i.helper)?t(i.helper.apply(this.element[0],[e,this.currentItem])):"clone"===i.helper?this.currentItem.clone():this.currentItem;return s.parents("body").length||t("parent"!==i.appendTo?i.appendTo:this.currentItem[0].parentNode)[0].appendChild(s[0]),s[0]===this.currentItem[0]&&(this._storedCSS={width:this.currentItem[0].style.width,height:this.currentItem[0].style.height,position:this.currentItem.css("position"),top:this.currentItem.css("top"),left:this.currentItem.css("left")}),(!s[0].style.width||i.forceHelperSize)&&s.width(this.currentItem.width()),(!s[0].style.height||i.forceHelperSize)&&s.height(this.currentItem.height()),s},_adjustOffsetFromHelper:function(e){"string"==typeof e&&(e=e.split(" ")),t.isArray(e)&&(e={left:+e[0],top:+e[1]||0}),"left"in e&&(this.offset.click.left=e.left+this.margins.left),"right"in e&&(this.offset.click.left=this.helperProportions.width-e.right+this.margins.left),"top"in e&&(this.offset.click.top=e.top+this.margins.top),"bottom"in e&&(this.offset.click.top=this.helperProportions.height-e.bottom+this.margins.top)},_getParentOffset:function(){this.offsetParent=this.helper.offsetParent();var e=this.offsetParent.offset();return"absolute"===this.cssPosition&&this.scrollParent[0]!==this.document[0]&&t.contains(this.scrollParent[0],this.offsetParent[0])&&(e.left+=this.scrollParent.scrollLeft(),e.top+=this.scrollParent.scrollTop()),(this.offsetParent[0]===this.document[0].body||this.offsetParent[0].tagName&&"html"===this.offsetParent[0].tagName.toLowerCase()&&t.ui.ie)&&(e={top:0,left:0}),{top:e.top+(parseInt(this.offsetParent.css("borderTopWidth"),10)||0),left:e.left+(parseInt(this.offsetParent.css("borderLeftWidth"),10)||0)}},_getRelativeOffset:function(){if("relative"===this.cssPosition){var t=this.currentItem.position();return{top:t.top-(parseInt(this.helper.css("top"),10)||0)+this.scrollParent.scrollTop(),left:t.left-(parseInt(this.helper.css("left"),10)||0)+this.scrollParent.scrollLeft()}}return{top:0,left:0}},_cacheMargins:function(){this.margins={left:parseInt(this.currentItem.css("marginLeft"),10)||0,top:parseInt(this.currentItem.css("marginTop"),10)||0}},_cacheHelperProportions:function(){this.helperProportions={width:this.helper.outerWidth(),height:this.helper.outerHeight()}},_setContainment:function(){var e,i,s,n=this.options;"parent"===n.containment&&(n.containment=this.helper[0].parentNode),("document"===n.containment||"window"===n.containment)&&(this.containment=[0-this.offset.relative.left-this.offset.parent.left,0-this.offset.relative.top-this.offset.parent.top,"document"===n.containment?this.document.width():this.window.width()-this.helperProportions.width-this.margins.left,("document"===n.containment?this.document.height()||document.body.parentNode.scrollHeight:this.window.height()||this.document[0].body.parentNode.scrollHeight)-this.helperProportions.height-this.margins.top]),/^(document|window|parent)$/.test(n.containment)||(e=t(n.containment)[0],i=t(n.containment).offset(),s="hidden"!==t(e).css("overflow"),this.containment=[i.left+(parseInt(t(e).css("borderLeftWidth"),10)||0)+(parseInt(t(e).css("paddingLeft"),10)||0)-this.margins.left,i.top+(parseInt(t(e).css("borderTopWidth"),10)||0)+(parseInt(t(e).css("paddingTop"),10)||0)-this.margins.top,i.left+(s?Math.max(e.scrollWidth,e.offsetWidth):e.offsetWidth)-(parseInt(t(e).css("borderLeftWidth"),10)||0)-(parseInt(t(e).css("paddingRight"),10)||0)-this.helperProportions.width-this.margins.left,i.top+(s?Math.max(e.scrollHeight,e.offsetHeight):e.offsetHeight)-(parseInt(t(e).css("borderTopWidth"),10)||0)-(parseInt(t(e).css("paddingBottom"),10)||0)-this.helperProportions.height-this.margins.top])},_convertPositionTo:function(e,i){i||(i=this.position);var s="absolute"===e?1:-1,n="absolute"!==this.cssPosition||this.scrollParent[0]!==this.document[0]&&t.contains(this.scrollParent[0],this.offsetParent[0])?this.scrollParent:this.offsetParent,o=/(html|body)/i.test(n[0].tagName);return{top:i.top+this.offset.relative.top*s+this.offset.parent.top*s-("fixed"===this.cssPosition?-this.scrollParent.scrollTop():o?0:n.scrollTop())*s,left:i.left+this.offset.relative.left*s+this.offset.parent.left*s-("fixed"===this.cssPosition?-this.scrollParent.scrollLeft():o?0:n.scrollLeft())*s}},_generatePosition:function(e){var i,s,n=this.options,o=e.pageX,a=e.pageY,r="absolute"!==this.cssPosition||this.scrollParent[0]!==this.document[0]&&t.contains(this.scrollParent[0],this.offsetParent[0])?this.scrollParent:this.offsetParent,h=/(html|body)/i.test(r[0].tagName);return"relative"!==this.cssPosition||this.scrollParent[0]!==this.document[0]&&this.scrollParent[0]!==this.offsetParent[0]||(this.offset.relative=this._getRelativeOffset()),this.originalPosition&&(this.containment&&(e.pageX-this.offset.click.left<this.containment[0]&&(o=this.containment[0]+this.offset.click.left),e.pageY-this.offset.click.top<this.containment[1]&&(a=this.containment[1]+this.offset.click.top),e.pageX-this.offset.click.left>this.containment[2]&&(o=this.containment[2]+this.offset.click.left),e.pageY-this.offset.click.top>this.containment[3]&&(a=this.containment[3]+this.offset.click.top)),n.grid&&(i=this.originalPageY+Math.round((a-this.originalPageY)/n.grid[1])*n.grid[1],a=this.containment?i-this.offset.click.top>=this.containment[1]&&i-this.offset.click.top<=this.containment[3]?i:i-this.offset.click.top>=this.containment[1]?i-n.grid[1]:i+n.grid[1]:i,s=this.originalPageX+Math.round((o-this.originalPageX)/n.grid[0])*n.grid[0],o=this.containment?s-this.offset.click.left>=this.containment[0]&&s-this.offset.click.left<=this.containment[2]?s:s-this.offset.click.left>=this.containment[0]?s-n.grid[0]:s+n.grid[0]:s)),{top:a-this.offset.click.top-this.offset.relative.top-this.offset.parent.top+("fixed"===this.cssPosition?-this.scrollParent.scrollTop():h?0:r.scrollTop()),left:o-this.offset.click.left-this.offset.relative.left-this.offset.parent.left+("fixed"===this.cssPosition?-this.scrollParent.scrollLeft():h?0:r.scrollLeft())}},_rearrange:function(t,e,i,s){i?i[0].appendChild(this.placeholder[0]):e.item[0].parentNode.insertBefore(this.placeholder[0],"down"===this.direction?e.item[0]:e.item[0].nextSibling),this.counter=this.counter?++this.counter:1;var n=this.counter;
this._delay(function(){n===this.counter&&this.refreshPositions(!s)})},_clear:function(t,e){function i(t,e,i){return function(s){i._trigger(t,s,e._uiHash(e))}}this.reverting=!1;var s,n=[];if(!this._noFinalSort&&this.currentItem.parent().length&&this.placeholder.before(this.currentItem),this._noFinalSort=null,this.helper[0]===this.currentItem[0]){for(s in this._storedCSS)("auto"===this._storedCSS[s]||"static"===this._storedCSS[s])&&(this._storedCSS[s]="");this.currentItem.css(this._storedCSS),this._removeClass(this.currentItem,"ui-sortable-helper")}else this.currentItem.show();for(this.fromOutside&&!e&&n.push(function(t){this._trigger("receive",t,this._uiHash(this.fromOutside))}),!this.fromOutside&&this.domPosition.prev===this.currentItem.prev().not(".ui-sortable-helper")[0]&&this.domPosition.parent===this.currentItem.parent()[0]||e||n.push(function(t){this._trigger("update",t,this._uiHash())}),this!==this.currentContainer&&(e||(n.push(function(t){this._trigger("remove",t,this._uiHash())}),n.push(function(t){return function(e){t._trigger("receive",e,this._uiHash(this))}}.call(this,this.currentContainer)),n.push(function(t){return function(e){t._trigger("update",e,this._uiHash(this))}}.call(this,this.currentContainer)))),s=this.containers.length-1;s>=0;s--)e||n.push(i("deactivate",this,this.containers[s])),this.containers[s].containerCache.over&&(n.push(i("out",this,this.containers[s])),this.containers[s].containerCache.over=0);if(this.storedCursor&&(this.document.find("body").css("cursor",this.storedCursor),this.storedStylesheet.remove()),this._storedOpacity&&this.helper.css("opacity",this._storedOpacity),this._storedZIndex&&this.helper.css("zIndex","auto"===this._storedZIndex?"":this._storedZIndex),this.dragging=!1,e||this._trigger("beforeStop",t,this._uiHash()),this.placeholder[0].parentNode.removeChild(this.placeholder[0]),this.cancelHelperRemoval||(this.helper[0]!==this.currentItem[0]&&this.helper.remove(),this.helper=null),!e){for(s=0;n.length>s;s++)n[s].call(this,t);this._trigger("stop",t,this._uiHash())}return this.fromOutside=!1,!this.cancelHelperRemoval},_trigger:function(){t.Widget.prototype._trigger.apply(this,arguments)===!1&&this.cancel()},_uiHash:function(e){var i=e||this;return{helper:i.helper,placeholder:i.placeholder||t([]),position:i.position,originalPosition:i.originalPosition,offset:i.positionAbs,item:i.currentItem,sender:e?e.element:null}}}),t.widget("ui.spinner",{version:"1.12.1",defaultElement:"<input>",widgetEventPrefix:"spin",options:{classes:{"ui-spinner":"ui-corner-all","ui-spinner-down":"ui-corner-br","ui-spinner-up":"ui-corner-tr"},culture:null,icons:{down:"ui-icon-triangle-1-s",up:"ui-icon-triangle-1-n"},incremental:!0,max:null,min:null,numberFormat:null,page:10,step:1,change:null,spin:null,start:null,stop:null},_create:function(){this._setOption("max",this.options.max),this._setOption("min",this.options.min),this._setOption("step",this.options.step),""!==this.value()&&this._value(this.element.val(),!0),this._draw(),this._on(this._events),this._refresh(),this._on(this.window,{beforeunload:function(){this.element.removeAttr("autocomplete")}})},_getCreateOptions:function(){var e=this._super(),i=this.element;return t.each(["min","max","step"],function(t,s){var n=i.attr(s);null!=n&&n.length&&(e[s]=n)}),e},_events:{keydown:function(t){this._start(t)&&this._keydown(t)&&t.preventDefault()},keyup:"_stop",focus:function(){this.previous=this.element.val()},blur:function(t){return this.cancelBlur?(delete this.cancelBlur,void 0):(this._stop(),this._refresh(),this.previous!==this.element.val()&&this._trigger("change",t),void 0)},mousewheel:function(t,e){if(e){if(!this.spinning&&!this._start(t))return!1;this._spin((e>0?1:-1)*this.options.step,t),clearTimeout(this.mousewheelTimer),this.mousewheelTimer=this._delay(function(){this.spinning&&this._stop(t)},100),t.preventDefault()}},"mousedown .ui-spinner-button":function(e){function i(){var e=this.element[0]===t.ui.safeActiveElement(this.document[0]);e||(this.element.trigger("focus"),this.previous=s,this._delay(function(){this.previous=s}))}var s;s=this.element[0]===t.ui.safeActiveElement(this.document[0])?this.previous:this.element.val(),e.preventDefault(),i.call(this),this.cancelBlur=!0,this._delay(function(){delete this.cancelBlur,i.call(this)}),this._start(e)!==!1&&this._repeat(null,t(e.currentTarget).hasClass("ui-spinner-up")?1:-1,e)},"mouseup .ui-spinner-button":"_stop","mouseenter .ui-spinner-button":function(e){return t(e.currentTarget).hasClass("ui-state-active")?this._start(e)===!1?!1:(this._repeat(null,t(e.currentTarget).hasClass("ui-spinner-up")?1:-1,e),void 0):void 0},"mouseleave .ui-spinner-button":"_stop"},_enhance:function(){this.uiSpinner=this.element.attr("autocomplete","off").wrap("<span>").parent().append("<a></a><a></a>")},_draw:function(){this._enhance(),this._addClass(this.uiSpinner,"ui-spinner","ui-widget ui-widget-content"),this._addClass("ui-spinner-input"),this.element.attr("role","spinbutton"),this.buttons=this.uiSpinner.children("a").attr("tabIndex",-1).attr("aria-hidden",!0).button({classes:{"ui-button":""}}),this._removeClass(this.buttons,"ui-corner-all"),this._addClass(this.buttons.first(),"ui-spinner-button ui-spinner-up"),this._addClass(this.buttons.last(),"ui-spinner-button ui-spinner-down"),this.buttons.first().button({icon:this.options.icons.up,showLabel:!1}),this.buttons.last().button({icon:this.options.icons.down,showLabel:!1}),this.buttons.height()>Math.ceil(.5*this.uiSpinner.height())&&this.uiSpinner.height()>0&&this.uiSpinner.height(this.uiSpinner.height())},_keydown:function(e){var i=this.options,s=t.ui.keyCode;switch(e.keyCode){case s.UP:return this._repeat(null,1,e),!0;case s.DOWN:return this._repeat(null,-1,e),!0;case s.PAGE_UP:return this._repeat(null,i.page,e),!0;case s.PAGE_DOWN:return this._repeat(null,-i.page,e),!0}return!1},_start:function(t){return this.spinning||this._trigger("start",t)!==!1?(this.counter||(this.counter=1),this.spinning=!0,!0):!1},_repeat:function(t,e,i){t=t||500,clearTimeout(this.timer),this.timer=this._delay(function(){this._repeat(40,e,i)},t),this._spin(e*this.options.step,i)},_spin:function(t,e){var i=this.value()||0;this.counter||(this.counter=1),i=this._adjustValue(i+t*this._increment(this.counter)),this.spinning&&this._trigger("spin",e,{value:i})===!1||(this._value(i),this.counter++)},_increment:function(e){var i=this.options.incremental;return i?t.isFunction(i)?i(e):Math.floor(e*e*e/5e4-e*e/500+17*e/200+1):1},_precision:function(){var t=this._precisionOf(this.options.step);return null!==this.options.min&&(t=Math.max(t,this._precisionOf(this.options.min))),t},_precisionOf:function(t){var e=""+t,i=e.indexOf(".");return-1===i?0:e.length-i-1},_adjustValue:function(t){var e,i,s=this.options;return e=null!==s.min?s.min:0,i=t-e,i=Math.round(i/s.step)*s.step,t=e+i,t=parseFloat(t.toFixed(this._precision())),null!==s.max&&t>s.max?s.max:null!==s.min&&s.min>t?s.min:t},_stop:function(t){this.spinning&&(clearTimeout(this.timer),clearTimeout(this.mousewheelTimer),this.counter=0,this.spinning=!1,this._trigger("stop",t))},_setOption:function(t,e){var i,s,n;return"culture"===t||"numberFormat"===t?(i=this._parse(this.element.val()),this.options[t]=e,this.element.val(this._format(i)),void 0):(("max"===t||"min"===t||"step"===t)&&"string"==typeof e&&(e=this._parse(e)),"icons"===t&&(s=this.buttons.first().find(".ui-icon"),this._removeClass(s,null,this.options.icons.up),this._addClass(s,null,e.up),n=this.buttons.last().find(".ui-icon"),this._removeClass(n,null,this.options.icons.down),this._addClass(n,null,e.down)),this._super(t,e),void 0)},_setOptionDisabled:function(t){this._super(t),this._toggleClass(this.uiSpinner,null,"ui-state-disabled",!!t),this.element.prop("disabled",!!t),this.buttons.button(t?"disable":"enable")},_setOptions:r(function(t){this._super(t)}),_parse:function(t){return"string"==typeof t&&""!==t&&(t=window.Globalize&&this.options.numberFormat?Globalize.parseFloat(t,10,this.options.culture):+t),""===t||isNaN(t)?null:t},_format:function(t){return""===t?"":window.Globalize&&this.options.numberFormat?Globalize.format(t,this.options.numberFormat,this.options.culture):t},_refresh:function(){this.element.attr({"aria-valuemin":this.options.min,"aria-valuemax":this.options.max,"aria-valuenow":this._parse(this.element.val())})},isValid:function(){var t=this.value();return null===t?!1:t===this._adjustValue(t)},_value:function(t,e){var i;""!==t&&(i=this._parse(t),null!==i&&(e||(i=this._adjustValue(i)),t=this._format(i))),this.element.val(t),this._refresh()},_destroy:function(){this.element.prop("disabled",!1).removeAttr("autocomplete role aria-valuemin aria-valuemax aria-valuenow"),this.uiSpinner.replaceWith(this.element)},stepUp:r(function(t){this._stepUp(t)}),_stepUp:function(t){this._start()&&(this._spin((t||1)*this.options.step),this._stop())},stepDown:r(function(t){this._stepDown(t)}),_stepDown:function(t){this._start()&&(this._spin((t||1)*-this.options.step),this._stop())},pageUp:r(function(t){this._stepUp((t||1)*this.options.page)}),pageDown:r(function(t){this._stepDown((t||1)*this.options.page)}),value:function(t){return arguments.length?(r(this._value).call(this,t),void 0):this._parse(this.element.val())},widget:function(){return this.uiSpinner}}),t.uiBackCompat!==!1&&t.widget("ui.spinner",t.ui.spinner,{_enhance:function(){this.uiSpinner=this.element.attr("autocomplete","off").wrap(this._uiSpinnerHtml()).parent().append(this._buttonHtml())},_uiSpinnerHtml:function(){return"<span>"},_buttonHtml:function(){return"<a></a><a></a>"}}),t.ui.spinner,t.widget("ui.tabs",{version:"1.12.1",delay:300,options:{active:null,classes:{"ui-tabs":"ui-corner-all","ui-tabs-nav":"ui-corner-all","ui-tabs-panel":"ui-corner-bottom","ui-tabs-tab":"ui-corner-top"},collapsible:!1,event:"click",heightStyle:"content",hide:null,show:null,activate:null,beforeActivate:null,beforeLoad:null,load:null},_isLocal:function(){var t=/#.*$/;return function(e){var i,s;i=e.href.replace(t,""),s=location.href.replace(t,"");try{i=decodeURIComponent(i)}catch(n){}try{s=decodeURIComponent(s)}catch(n){}return e.hash.length>1&&i===s}}(),_create:function(){var e=this,i=this.options;this.running=!1,this._addClass("ui-tabs","ui-widget ui-widget-content"),this._toggleClass("ui-tabs-collapsible",null,i.collapsible),this._processTabs(),i.active=this._initialActive(),t.isArray(i.disabled)&&(i.disabled=t.unique(i.disabled.concat(t.map(this.tabs.filter(".ui-state-disabled"),function(t){return e.tabs.index(t)}))).sort()),this.active=this.options.active!==!1&&this.anchors.length?this._findActive(i.active):t(),this._refresh(),this.active.length&&this.load(i.active)},_initialActive:function(){var e=this.options.active,i=this.options.collapsible,s=location.hash.substring(1);return null===e&&(s&&this.tabs.each(function(i,n){return t(n).attr("aria-controls")===s?(e=i,!1):void 0}),null===e&&(e=this.tabs.index(this.tabs.filter(".ui-tabs-active"))),(null===e||-1===e)&&(e=this.tabs.length?0:!1)),e!==!1&&(e=this.tabs.index(this.tabs.eq(e)),-1===e&&(e=i?!1:0)),!i&&e===!1&&this.anchors.length&&(e=0),e},_getCreateEventData:function(){return{tab:this.active,panel:this.active.length?this._getPanelForTab(this.active):t()}},_tabKeydown:function(e){var i=t(t.ui.safeActiveElement(this.document[0])).closest("li"),s=this.tabs.index(i),n=!0;if(!this._handlePageNav(e)){switch(e.keyCode){case t.ui.keyCode.RIGHT:case t.ui.keyCode.DOWN:s++;break;case t.ui.keyCode.UP:case t.ui.keyCode.LEFT:n=!1,s--;break;case t.ui.keyCode.END:s=this.anchors.length-1;break;case t.ui.keyCode.HOME:s=0;break;case t.ui.keyCode.SPACE:return e.preventDefault(),clearTimeout(this.activating),this._activate(s),void 0;case t.ui.keyCode.ENTER:return e.preventDefault(),clearTimeout(this.activating),this._activate(s===this.options.active?!1:s),void 0;default:return}e.preventDefault(),clearTimeout(this.activating),s=this._focusNextTab(s,n),e.ctrlKey||e.metaKey||(i.attr("aria-selected","false"),this.tabs.eq(s).attr("aria-selected","true"),this.activating=this._delay(function(){this.option("active",s)},this.delay))}},_panelKeydown:function(e){this._handlePageNav(e)||e.ctrlKey&&e.keyCode===t.ui.keyCode.UP&&(e.preventDefault(),this.active.trigger("focus"))},_handlePageNav:function(e){return e.altKey&&e.keyCode===t.ui.keyCode.PAGE_UP?(this._activate(this._focusNextTab(this.options.active-1,!1)),!0):e.altKey&&e.keyCode===t.ui.keyCode.PAGE_DOWN?(this._activate(this._focusNextTab(this.options.active+1,!0)),!0):void 0},_findNextTab:function(e,i){function s(){return e>n&&(e=0),0>e&&(e=n),e}for(var n=this.tabs.length-1;-1!==t.inArray(s(),this.options.disabled);)e=i?e+1:e-1;return e},_focusNextTab:function(t,e){return t=this._findNextTab(t,e),this.tabs.eq(t).trigger("focus"),t},_setOption:function(t,e){return"active"===t?(this._activate(e),void 0):(this._super(t,e),"collapsible"===t&&(this._toggleClass("ui-tabs-collapsible",null,e),e||this.options.active!==!1||this._activate(0)),"event"===t&&this._setupEvents(e),"heightStyle"===t&&this._setupHeightStyle(e),void 0)},_sanitizeSelector:function(t){return t?t.replace(/[!"$%&'()*+,.\/:;<=>?@\[\]\^`{|}~]/g,"\\$&"):""},refresh:function(){var e=this.options,i=this.tablist.children(":has(a[href])");e.disabled=t.map(i.filter(".ui-state-disabled"),function(t){return i.index(t)}),this._processTabs(),e.active!==!1&&this.anchors.length?this.active.length&&!t.contains(this.tablist[0],this.active[0])?this.tabs.length===e.disabled.length?(e.active=!1,this.active=t()):this._activate(this._findNextTab(Math.max(0,e.active-1),!1)):e.active=this.tabs.index(this.active):(e.active=!1,this.active=t()),this._refresh()},_refresh:function(){this._setOptionDisabled(this.options.disabled),this._setupEvents(this.options.event),this._setupHeightStyle(this.options.heightStyle),this.tabs.not(this.active).attr({"aria-selected":"false","aria-expanded":"false",tabIndex:-1}),this.panels.not(this._getPanelForTab(this.active)).hide().attr({"aria-hidden":"true"}),this.active.length?(this.active.attr({"aria-selected":"true","aria-expanded":"true",tabIndex:0}),this._addClass(this.active,"ui-tabs-active","ui-state-active"),this._getPanelForTab(this.active).show().attr({"aria-hidden":"false"})):this.tabs.eq(0).attr("tabIndex",0)},_processTabs:function(){var e=this,i=this.tabs,s=this.anchors,n=this.panels;this.tablist=this._getList().attr("role","tablist"),this._addClass(this.tablist,"ui-tabs-nav","ui-helper-reset ui-helper-clearfix ui-widget-header"),this.tablist.on("mousedown"+this.eventNamespace,"> li",function(e){t(this).is(".ui-state-disabled")&&e.preventDefault()}).on("focus"+this.eventNamespace,".ui-tabs-anchor",function(){t(this).closest("li").is(".ui-state-disabled")&&this.blur()}),this.tabs=this.tablist.find("> li:has(a[href])").attr({role:"tab",tabIndex:-1}),this._addClass(this.tabs,"ui-tabs-tab","ui-state-default"),this.anchors=this.tabs.map(function(){return t("a",this)[0]}).attr({role:"presentation",tabIndex:-1}),this._addClass(this.anchors,"ui-tabs-anchor"),this.panels=t(),this.anchors.each(function(i,s){var n,o,a,r=t(s).uniqueId().attr("id"),h=t(s).closest("li"),l=h.attr("aria-controls");e._isLocal(s)?(n=s.hash,a=n.substring(1),o=e.element.find(e._sanitizeSelector(n))):(a=h.attr("aria-controls")||t({}).uniqueId()[0].id,n="#"+a,o=e.element.find(n),o.length||(o=e._createPanel(a),o.insertAfter(e.panels[i-1]||e.tablist)),o.attr("aria-live","polite")),o.length&&(e.panels=e.panels.add(o)),l&&h.data("ui-tabs-aria-controls",l),h.attr({"aria-controls":a,"aria-labelledby":r}),o.attr("aria-labelledby",r)}),this.panels.attr("role","tabpanel"),this._addClass(this.panels,"ui-tabs-panel","ui-widget-content"),i&&(this._off(i.not(this.tabs)),this._off(s.not(this.anchors)),this._off(n.not(this.panels)))},_getList:function(){return this.tablist||this.element.find("ol, ul").eq(0)},_createPanel:function(e){return t("<div>").attr("id",e).data("ui-tabs-destroy",!0)},_setOptionDisabled:function(e){var i,s,n;for(t.isArray(e)&&(e.length?e.length===this.anchors.length&&(e=!0):e=!1),n=0;s=this.tabs[n];n++)i=t(s),e===!0||-1!==t.inArray(n,e)?(i.attr("aria-disabled","true"),this._addClass(i,null,"ui-state-disabled")):(i.removeAttr("aria-disabled"),this._removeClass(i,null,"ui-state-disabled"));this.options.disabled=e,this._toggleClass(this.widget(),this.widgetFullName+"-disabled",null,e===!0)},_setupEvents:function(e){var i={};e&&t.each(e.split(" "),function(t,e){i[e]="_eventHandler"}),this._off(this.anchors.add(this.tabs).add(this.panels)),this._on(!0,this.anchors,{click:function(t){t.preventDefault()}}),this._on(this.anchors,i),this._on(this.tabs,{keydown:"_tabKeydown"}),this._on(this.panels,{keydown:"_panelKeydown"}),this._focusable(this.tabs),this._hoverable(this.tabs)},_setupHeightStyle:function(e){var i,s=this.element.parent();"fill"===e?(i=s.height(),i-=this.element.outerHeight()-this.element.height(),this.element.siblings(":visible").each(function(){var e=t(this),s=e.css("position");"absolute"!==s&&"fixed"!==s&&(i-=e.outerHeight(!0))}),this.element.children().not(this.panels).each(function(){i-=t(this).outerHeight(!0)}),this.panels.each(function(){t(this).height(Math.max(0,i-t(this).innerHeight()+t(this).height()))}).css("overflow","auto")):"auto"===e&&(i=0,this.panels.each(function(){i=Math.max(i,t(this).height("").height())}).height(i))},_eventHandler:function(e){var i=this.options,s=this.active,n=t(e.currentTarget),o=n.closest("li"),a=o[0]===s[0],r=a&&i.collapsible,h=r?t():this._getPanelForTab(o),l=s.length?this._getPanelForTab(s):t(),c={oldTab:s,oldPanel:l,newTab:r?t():o,newPanel:h};e.preventDefault(),o.hasClass("ui-state-disabled")||o.hasClass("ui-tabs-loading")||this.running||a&&!i.collapsible||this._trigger("beforeActivate",e,c)===!1||(i.active=r?!1:this.tabs.index(o),this.active=a?t():o,this.xhr&&this.xhr.abort(),l.length||h.length||t.error("jQuery UI Tabs: Mismatching fragment identifier."),h.length&&this.load(this.tabs.index(o),e),this._toggle(e,c))},_toggle:function(e,i){function s(){o.running=!1,o._trigger("activate",e,i)}function n(){o._addClass(i.newTab.closest("li"),"ui-tabs-active","ui-state-active"),a.length&&o.options.show?o._show(a,o.options.show,s):(a.show(),s())}var o=this,a=i.newPanel,r=i.oldPanel;this.running=!0,r.length&&this.options.hide?this._hide(r,this.options.hide,function(){o._removeClass(i.oldTab.closest("li"),"ui-tabs-active","ui-state-active"),n()}):(this._removeClass(i.oldTab.closest("li"),"ui-tabs-active","ui-state-active"),r.hide(),n()),r.attr("aria-hidden","true"),i.oldTab.attr({"aria-selected":"false","aria-expanded":"false"}),a.length&&r.length?i.oldTab.attr("tabIndex",-1):a.length&&this.tabs.filter(function(){return 0===t(this).attr("tabIndex")}).attr("tabIndex",-1),a.attr("aria-hidden","false"),i.newTab.attr({"aria-selected":"true","aria-expanded":"true",tabIndex:0})},_activate:function(e){var i,s=this._findActive(e);s[0]!==this.active[0]&&(s.length||(s=this.active),i=s.find(".ui-tabs-anchor")[0],this._eventHandler({target:i,currentTarget:i,preventDefault:t.noop}))},_findActive:function(e){return e===!1?t():this.tabs.eq(e)},_getIndex:function(e){return"string"==typeof e&&(e=this.anchors.index(this.anchors.filter("[href$='"+t.ui.escapeSelector(e)+"']"))),e},_destroy:function(){this.xhr&&this.xhr.abort(),this.tablist.removeAttr("role").off(this.eventNamespace),this.anchors.removeAttr("role tabIndex").removeUniqueId(),this.tabs.add(this.panels).each(function(){t.data(this,"ui-tabs-destroy")?t(this).remove():t(this).removeAttr("role tabIndex aria-live aria-busy aria-selected aria-labelledby aria-hidden aria-expanded")}),this.tabs.each(function(){var e=t(this),i=e.data("ui-tabs-aria-controls");i?e.attr("aria-controls",i).removeData("ui-tabs-aria-controls"):e.removeAttr("aria-controls")}),this.panels.show(),"content"!==this.options.heightStyle&&this.panels.css("height","")},enable:function(e){var i=this.options.disabled;i!==!1&&(void 0===e?i=!1:(e=this._getIndex(e),i=t.isArray(i)?t.map(i,function(t){return t!==e?t:null}):t.map(this.tabs,function(t,i){return i!==e?i:null})),this._setOptionDisabled(i))},disable:function(e){var i=this.options.disabled;if(i!==!0){if(void 0===e)i=!0;else{if(e=this._getIndex(e),-1!==t.inArray(e,i))return;i=t.isArray(i)?t.merge([e],i).sort():[e]}this._setOptionDisabled(i)}},load:function(e,i){e=this._getIndex(e);var s=this,n=this.tabs.eq(e),o=n.find(".ui-tabs-anchor"),a=this._getPanelForTab(n),r={tab:n,panel:a},h=function(t,e){"abort"===e&&s.panels.stop(!1,!0),s._removeClass(n,"ui-tabs-loading"),a.removeAttr("aria-busy"),t===s.xhr&&delete s.xhr};this._isLocal(o[0])||(this.xhr=t.ajax(this._ajaxSettings(o,i,r)),this.xhr&&"canceled"!==this.xhr.statusText&&(this._addClass(n,"ui-tabs-loading"),a.attr("aria-busy","true"),this.xhr.done(function(t,e,n){setTimeout(function(){a.html(t),s._trigger("load",i,r),h(n,e)},1)}).fail(function(t,e){setTimeout(function(){h(t,e)},1)})))},_ajaxSettings:function(e,i,s){var n=this;return{url:e.attr("href").replace(/#.*$/,""),beforeSend:function(e,o){return n._trigger("beforeLoad",i,t.extend({jqXHR:e,ajaxSettings:o},s))}}},_getPanelForTab:function(e){var i=t(e).attr("aria-controls");return this.element.find(this._sanitizeSelector("#"+i))}}),t.uiBackCompat!==!1&&t.widget("ui.tabs",t.ui.tabs,{_processTabs:function(){this._superApply(arguments),this._addClass(this.tabs,"ui-tab")}}),t.ui.tabs,t.widget("ui.tooltip",{version:"1.12.1",options:{classes:{"ui-tooltip":"ui-corner-all ui-widget-shadow"},content:function(){var e=t(this).attr("title")||"";return t("<a>").text(e).html()},hide:!0,items:"[title]:not([disabled])",position:{my:"left top+15",at:"left bottom",collision:"flipfit flip"},show:!0,track:!1,close:null,open:null},_addDescribedBy:function(e,i){var s=(e.attr("aria-describedby")||"").split(/\s+/);s.push(i),e.data("ui-tooltip-id",i).attr("aria-describedby",t.trim(s.join(" ")))},_removeDescribedBy:function(e){var i=e.data("ui-tooltip-id"),s=(e.attr("aria-describedby")||"").split(/\s+/),n=t.inArray(i,s);-1!==n&&s.splice(n,1),e.removeData("ui-tooltip-id"),s=t.trim(s.join(" ")),s?e.attr("aria-describedby",s):e.removeAttr("aria-describedby")},_create:function(){this._on({mouseover:"open",focusin:"open"}),this.tooltips={},this.parents={},this.liveRegion=t("<div>").attr({role:"log","aria-live":"assertive","aria-relevant":"additions"}).appendTo(this.document[0].body),this._addClass(this.liveRegion,null,"ui-helper-hidden-accessible"),this.disabledTitles=t([])},_setOption:function(e,i){var s=this;this._super(e,i),"content"===e&&t.each(this.tooltips,function(t,e){s._updateContent(e.element)})},_setOptionDisabled:function(t){this[t?"_disable":"_enable"]()},_disable:function(){var e=this;t.each(this.tooltips,function(i,s){var n=t.Event("blur");n.target=n.currentTarget=s.element[0],e.close(n,!0)}),this.disabledTitles=this.disabledTitles.add(this.element.find(this.options.items).addBack().filter(function(){var e=t(this);return e.is("[title]")?e.data("ui-tooltip-title",e.attr("title")).removeAttr("title"):void 0}))},_enable:function(){this.disabledTitles.each(function(){var e=t(this);e.data("ui-tooltip-title")&&e.attr("title",e.data("ui-tooltip-title"))}),this.disabledTitles=t([])},open:function(e){var i=this,s=t(e?e.target:this.element).closest(this.options.items);s.length&&!s.data("ui-tooltip-id")&&(s.attr("title")&&s.data("ui-tooltip-title",s.attr("title")),s.data("ui-tooltip-open",!0),e&&"mouseover"===e.type&&s.parents().each(function(){var e,s=t(this);s.data("ui-tooltip-open")&&(e=t.Event("blur"),e.target=e.currentTarget=this,i.close(e,!0)),s.attr("title")&&(s.uniqueId(),i.parents[this.id]={element:this,title:s.attr("title")},s.attr("title",""))}),this._registerCloseHandlers(e,s),this._updateContent(s,e))},_updateContent:function(t,e){var i,s=this.options.content,n=this,o=e?e.type:null;return"string"==typeof s||s.nodeType||s.jquery?this._open(e,t,s):(i=s.call(t[0],function(i){n._delay(function(){t.data("ui-tooltip-open")&&(e&&(e.type=o),this._open(e,t,i))})}),i&&this._open(e,t,i),void 0)},_open:function(e,i,s){function n(t){l.of=t,a.is(":hidden")||a.position(l)}var o,a,r,h,l=t.extend({},this.options.position);if(s){if(o=this._find(i))return o.tooltip.find(".ui-tooltip-content").html(s),void 0;i.is("[title]")&&(e&&"mouseover"===e.type?i.attr("title",""):i.removeAttr("title")),o=this._tooltip(i),a=o.tooltip,this._addDescribedBy(i,a.attr("id")),a.find(".ui-tooltip-content").html(s),this.liveRegion.children().hide(),h=t("<div>").html(a.find(".ui-tooltip-content").html()),h.removeAttr("name").find("[name]").removeAttr("name"),h.removeAttr("id").find("[id]").removeAttr("id"),h.appendTo(this.liveRegion),this.options.track&&e&&/^mouse/.test(e.type)?(this._on(this.document,{mousemove:n}),n(e)):a.position(t.extend({of:i},this.options.position)),a.hide(),this._show(a,this.options.show),this.options.track&&this.options.show&&this.options.show.delay&&(r=this.delayedShow=setInterval(function(){a.is(":visible")&&(n(l.of),clearInterval(r))},t.fx.interval)),this._trigger("open",e,{tooltip:a})}},_registerCloseHandlers:function(e,i){var s={keyup:function(e){if(e.keyCode===t.ui.keyCode.ESCAPE){var s=t.Event(e);s.currentTarget=i[0],this.close(s,!0)}}};i[0]!==this.element[0]&&(s.remove=function(){this._removeTooltip(this._find(i).tooltip)}),e&&"mouseover"!==e.type||(s.mouseleave="close"),e&&"focusin"!==e.type||(s.focusout="close"),this._on(!0,i,s)},close:function(e){var i,s=this,n=t(e?e.currentTarget:this.element),o=this._find(n);return o?(i=o.tooltip,o.closing||(clearInterval(this.delayedShow),n.data("ui-tooltip-title")&&!n.attr("title")&&n.attr("title",n.data("ui-tooltip-title")),this._removeDescribedBy(n),o.hiding=!0,i.stop(!0),this._hide(i,this.options.hide,function(){s._removeTooltip(t(this))}),n.removeData("ui-tooltip-open"),this._off(n,"mouseleave focusout keyup"),n[0]!==this.element[0]&&this._off(n,"remove"),this._off(this.document,"mousemove"),e&&"mouseleave"===e.type&&t.each(this.parents,function(e,i){t(i.element).attr("title",i.title),delete s.parents[e]}),o.closing=!0,this._trigger("close",e,{tooltip:i}),o.hiding||(o.closing=!1)),void 0):(n.removeData("ui-tooltip-open"),void 0)},_tooltip:function(e){var i=t("<div>").attr("role","tooltip"),s=t("<div>").appendTo(i),n=i.uniqueId().attr("id");return this._addClass(s,"ui-tooltip-content"),this._addClass(i,"ui-tooltip","ui-widget ui-widget-content"),i.appendTo(this._appendTo(e)),this.tooltips[n]={element:e,tooltip:i}},_find:function(t){var e=t.data("ui-tooltip-id");return e?this.tooltips[e]:null},_removeTooltip:function(t){t.remove(),delete this.tooltips[t.attr("id")]},_appendTo:function(t){var e=t.closest(".ui-front, dialog");return e.length||(e=this.document[0].body),e},_destroy:function(){var e=this;t.each(this.tooltips,function(i,s){var n=t.Event("blur"),o=s.element;n.target=n.currentTarget=o[0],e.close(n,!0),t("#"+i).remove(),o.data("ui-tooltip-title")&&(o.attr("title")||o.attr("title",o.data("ui-tooltip-title")),o.removeData("ui-tooltip-title"))}),this.liveRegion.remove()}}),t.uiBackCompat!==!1&&t.widget("ui.tooltip",t.ui.tooltip,{options:{tooltipClass:null},_tooltip:function(){var t=this._superApply(arguments);return this.options.tooltipClass&&t.tooltip.addClass(this.options.tooltipClass),t}}),t.ui.tooltip});
//END Trisept.UI.Web.Shell.jquery.ui-1.12.1.min.js
//START Trisept.UI.Web.Shell.modernizr-2.0.6.min.js
/* Modernizr 2.0.6 (Custom Build) | MIT & BSD
 * Build: http://www.modernizr.com/download/#-fontface-backgroundsize-borderimage-borderradius-boxshadow-flexbox-hsla-multiplebgs-opacity-rgba-textshadow-cssanimations-csscolumns-generatedcontent-cssgradients-cssreflections-csstransforms-csstransforms3d-csstransitions-applicationcache-canvas-canvastext-draganddrop-hashchange-history-audio-video-indexeddb-input-inputtypes-localstorage-postmessage-sessionstorage-websockets-websqldatabase-webworkers-geolocation-inlinesvg-smil-svg-svgclippaths-touch-webgl-iepp-mq-cssclasses-teststyles-testprop-testallprops-hasevent-prefixes-domprefixes-load
 */
;window.Modernizr=function(a,b,c){function I(){e.input=function(a){for(var b=0,c=a.length;b<c;b++)t[a[b]]=a[b]in l;return t}("autocomplete autofocus list placeholder max min multiple pattern required step".split(" ")),e.inputtypes=function(a){for(var d=0,e,f,h,i=a.length;d<i;d++)l.setAttribute("type",f=a[d]),e=l.type!=="text",e&&(l.value=m,l.style.cssText="position:absolute;visibility:hidden;",/^range$/.test(f)&&l.style.WebkitAppearance!==c?(g.appendChild(l),h=b.defaultView,e=h.getComputedStyle&&h.getComputedStyle(l,null).WebkitAppearance!=="textfield"&&l.offsetHeight!==0,g.removeChild(l)):/^(search|tel)$/.test(f)||(/^(url|email)$/.test(f)?e=l.checkValidity&&l.checkValidity()===!1:/^color$/.test(f)?(g.appendChild(l),g.offsetWidth,e=l.value!=m,g.removeChild(l)):e=l.value!=m)),s[a[d]]=!!e;return s}("search tel url email datetime date month week time datetime-local number range color".split(" "))}function G(a,b){var c=a.charAt(0).toUpperCase()+a.substr(1),d=(a+" "+p.join(c+" ")+c).split(" ");return F(d,b)}function F(a,b){for(var d in a)if(k[a[d]]!==c)return b=="pfx"?a[d]:!0;return!1}function E(a,b){return!!~(""+a).indexOf(b)}function D(a,b){return typeof a===b}function C(a,b){return B(o.join(a+";")+(b||""))}function B(a){k.cssText=a}var d="2.0.6",e={},f=!0,g=b.documentElement,h=b.head||b.getElementsByTagName("head")[0],i="modernizr",j=b.createElement(i),k=j.style,l=b.createElement("input"),m=":)",n=Object.prototype.toString,o=" -webkit- -moz- -o- -ms- -khtml- ".split(" "),p="Webkit Moz O ms Khtml".split(" "),q={svg:"http://www.w3.org/2000/svg"},r={},s={},t={},u=[],v=function(a,c,d,e){var f,h,j,k=b.createElement("div");if(parseInt(d,10))while(d--)j=b.createElement("div"),j.id=e?e[d]:i+(d+1),k.appendChild(j);f=["&shy;","<style>",a,"</style>"].join(""),k.id=i,k.innerHTML+=f,g.appendChild(k),h=c(k,a),k.parentNode.removeChild(k);return!!h},w=function(b){if(a.matchMedia)return matchMedia(b).matches;var c;v("@media "+b+" { #"+i+" { position: absolute; } }",function(b){c=(a.getComputedStyle?getComputedStyle(b,null):b.currentStyle).position=="absolute"});return c},x=function(){function d(d,e){e=e||b.createElement(a[d]||"div"),d="on"+d;var f=d in e;f||(e.setAttribute||(e=b.createElement("div")),e.setAttribute&&e.removeAttribute&&(e.setAttribute(d,""),f=D(e[d],"function"),D(e[d],c)||(e[d]=c),e.removeAttribute(d))),e=null;return f}var a={select:"input",change:"input",submit:"form",reset:"form",error:"img",load:"img",abort:"img"};return d}(),y,z={}.hasOwnProperty,A;!D(z,c)&&!D(z.call,c)?A=function(a,b){return z.call(a,b)}:A=function(a,b){return b in a&&D(a.constructor.prototype[b],c)};var H=function(c,d){var f=c.join(""),g=d.length;v(f,function(c,d){var f=b.styleSheets[b.styleSheets.length-1],h=f.cssRules&&f.cssRules[0]?f.cssRules[0].cssText:f.cssText||"",i=c.childNodes,j={};while(g--)j[i[g].id]=i[g];e.touch="ontouchstart"in a||j.touch.offsetTop===9,e.csstransforms3d=j.csstransforms3d.offsetLeft===9,e.generatedcontent=j.generatedcontent.offsetHeight>=1,e.fontface=/src/i.test(h)&&h.indexOf(d.split(" ")[0])===0},g,d)}(['@font-face {font-family:"font";src:url("https://")}',["@media (",o.join("touch-enabled),("),i,")","{#touch{top:9px;position:absolute}}"].join(""),["@media (",o.join("transform-3d),("),i,")","{#csstransforms3d{left:9px;position:absolute}}"].join(""),['#generatedcontent:after{content:"',m,'";visibility:hidden}'].join("")],["fontface","touch","csstransforms3d","generatedcontent"]);r.flexbox=function(){function c(a,b,c,d){a.style.cssText=o.join(b+":"+c+";")+(d||"")}function a(a,b,c,d){b+=":",a.style.cssText=(b+o.join(c+";"+b)).slice(0,-b.length)+(d||"")}var d=b.createElement("div"),e=b.createElement("div");a(d,"display","box","width:42px;padding:0;"),c(e,"box-flex","1","width:10px;"),d.appendChild(e),g.appendChild(d);var f=e.offsetWidth===42;d.removeChild(e),g.removeChild(d);return f},r.canvas=function(){var a=b.createElement("canvas");return!!a.getContext&&!!a.getContext("2d")},r.canvastext=function(){return!!e.canvas&&!!D(b.createElement("canvas").getContext("2d").fillText,"function")},r.webgl=function(){return!!a.WebGLRenderingContext},r.touch=function(){return e.touch},r.geolocation=function(){return!!navigator.geolocation},r.postmessage=function(){return!!a.postMessage},r.websqldatabase=function(){var b=!!a.openDatabase;return b},r.indexedDB=function(){for(var b=-1,c=p.length;++b<c;)if(a[p[b].toLowerCase()+"IndexedDB"])return!0;return!!a.indexedDB},r.hashchange=function(){return x("hashchange",a)&&(b.documentMode===c||b.documentMode>7)},r.history=function(){return!!a.history&&!!history.pushState},r.draganddrop=function(){return x("dragstart")&&x("drop")},r.websockets=function(){for(var b=-1,c=p.length;++b<c;)if(a[p[b]+"WebSocket"])return!0;return"WebSocket"in a},r.rgba=function(){B("background-color:rgba(150,255,150,.5)");return E(k.backgroundColor,"rgba")},r.hsla=function(){B("background-color:hsla(120,40%,100%,.5)");return E(k.backgroundColor,"rgba")||E(k.backgroundColor,"hsla")},r.multiplebgs=function(){B("background:url(https://),url(https://),red url(https://)");return/(url\s*\(.*?){3}/.test(k.background)},r.backgroundsize=function(){return G("backgroundSize")},r.borderimage=function(){return G("borderImage")},r.borderradius=function(){return G("borderRadius")},r.boxshadow=function(){return G("boxShadow")},r.textshadow=function(){return b.createElement("div").style.textShadow===""},r.opacity=function(){C("opacity:.55");return/^0.55$/.test(k.opacity)},r.cssanimations=function(){return G("animationName")},r.csscolumns=function(){return G("columnCount")},r.cssgradients=function(){var a="background-image:",b="gradient(linear,left top,right bottom,from(#9f9),to(white));",c="linear-gradient(left top,#9f9, white);";B((a+o.join(b+a)+o.join(c+a)).slice(0,-a.length));return E(k.backgroundImage,"gradient")},r.cssreflections=function(){return G("boxReflect")},r.csstransforms=function(){return!!F(["transformProperty","WebkitTransform","MozTransform","OTransform","msTransform"])},r.csstransforms3d=function(){var a=!!F(["perspectiveProperty","WebkitPerspective","MozPerspective","OPerspective","msPerspective"]);a&&"webkitPerspective"in g.style&&(a=e.csstransforms3d);return a},r.csstransitions=function(){return G("transitionProperty")},r.fontface=function(){return e.fontface},r.generatedcontent=function(){return e.generatedcontent},r.video=function(){var a=b.createElement("video"),c=!1;try{if(c=!!a.canPlayType){c=new Boolean(c),c.ogg=a.canPlayType('video/ogg; codecs="theora"');var d='video/mp4; codecs="avc1.42E01E';c.h264=a.canPlayType(d+'"')||a.canPlayType(d+', mp4a.40.2"'),c.webm=a.canPlayType('video/webm; codecs="vp8, vorbis"')}}catch(e){}return c},r.audio=function(){var a=b.createElement("audio"),c=!1;try{if(c=!!a.canPlayType)c=new Boolean(c),c.ogg=a.canPlayType('audio/ogg; codecs="vorbis"'),c.mp3=a.canPlayType("audio/mpeg;"),c.wav=a.canPlayType('audio/wav; codecs="1"'),c.m4a=a.canPlayType("audio/x-m4a;")||a.canPlayType("audio/aac;")}catch(d){}return c},r.localstorage=function(){try{return!!localStorage.getItem}catch(a){return!1}},r.sessionstorage=function(){try{return!!sessionStorage.getItem}catch(a){return!1}},r.webworkers=function(){return!!a.Worker},r.applicationcache=function(){return!!a.applicationCache},r.svg=function(){return!!b.createElementNS&&!!b.createElementNS(q.svg,"svg").createSVGRect},r.inlinesvg=function(){var a=b.createElement("div");a.innerHTML="<svg/>";return(a.firstChild&&a.firstChild.namespaceURI)==q.svg},r.smil=function(){return!!b.createElementNS&&/SVG/.test(n.call(b.createElementNS(q.svg,"animate")))},r.svgclippaths=function(){return!!b.createElementNS&&/SVG/.test(n.call(b.createElementNS(q.svg,"clipPath")))};for(var J in r)A(r,J)&&(y=J.toLowerCase(),e[y]=r[J](),u.push((e[y]?"":"no-")+y));e.input||I(),B(""),j=l=null,a.attachEvent&&function(){var a=b.createElement("div");a.innerHTML="<elem></elem>";return a.childNodes.length!==1}()&&function(a,b){function s(a){var b=-1;while(++b<g)a.createElement(f[b])}a.iepp=a.iepp||{};var d=a.iepp,e=d.html5elements||"abbr|article|aside|audio|canvas|datalist|details|figcaption|figure|footer|header|hgroup|mark|meter|nav|output|progress|section|summary|time|video",f=e.split("|"),g=f.length,h=new RegExp("(^|\\s)("+e+")","gi"),i=new RegExp("<(/*)("+e+")","gi"),j=/^\s*[\{\}]\s*$/,k=new RegExp("(^|[^\\n]*?\\s)("+e+")([^\\n]*)({[\\n\\w\\W]*?})","gi"),l=b.createDocumentFragment(),m=b.documentElement,n=m.firstChild,o=b.createElement("body"),p=b.createElement("style"),q=/print|all/,r;d.getCSS=function(a,b){if(a+""===c)return"";var e=-1,f=a.length,g,h=[];while(++e<f){g=a[e];if(g.disabled)continue;b=g.media||b,q.test(b)&&h.push(d.getCSS(g.imports,b),g.cssText),b="all"}return h.join("")},d.parseCSS=function(a){var b=[],c;while((c=k.exec(a))!=null)b.push(((j.exec(c[1])?"\n":c[1])+c[2]+c[3]).replace(h,"$1.iepp_$2")+c[4]);return b.join("\n")},d.writeHTML=function(){var a=-1;r=r||b.body;while(++a<g){var c=b.getElementsByTagName(f[a]),d=c.length,e=-1;while(++e<d)c[e].className.indexOf("iepp_")<0&&(c[e].className+=" iepp_"+f[a])}l.appendChild(r),m.appendChild(o),o.className=r.className,o.id=r.id,o.innerHTML=r.innerHTML.replace(i,"<$1font")},d._beforePrint=function(){p.styleSheet.cssText=d.parseCSS(d.getCSS(b.styleSheets,"all")),d.writeHTML()},d.restoreHTML=function(){o.innerHTML="",m.removeChild(o),m.appendChild(r)},d._afterPrint=function(){d.restoreHTML(),p.styleSheet.cssText=""},s(b),s(l);d.disablePP||(n.insertBefore(p,n.firstChild),p.media="print",p.className="iepp-printshim",a.attachEvent("onbeforeprint",d._beforePrint),a.attachEvent("onafterprint",d._afterPrint))}(a,b),e._version=d,e._prefixes=o,e._domPrefixes=p,e.mq=w,e.hasEvent=x,e.testProp=function(a){return F([a])},e.testAllProps=G,e.testStyles=v,g.className=g.className.replace(/\bno-js\b/,"")+(f?" js "+u.join(" "):"");return e}(this,this.document),function(a,b,c){function k(a){return!a||a=="loaded"||a=="complete"}function j(){var a=1,b=-1;while(p.length- ++b)if(p[b].s&&!(a=p[b].r))break;a&&g()}function i(a){var c=b.createElement("script"),d;c.src=a.s,c.onreadystatechange=c.onload=function(){!d&&k(c.readyState)&&(d=1,j(),c.onload=c.onreadystatechange=null)},m(function(){d||(d=1,j())},H.errorTimeout),a.e?c.onload():n.parentNode.insertBefore(c,n)}function h(a){var c=b.createElement("link"),d;c.href=a.s,c.rel="stylesheet",c.type="text/css";if(!a.e&&(w||r)){var e=function(a){m(function(){if(!d)try{a.sheet.cssRules.length?(d=1,j()):e(a)}catch(b){b.code==1e3||b.message=="security"||b.message=="denied"?(d=1,m(function(){j()},0)):e(a)}},0)};e(c)}else c.onload=function(){d||(d=1,m(function(){j()},0))},a.e&&c.onload();m(function(){d||(d=1,j())},H.errorTimeout),!a.e&&n.parentNode.insertBefore(c,n)}function g(){var a=p.shift();q=1,a?a.t?m(function(){a.t=="c"?h(a):i(a)},0):(a(),j()):q=0}function f(a,c,d,e,f,h){function i(){!o&&k(l.readyState)&&(r.r=o=1,!q&&j(),l.onload=l.onreadystatechange=null,m(function(){u.removeChild(l)},0))}var l=b.createElement(a),o=0,r={t:d,s:c,e:h};l.src=l.data=c,!s&&(l.style.display="none"),l.width=l.height="0",a!="object"&&(l.type=d),l.onload=l.onreadystatechange=i,a=="img"?l.onerror=i:a=="script"&&(l.onerror=function(){r.e=r.r=1,g()}),p.splice(e,0,r),u.insertBefore(l,s?null:n),m(function(){o||(u.removeChild(l),r.r=r.e=o=1,j())},H.errorTimeout)}function e(a,b,c){var d=b=="c"?z:y;q=0,b=b||"j",C(a)?f(d,a,b,this.i++,l,c):(p.splice(this.i++,0,a),p.length==1&&g());return this}function d(){var a=H;a.loader={load:e,i:0};return a}var l=b.documentElement,m=a.setTimeout,n=b.getElementsByTagName("script")[0],o={}.toString,p=[],q=0,r="MozAppearance"in l.style,s=r&&!!b.createRange().compareNode,t=r&&!s,u=s?l:n.parentNode,v=a.opera&&o.call(a.opera)=="[object Opera]",w="webkitAppearance"in l.style,x=w&&"async"in b.createElement("script"),y=r?"object":v||x?"img":"script",z=w?"img":y,A=Array.isArray||function(a){return o.call(a)=="[object Array]"},B=function(a){return Object(a)===a},C=function(a){return typeof a=="string"},D=function(a){return o.call(a)=="[object Function]"},E=[],F={},G,H;H=function(a){function f(a){var b=a.split("!"),c=E.length,d=b.pop(),e=b.length,f={url:d,origUrl:d,prefixes:b},g,h;for(h=0;h<e;h++)g=F[b[h]],g&&(f=g(f));for(h=0;h<c;h++)f=E[h](f);return f}function e(a,b,e,g,h){var i=f(a),j=i.autoCallback;if(!i.bypass){b&&(b=D(b)?b:b[a]||b[g]||b[a.split("/").pop().split("?")[0]]);if(i.instead)return i.instead(a,b,e,g,h);e.load(i.url,i.forceCSS||!i.forceJS&&/css$/.test(i.url)?"c":c,i.noexec),(D(b)||D(j))&&e.load(function(){d(),b&&b(i.origUrl,h,g),j&&j(i.origUrl,h,g)})}}function b(a,b){function c(a){if(C(a))e(a,h,b,0,d);else if(B(a))for(i in a)a.hasOwnProperty(i)&&e(a[i],h,b,i,d)}var d=!!a.test,f=d?a.yep:a.nope,g=a.load||a.both,h=a.callback,i;c(f),c(g),a.complete&&b.load(a.complete)}var g,h,i=this.yepnope.loader;if(C(a))e(a,0,i,0);else if(A(a))for(g=0;g<a.length;g++)h=a[g],C(h)?e(h,0,i,0):A(h)?H(h):B(h)&&b(h,i);else B(a)&&b(a,i)},H.addPrefix=function(a,b){F[a]=b},H.addFilter=function(a){E.push(a)},H.errorTimeout=1e4,b.readyState==null&&b.addEventListener&&(b.readyState="loading",b.addEventListener("DOMContentLoaded",G=function(){b.removeEventListener("DOMContentLoaded",G,0),b.readyState="complete"},0)),a.yepnope=d()}(this,this.document),Modernizr.load=function(){yepnope.apply(window,[].slice.call(arguments,0))};
//END Trisept.UI.Web.Shell.modernizr-2.0.6.min.js
//START Trisept.UI.Web.Shell.MobileBoilerplate.js
/*
 * MBP - Mobile boilerplate helper functions
 */
(function (document) {

    window.MBP = window.MBP || {};

    // Fix for iPhone viewport scale bug 
    // http://www.blog.highub.com/mobile-2/a-fix-for-iphone-viewport-scale-bug/

    MBP.viewportmeta = document.querySelector && document.querySelector('meta[name="viewport"]');
    MBP.ua = navigator.userAgent;

    MBP.scaleFix = function () {
        if (MBP.viewportmeta && /iPhone|iPad|iPod/.test(MBP.ua) && !/Opera Mini/.test(MBP.ua)) {
            MBP.viewportmeta.content = "width=device-width, minimum-scale=1.0, maximum-scale=1.0";
            document.addEventListener("gesturestart", MBP.gestureStart, false);
        }
    };
    MBP.gestureStart = function () {
        MBP.viewportmeta.content = "width=device-width, minimum-scale=0.25, maximum-scale=1.6";
    };


    /*
    * Normalized hide address bar for iOS & Android
    * (c) Scott Jehl, scottjehl.com
    * MIT License
    */

    // If we split this up into two functions we can reuse
    // this function if we aren't doing full page reloads.

    // If we cache this we don't need to re-calibrate everytime we call
    // the hide url bar
    MBP.BODY_SCROLL_TOP = false;

    // So we don't redefine this function everytime we
    // we call hideUrlBar
    MBP.getScrollTop = function () {
        var win = window,
      doc = document;

        return win.pageYOffset || doc.compatMode === "CSS1Compat" && doc.documentElement.scrollTop || doc.body.scrollTop || 0;
    };

    // It should be up to the mobile
    MBP.hideUrlBar = function () {
        var win = window;

        // if there is a hash, or MBP.BODY_SCROLL_TOP hasn't been set yet, wait till that happens
        if (!location.hash && MBP.BODY_SCROLL_TOP !== false) {
            win.scrollTo(0, MBP.BODY_SCROLL_TOP === 1 ? 0 : 1);
        }
    };

    MBP.hideUrlBarOnLoad = function () {
        var win = window,
      doc = win.document;

        // If there's a hash, or addEventListener is undefined, stop here
        if (!location.hash && win.addEventListener) {

            //scroll to 1
            window.scrollTo(0, 1);
            MBP.BODY_SCROLL_TOP = 1;

            //reset to 0 on bodyready, if needed
            bodycheck = setInterval(function () {
                if (doc.body) {
                    clearInterval(bodycheck);
                    MBP.BODY_SCROLL_TOP = MBP.getScrollTop();
                    MBP.hideUrlBar();
                }
            }, 15);

            win.addEventListener("load", function () {
                setTimeout(function () {
                    //at load, if user hasn't scrolled more than 20 or so...
                    if (MBP.getScrollTop() < 20) {
                        //reset to hide addr bar at onload
                        MBP.hideUrlBar();
                    }
                }, 0);
            });
        }
    };

    // Fast Buttons - read wiki below before using
    // https://github.com/h5bp/mobile-boilerplate/wiki/JavaScript-Helper
    MBP.fastButton = function (element, handler) {
        this.element = element;
        this.handler = handler;

        addEvt(element, "touchstart", this, false);
        addEvt(element, "click", this, false);
    };

    MBP.fastButton.prototype.handleEvent = function (event) {
        event = event || window.event;
        switch (event.type) {
            case 'touchstart': this.onTouchStart(event); break;
            case 'touchmove': this.onTouchMove(event); break;
            case 'touchend': this.onClick(event); break;
            case 'click': this.onClick(event); break;
        }
    };

    MBP.fastButton.prototype.onTouchStart = function (event) {
        event.stopPropagation();
        this.element.addEventListener('touchend', this, false);
        document.body.addEventListener('touchmove', this, false);
        this.startX = event.touches[0].clientX;
        this.startY = event.touches[0].clientY;
        this.element.style.backgroundColor = "rgba(0,0,0,.7)";
    };

    MBP.fastButton.prototype.onTouchMove = function (event) {
        if (Math.abs(event.touches[0].clientX - this.startX) > 10 ||
    Math.abs(event.touches[0].clientY - this.startY) > 10) {
            this.reset();
        }
    };

    MBP.fastButton.prototype.onClick = function (event) {
        event = event || window.event;
        if (event.stopPropagation) { event.stopPropagation(); }
        this.reset();
        this.handler(event);
        if (event.type == 'touchend') {
            MBP.preventGhostClick(this.startX, this.startY);
        }
        this.element.style.backgroundColor = "";
    };

    MBP.fastButton.prototype.reset = function () {
        rmEvt(this.element, "touchend", this, false);
        rmEvt(document.body, "touchmove", this, false);
        this.element.style.backgroundColor = "";
    };

    MBP.preventGhostClick = function (x, y) {
        MBP.coords.push(x, y);
        window.setTimeout(function () {
            MBP.coords.splice(0, 2);
        }, 2500);
    };

    MBP.ghostClickHandler = function (event) {
        if (!MBP.hadTouchEvent && 'ontouchstart' in window) {
            // This is a bit of fun for Android 2.3...
            // If you change window.location via fastButton, a click event will fire
            // on the new page, as if the events are continuing from the previous page.
            // We pick that event up here, but MBP.coords is empty, because it's a new page,
            // so we don't prevent it. Here's we're assuming that click events on touch devices
            // that occur without a preceding touchStart are to be ignored. 
            // JMB - This little bugger is having an adverse affect on touch devices using Chrome.  Since the original MBP functionality was designed for Android 2.3, only execute for 2.3 devices.
            if (parseFloat(getAndroidVersion()) == '2.3') {
                event.stopPropagation();
                event.preventDefault(); 
            }
            return;
        }
        for (var i = 0, len = MBP.coords.length; i < len; i += 2) {
            var x = MBP.coords[i];
            var y = MBP.coords[i + 1];
            if (Math.abs(event.clientX - x) < 25 && Math.abs(event.clientY - y) < 25) {
                event.stopPropagation();
                event.preventDefault();
            }
        }
    };

    if (document.addEventListener) {
        document.addEventListener('click', MBP.ghostClickHandler, true);
    }

    addEvt(document.documentElement, 'touchstart', function () {
        MBP.hadTouchEvent = true;
    }, false);

    MBP.coords = [];

    // fn arg can be an object or a function, thanks to handleEvent
    // read more about the explanation at: http://www.thecssninja.com/javascript/handleevent
    function addEvt(el, evt, fn, bubble) {
        if ("addEventListener" in el) {
            // BBOS6 doesn't support handleEvent, catch and polyfill
            try {
                el.addEventListener(evt, fn, bubble);
            } catch (e) {
                if (typeof fn == "object" && fn.handleEvent) {
                    el.addEventListener(evt, function (e) {
                        // Bind fn as this and set first arg as event object
                        fn.handleEvent.call(fn, e);
                    }, bubble);
                } else {
                    throw e;
                }
            }
        } else if ("attachEvent" in el) {
            // check if the callback is an object and contains handleEvent
            if (typeof fn == "object" && fn.handleEvent) {
                el.attachEvent("on" + evt, function () {
                    // Bind fn as this
                    fn.handleEvent.call(fn);
                });
            } else {
                el.attachEvent("on" + evt, fn);
            }
        }
    }

    function rmEvt(el, evt, fn, bubble) {
        if ("removeEventListener" in el) {
            // BBOS6 doesn't support handleEvent, catch and polyfill
            try {
                el.removeEventListener(evt, fn, bubble);
            } catch (e) {
                if (typeof fn == "object" && fn.handleEvent) {
                    el.removeEventListener(evt, function (e) {
                        // Bind fn as this and set first arg as event object
                        fn.handleEvent.call(fn, e);
                    }, bubble);
                } else {
                    throw e;
                }
            }
        } else if ("detachEvent" in el) {
            // check if the callback is an object and contains handleEvent
            if (typeof fn == "object" && fn.handleEvent) {
                el.detachEvent("on" + evt, function () {
                    // Bind fn as this
                    fn.handleEvent.call(fn);
                });
            } else {
                el.detachEvent("on" + evt, fn);
            }
        }
    }

    function getAndroidVersion(ua) {
        var ua = ua || MBP.ua;
        var match = ua.match(/Android\s([0-9\.]*)/);
        return match ? match[1] : false;
    };


    // iOS Startup Image
    // https://github.com/h5bp/mobile-boilerplate/issues#issue/2

    MBP.splash = function () {
        var filename = navigator.platform === 'iPad' ? 'h/' : 'l/';
        document.write('<link rel="apple-touch-startup-image" href="/img/' + filename + 'splash.png" />');
    };


    // Autogrow
    // http://googlecode.blogspot.com/2009/07/gmail-for-mobile-html5-series.html

    MBP.autogrow = function (element, lh) {
        function handler(e) {
            var newHeight = this.scrollHeight,
        currentHeight = this.clientHeight;
            if (newHeight > currentHeight) {
                this.style.height = newHeight + 3 * textLineHeight + "px";
            }
        }

        var setLineHeight = (lh) ? lh : 12,
      textLineHeight = element.currentStyle ? element.currentStyle.lineHeight :
                       getComputedStyle(element, null).lineHeight;

        textLineHeight = (textLineHeight.indexOf("px") == -1) ? setLineHeight :
                   parseInt(textLineHeight, 10);

        element.style.overflow = "hidden";
        element.addEventListener ? element.addEventListener('keyup', handler, false) :
                             element.attachEvent('onkeyup', handler);
    };


    // Enable active
    // Enable CSS active pseudo styles in Mobile Safari
    // http://miniapps.co.uk/blog/post/enable-css-active-pseudo-styles-in-mobile-safari/
    MBP.enableActive = function () {
        document.addEventListener("touchstart", function () { }, false);
    };


    // Prevent iOS from zooming onfocus
    // http://nerd.vasilis.nl/prevent-ios-from-zooming-onfocus/

    MBP.viewportMeta = $('meta[name="viewport"]');
    MBP.preventZoom = function () {
        $('input, select, textarea').bind('focus blur', function (event) {
            MBP.viewportMeta.attr('content', 'width=device-width,initial-scale=1,maximum-scale=' + (event.type == 'blur' ? 10 : 1));
        });
    };

})(document);
//END Trisept.UI.Web.Shell.MobileBoilerplate.js
//START Trisept.UI.Web.Shell.selectivizr-min.js
/*!
 * selectivizr v1.0.3 - (c) Keith Clark, freely distributable under the terms of the MIT license.
 * selectivizr.com
 */
(function(i){function C(a){return a.replace(D,l).replace(E,function(b,a,d){for(var b=d.split(","),d=0,e=b.length;d<e;d++){var h=F(b[d].replace(G,l).replace(H,l))+p,g=[];b[d]=h.replace(I,function(b,a,d,c,e){if(a)return g.length>0&&(q.push({d:h.substring(0,e),c:g}),g=[]),a;else{if(a=d?J(d):!u||u.test(c)?{className:v(c),b:!0}:null)return g.push(a),"."+a.className;return b}})}return a+b.join(",")})}function J(a){var b=!0,c=v(a.slice(1)),d=a.substring(0,5)==":not(",e,h;d&&(a=a.slice(5,-1));var g=a.indexOf("(");g>-1&&(a=a.substring(0,g));if(a.charAt(0)==":")switch(a.slice(1)){case "root":b=function(a){return d?a!=r:a==r};break;case "target":if(m==8){b=function(a){function b(){var c=location.hash,e=c.slice(1);return d?c==j||a.id!=e:c!=j&&a.id==e}k(i,"hashchange",function(){n(a,c,b())});return b()};break}return!1;case "checked":b=function(a){K.test(a.type)&&k(a,"propertychange",function(){event.propertyName=="checked"&&n(a,c,a.checked!==d)});return a.checked!==d};break;case "disabled":d=!d;case "enabled":b=function(b){if(L.test(b.tagName))return k(b,"propertychange",function(){event.propertyName=="$disabled"&&n(b,c,b.a===d)}),s.push(b),b.a=b.disabled,b.disabled===d;return a==":enabled"?d:!d};break;case "focus":e="focus",h="blur";case "hover":e||(e="mouseenter",h="mouseleave");b=function(a){k(a,d?h:e,function(){n(a,c,!0)});k(a,d?e:h,function(){n(a,c,!1)});return d};break;default:if(!M.test(a))return!1}return{className:c,b:b}}function N(){for(var a,b,c,d=0;d<q.length;d++){b=q[d].d;c=q[d].c;b=b.replace(O,j);if(b==j||b.charAt(b.length-1)==p)b+="*";try{a=w(b)}catch(e){}if(a){b=0;for(var h=a.length;b<h;b++){for(var g=a[b],f=g.className,k=0,l=c.length;k<l;k++){var i=c[k];if(!RegExp("(^|\\s)"+i.className+"(\\s|$)").test(g.className)&&i.b&&(i.b===!0||i.b(g)===!0))f=x(f,i.className,!0)}g.className=f}}}}function v(a){return P+"-"+(m==6&&Q?R++:a.replace(S,function(a){return a.charCodeAt(0)}))}function F(a){return a.replace(y,l).replace(T,p)}function n(a,b,c){var d=a.className,b=x(d,b,c);if(b!=d)a.className=b,a.parentNode.className+=j}function x(a,b,c){var d=RegExp("(^|\\s)"+b+"(\\s|$)"),e=d.test(a);return c?e?a:a+p+b:e?a.replace(d,l).replace(y,l):a}function k(a,b,c){a.attachEvent("on"+b,c)}function t(a,b,c){b||(b=U);a.substring(0,2)=="//"&&(a=b.substring(0,b.indexOf("//"))+a);if(/^https?:\/\//i.test(a))return!c&&b.substring(0,b.indexOf("/",8))!=a.substring(0,a.indexOf("/",8))?null:a;if(a.charAt(0)=="/")return b.substring(0,b.indexOf("/",8))+a;b=b.split(/[?#]/)[0];a.charAt(0)!="?"&&b.charAt(b.length-1)!="/"&&(b=b.substring(0,b.lastIndexOf("/")+1));return b+a}function z(a){if(a)return o.open("GET",a,!1),o.send(),(o.status==200?o.responseText:j).replace(V,j).replace(W,function(b,c,d,e,f,g){b=z(t(d||f,a));return g?"@media "+g+" {"+b+"}":b}).replace(X,function(b,c,d,e){d=d||j;return c?b:" url("+d+t(e,a,!0)+d+") "});return j}function Y(){N();s.length>0&&setInterval(function(){for(var a=0,b=s.length;a<b;a++){var c=s[a];if(c.disabled!==c.a)c.disabled?(c.disabled=!1,c.a=!0,c.disabled=!0):c.a=c.disabled}},250)}if(!/*@cc_on!@*/true){var f=document,r=f.documentElement,o=function(){if(i.XMLHttpRequest)return new XMLHttpRequest;try{return new ActiveXObject("Microsoft.XMLHTTP")}catch(a){return null}}(),m=/MSIE (\d+)/.exec(navigator.userAgent)[1];if(!(f.compatMode!="CSS1Compat"||m<6||m>8||!o)){var A={NW:"*.Dom.select",MooTools:"$$",DOMAssistant:"*.$",Prototype:"$$",YAHOO:"*.util.Selector.query",Sizzle:"*",jQuery:"*",dojo:"*.query"},w,s=[],q=[],R=0,Q=!0,P="slvzr",V=/(\/\*[^*]*\*+([^\/][^*]*\*+)*\/)\s*?/g,W=/@import\s*(?:(?:(?:url\(\s*(['"]?)(.*)\1)\s*\))|(?:(['"])(.*)\3))\s*([^;]*);/g,X=/(behavior\s*?:\s*)?\burl\(\s*(["']?)(?!data:)([^"')]+)\2\s*\)/g,M=/^:(empty|(first|last|only|nth(-last)?)-(child|of-type))$/,D=/:(:first-(?:line|letter))/g,E=/((?:^|(?:\s*})+)(?:\s*@media[^{]+{)?)\s*([^\{]*?[\[:][^{]+)/g,I=/([ +~>])|(:[a-z-]+(?:\(.*?\)+)?)|(\[.*?\])/g,O=/(:not\()?:(hover|enabled|disabled|focus|checked|target|active|visited|first-line|first-letter)\)?/g,S=/[^\w-]/g,L=/^(INPUT|SELECT|TEXTAREA|BUTTON)$/,K=/^(checkbox|radio)$/,u=m>6?/[\$\^*]=(['"])\1/:null,G=/([(\[+~])\s+/g,H=/\s+([)\]+~])/g,T=/\s+/g,y=/^\s*((?:[\S\s]*\S)?)\s*$/,j="",p=" ",l="$1",B=f.getElementsByTagName("BASE"),U=B.length>0?B[0].href:f.location.href;(function(){for(var a,b,c=0;c<f.styleSheets.length;c++)if(b=f.styleSheets[c],b.href!=j&&(a=t(b.href)))b.cssText=b.rawCssText=C(z(a))})();(function(a,b){function c(){try{r.doScroll("left")}catch(a){setTimeout(c,50);return}d("poll")}function d(c){if(!(c.type=="readystatechange"&&f.readyState!="complete")&&((c.type=="load"?a:f).detachEvent("on"+c.type,d,!1),!e&&(e=!0)))b.call(a,c.type||c)}var e=!1,h=!0;if(f.readyState=="complete")b.call(a,j);else{if(f.createEventObject&&r.doScroll){try{h=!a.frameElement}catch(g){}h&&c()}k(f,"readystatechange",d);k(a,"load",d)}})(i,function(){for(var a in A){var b,c,d=i;if(i[a]){for(b=A[a].replace("*",a).split(".");(c=b.shift())&&(d=d[c]););if(typeof d=="function"){w=d;Y();break}}}})}}})(this);
//END Trisept.UI.Web.Shell.selectivizr-min.js
//START Trisept.UI.Web.Shell.respond.min.js
/*! Response 0.7.5 | @link responsejs.com | @author ryanve | @license MIT */
(function(e,n,p){var j=e.jQuery||e.Zepto||e.ender||e.elo;"undefined"!=typeof module&&module.exports?module.exports=p(j):e[n]=p(j)})(this,"Response",function(e){function n(a){throw new TypeError(a?q+"."+a:q);}function p(a){return"string"==typeof a?u(a.split(" ")):P(a)?u(a):[]}function j(a,b,c){if(null==a)return a;for(var d=0,g=a.length;d<g;)b.call(c||a[d],a[d],d++,a);return a}function Q(a,b,c){var d=[],g=a.length,r=0,f;b=b||"";for(c=c||"";r<g;)f=a[r++],null==f||d.push(b+f+c);return d}function u(a,
b,c){var d,g=0,r=0,f,e=[],j,h="function"==typeof b;if(!a)return e;c=(j=!0===c)?null:c;for(d=a.length;r<d;r++)f=a[r],j===!(h?b.call(c,f,r,a):b?typeof f===b:f)&&(e[g++]=f);return e}function R(a,b){if(!a||!b)return a;var c,d=b.length;if("function"!=typeof b&&"number"==typeof d&&d===d){for(c=0;c<d;c++)void 0===b[c]||(a[c]=b[c]);a.length>c||(a.length=c)}else for(c in b)ua.call(b,c)&&void 0!==b[c]&&(a[c]=b[c]);return a}function v(a,b,c){if(null==a)return a;"object"==typeof a&&!a.nodeType&&"number"==typeof a.length&&
a.length===a.length?j(a,b,c):b.call(c||a,a);return a}function E(a){return function(b,c){var d,g=a();d=g>=(b||0);return!c?d:d&&g<=c}}function w(a){var b=k.devicePixelRatio;if(null==a)return b||(w(2)?2:w(1.5)?1.5:w(1)?1:0);if(!isFinite(a))return!1;if(b&&0<b)return b>=a;a="only all and (min--moz-device-pixel-ratio:"+a+")";return S(a).matches?!0:!!S(a.replace("-moz-","")).matches}function aa(a){return a.replace(T,"$1").replace(va,function(a,c){return c.toUpperCase()})}function F(a){return"data-"+(a?a.replace(T,
"$1").replace(wa,"$1-$2").toLowerCase():a)}function ba(a){var b;return!a||"string"!=typeof a?a:"true"===a?!0:"false"===a?!1:"undefined"===a?b:"null"===a?null:(b=parseFloat(a))===+b?b:a}function G(a){return!a?!1:1===a.nodeType?a:a[0]&&1===a[0].nodeType?a[0]:!1}function H(a,b){var c=arguments.length,d=G(this),g={},e=!1,f;if(c){P(a)&&(e=!0,a=a[0]);if("string"===typeof a){a=F(a);if(1===c)return g=d.getAttribute(a),e?ba(g):g;if(this===d||2>(f=this.length||1))d.setAttribute(a,b);else for(;f--;)f in this&&
H.apply(this[f],arguments)}else if(a instanceof Object)for(f in a)a.hasOwnProperty(f)&&H.call(this,f,a[f]);return this}if(d.dataset&&DOMStringMap)return d.dataset;j(d.attributes,function(a){if(a&&(f=String(a.name).match(T)))g[aa(f[1])]=a.value});return g}function ca(a){this&&"string"===typeof a&&(a=p(a),v(this,function(b){j(a,function(a){a&&b.removeAttribute(F(a))})}));return this}function I(a,b,c){return H.apply(a,xa.call(arguments,1))}function da(a,b){return ca.call(a,b)}function ea(a){for(var b,
c=[],d=0,g=a.length;d<g;)(b=a[d++])&&c.push("["+F(b.replace(U,"").replace(".","\\."))+"]");return c.join()}function V(a,b){var c=a.getBoundingClientRect?a.getBoundingClientRect():{};b="number"==typeof b?b||0:0;return{top:(c.top||0)-b,left:(c.left||0)-b,bottom:(c.bottom||0)+b,right:(c.right||0)+b}}function W(a,b){var c=V(G(a),b);return!!c&&0<=c.bottom&&c.top<=x()&&0<=c.right&&c.left<=y()}function fa(a){var b={img:1,input:1,source:3,embed:3,track:3,iframe:5,audio:5,video:5,script:5}[a.tagName.toLowerCase()]||
-1;return 4>b?b:"string"===typeof a.getAttribute("src")?5:-5}function ga(a,b,c){var d;(!a||null==b)&&n("store");c="string"==typeof c&&c;v(a,function(a){d=c?a.getAttribute(c):0<fa(a)?a.getAttribute("src"):a.innerHTML;null==d?da(a,b):I(a,b,d)});return h}function X(a,b){var c=[];a&&b&&j(p(b),function(b){c.push(I(a,b))},a);return c}function Y(a){z.on("resize",a);return h}function ha(a){v(a,function(a){"object"==typeof a||n("create @args");var c=Z(ia).configure(a),d,g=c.verge;a=c.breakpoints;var e=J("scroll"),
f=J("resize");a.length&&(d=a[0]||a[1]||!1,K(function(){function a(){c.reset();j(c.$e,function(a,b){c[b].decideValue().updateDOM()}).trigger(h)}function b(){j(c.$e,function(a,b){W(c[b].$e,g)&&c[b].updateDOM()})}var h=$.allLoaded,k=!!c.lazy;j(c.target().$e,function(a,b){c[b]=Z(c).prepareData(a);(!k||W(c[b].$e,g))&&c[b].updateDOM()});c.dynamic&&(c.custom||d<A)&&Y(a,f);k&&(z.on(e,b),c.$e.one(h,function(){z.off(e,b)}))}))});return h}function ja(a,b){if("function"==typeof a&&a.fn){if(b||void 0===a.fn.dataset)a.fn.dataset=
H;if(b||void 0===a.fn.deletes)a.fn.deletes=ca;var c=a.fn;j(["inX","inY","inViewport"],function(d){(b||!c[d])&&(c[d]=function(b,c){return a(u(this,function(a){return!!a&&!c===h[d](a,b)}))})})}return h}if("function"!=typeof e)try{console.log("Response was unable to run due to missing dependency.")}catch(Fa){}var L=this,h,q="Response",ya=L[q],ka="init"+q,k=window,la=document,l=la.documentElement,K=e.domReady||e,z=e(k),B=k.screen,P=Array.isArray||function(a){return a instanceof Array},ua={}.hasOwnProperty,
xa=[].slice,za=[].concat,ma=[].map,na=ma?function(a,b,c){return ma.call(a,b,c)}:function(a,b,c){var d,g=a.length,e=[];for(d=0;d<g;d++)d in a&&(e[d]=b.call(c,a[d],d,a));return e},oa={width:[0,320,481,641,961,1025,1281],height:[0,481],ratio:[1,1.5,2]},ia,m,s,C={},t={},pa={},M={all:[]},Aa=1,N=B.width,O=B.height,A=N>O?N:O,Ba=N+O-A,B=function(){return N},qa=function(){return O},Ca=/[^a-z0-9_\-\.]/gi,U=/^[\W\s]+|[\W\s]+$|/g,wa=/([a-z])([A-Z])/g,va=/-(.)/g,T=/^data-(.+)$/,Z=Object.create||function(a){function b(){}
b.prototype=a;return new b},J=function(a,b){b=b||q;return a.replace(U,"")+"."+b.replace(U,"")},$={allLoaded:J("allLoaded"),crossover:J("crossover")},S=(m=k.matchMedia||k.msMatchMedia)||function(){return{}},y,ra=k;s=l.clientWidth;var D=ra.innerWidth;y=m&&s<D&&!0===m("(min-width:"+D+"px)").matches?function(){return ra.innerWidth}:function(){return l.clientWidth};var x,sa=k;s=l.clientHeight;D=sa.innerHeight;x=m&&s<D&&!0===m("(min-height:"+D+"px)").matches?function(){return sa.innerHeight}:function(){return l.clientHeight};
m=E(y);s=E(x);C.band=E(B);C.wave=E(qa);var Da=function(a){return"string"==typeof a?a.toLowerCase().replace(Ca,""):""},ta=$.crossover,Ea=Math.min;ia={$e:0,mode:0,breakpoints:null,prefix:null,prop:"width",keys:[],dynamic:null,custom:0,values:[],fn:0,verge:null,newValue:0,currValue:1,aka:null,lazy:null,i:0,uid:null,reset:function(){for(var a=this.breakpoints,b=a.length,c=0;!c&&b--;)this.fn(a[b])&&(c=b);c!==this.i&&(z.trigger(ta).trigger(this.prop+ta),this.i=c||0);return this},configure:function(a){R(this,
a);var b,c,d=!0;b=this.prop;this.uid=Aa++;this.verge=isFinite(this.verge)?this.verge:Ea(A,500);this.fn=t[b]||n("create @fn");"boolean"!=typeof this.dynamic&&(this.dynamic="device"!==b.substring(0,6));this.custom=pa[b];c=this.prefix?u(na(p(this.prefix),Da)):["min-"+b+"-"];a=1<c.length?c.slice(1):0;this.prefix=c[0];c=this.breakpoints;P(c)?(j(c,function(a){if(!a&&0!==a)throw"invalid breakpoint";d=d&&isFinite(a)}),c=d?c.sort(function(a,b){return a-b}):c,c.length||n("create @breakpoints")):c=oa[b]||oa[b.split("-").pop()]||
n("create @prop");this.breakpoints=d?u(c,function(a){return a<=A}):c;this.keys=Q(this.breakpoints,this.prefix);this.aka=null;if(a){c=[];for(b=a.length;b--;)c.push(Q(this.breakpoints,a[b]));this.aka=c;this.keys=za.apply(this.keys,c)}M.all=M.all.concat(M[this.uid]=this.keys);return this},target:function(){this.$e=e(ea(M[this.uid]));ga(this.$e,ka);this.keys.push(ka);return this},decideValue:function(){for(var a=null,b=this.breakpoints,c=b.length,d=c;null==a&&d--;)this.fn(b[d])&&(a=this.values[d]);this.newValue=
"string"===typeof a?a:this.values[c];return this},prepareData:function(a){this.$e=e(a);this.mode=fa(a);this.values=X(this.$e,this.keys);if(this.aka)for(a=this.aka.length;a--;)this.values=R(this.values,X(this.$e,this.aka[a]));return this.decideValue()},updateDOM:function(){if(this.currValue===this.newValue)return this;this.currValue=this.newValue;0<this.mode?this.$e[0].setAttribute("src",this.newValue):null==this.newValue?this.$e.empty&&this.$e.empty():this.$e.html?this.$e.html(this.newValue):(this.$e.empty&&
this.$e.empty(),this.$e[0].innerHTML=this.newValue);return this}};t.width=m;t.height=s;t["device-width"]=C.band;t["device-height"]=C.wave;t["device-pixel-ratio"]=w;h={deviceMin:function(){return Ba},deviceMax:function(){return A},noConflict:function(a){L[q]===h&&(L[q]=ya);"function"==typeof a&&a.call(L,h);return h},chain:function(a,b){a=arguments.length?a:e;return ja(a,b)},bridge:ja,create:ha,addTest:function(a,b){"string"==typeof a&&"function"==typeof b&&(t[a]=b,pa[a]=1);return h},datatize:F,camelize:aa,
render:ba,store:ga,access:X,target:function(a){return e(ea(p(a)))},object:Z,crossover:function(a,b){var c,d=$.crossover;"function"==typeof a&&(c=b,b=a,a=c);z.on(a?""+a+d:d,b);return h},action:function(a){v(a,function(a){K(a);Y(a)});return h},resize:Y,ready:K,affix:Q,sift:u,dpr:w,deletes:da,scrollX:function(){return window.pageXOffset||l.scrollLeft},scrollY:function(){return window.pageYOffset||l.scrollTop},deviceW:B,deviceH:qa,device:C,inX:function(a,b){var c=V(G(a),b);return!!c&&0<=c.right&&c.left<=
y()},inY:function(a,b){var c=V(G(a),b);return!!c&&0<=c.bottom&&c.top<=x()},route:v,merge:R,media:S,wave:s,band:m,map:na,each:j,inViewport:W,dataset:I,viewportH:x,viewportW:y};K(function(){var a,b=I(la.body,"responsejs");b&&((a=!!k.JSON&&JSON.parse)?b=a(b):e.parseJSON&&(b=e.parseJSON(b)),b&&b.create&&ha(b.create));l.className=l.className.replace(/(^|\s)(no-)?responsejs(\s|$)/,"$1$3")+" responsejs "});return h});
//END Trisept.UI.Web.Shell.respond.min.js
//START Trisept.UI.Web.Shell.jquery.ui.tabs.extension-1.11.2.js
/*
*  Extension of jquery.ui.tabs.js (1.11.2)
*
* Depends:
*   jquery.ui.tabs.js   
*/

function SelectNextTab(tabsDivId) {
    var $tabs = $("#" + tabsDivId).tabs();
    $tabs.tabs('option', 'active', $tabs.tabs('option', 'active') + 1);
    FocusFirstElementInTab(tabsDivId);
};

function SelectPreviousTab(tabsDivId) {
    var $tabs = $("#" + tabsDivId).tabs();
    $tabs.tabs('option', 'active', $tabs.tabs('option', 'active') - 1);
    FocusFirstElementInTab(tabsDivId);
}

function ManageTabNavigation(tabsDivId, previousNavDivId, previousLabelDivId, nextNavDivId, nextLabelDivID, selectedTabIndex) {

    var numTabs = $('#' + tabsDivId + ' >ul >li').size();

    if (selectedTabIndex + 1 == numTabs) {
        $('#' + nextNavDivId).hide();
        $('#' + nextLabelDivID).show();
    }
    else {
        $('#' + nextNavDivId).show();
        $('#' + nextLabelDivID).hide();
    };

    if (selectedTabIndex == 0) {
        $('#' + previousNavDivId).hide();
        $('#' + previousLabelDivId).show();
    }
    else {
        $('#' + previousNavDivId).show();
        $('#' + previousLabelDivId).hide();
    };
}

//Accessibility: move focus to first tabbable element in current tab
function FocusFirstElementInTab(tabsDivId) {
    var activeTabbable = $("#" + tabsDivId + " div.ui-tabs-panel:visible").find(':tabbable');
    if (activeTabbable.length > 0) {
        activeTabbable[0].focus();
    }
}
//END Trisept.UI.Web.Shell.jquery.ui.tabs.extension-1.11.2.js
//START Trisept.UI.Web.Shell.manageCollapse2.js
function manageCollapse(selectOrder, url) {
    //If feature page is active, scroll to tile
    if ((typeof (cartFeatureDivs) != 'undefined') && (cartFeatureDivs[selectOrder] != null)) {
        availDisplay.ScrollToTile(cartFeatureDivs[selectOrder].div_id);
    }
    else { // If page is inactive, redirect to active page with appropriate URL.
        if (url != null) {
            window.location = url;
        }
    }
}

function ViewSpecificFeatureAvail(pageUrl, itin, stop, featureId) {    
    var newUrl = pageUrl + "?itin=" + encodeURIComponent(itin) + "&cmpt=F";

    if (typeof (stop) !== "undefined" && stop != null) {
        newUrl = newUrl + "&stop=" + encodeURIComponent(stop);
    }

    newUrl = newUrl + "&featureId=" + encodeURIComponent(featureId);

    window.location = newUrl;
}
//END Trisept.UI.Web.Shell.manageCollapse2.js
//START Trisept.UI.Web.Shell.responsiveCrossBar.js
var responsiveCrossBarTopActive = false;
var responsiveCrossBarBottomActive = false;

//When the window width crosses the threshold, move the specified element's contents to/from the top responsive cross bar
function AdjustResponsiveCrossBarTop(elementToMoveId, triggerWidth) {
    if ($(window).width() <= triggerWidth && responsiveCrossBarTopActive == false) {
        $("#responsiveCrossBar").append($("#" + elementToMoveId).contents());
        responsiveCrossBarTopActive = true;
    }
    else if ($(window).width() > triggerWidth && responsiveCrossBarTopActive == true) {
        $("#" + elementToMoveId).append($("#responsiveCrossBar").contents());
        responsiveCrossBarTopActive = false;
    }
}

//When the window width crosses the threshold, move the specified element's contents to/from the bottom responsive cross bar
function AdjustResponsiveCrossBarBottom(elementToMoveId, triggerWidth) {
    if ($(window).width() <= triggerWidth && responsiveCrossBarBottomActive == false) {
        $("#responsiveCrossBarBottom").append($("#" + elementToMoveId).contents());
        responsiveCrossBarBottomActive = true;
    }
    else if ($(window).width() > triggerWidth && responsiveCrossBarBottomActive == true) {
        $("#" + elementToMoveId).append($("#responsiveCrossBarBottom").contents());
        responsiveCrossBarBottomActive = false;
    }
}
//END Trisept.UI.Web.Shell.responsiveCrossBar.js
//START Trisept.UI.Web.Shell.jQAllRangeSliders-min.js
/*! jQRangeSlider 5.7.1 - 2015-01-23 - Copyright (C) Guillaume Gautreau 2012 - MIT and GPLv3 licenses.*/!function (a) { "use strict"; a.widget("ui.rangeSliderMouseTouch", a.ui.mouse, { enabled: !0, _mouseInit: function () { var b = this; a.ui.mouse.prototype._mouseInit.apply(this), this._mouseDownEvent = !1, this.element.bind("touchstart." + this.widgetName, function (a) { return b._touchStart(a) }) }, _mouseDestroy: function () { a(document).unbind("touchmove." + this.widgetName, this._touchMoveDelegate).unbind("touchend." + this.widgetName, this._touchEndDelegate), a.ui.mouse.prototype._mouseDestroy.apply(this) }, enable: function () { this.enabled = !0 }, disable: function () { this.enabled = !1 }, destroy: function () { this._mouseDestroy(), a.ui.mouse.prototype.destroy.apply(this), this._mouseInit = null }, _touchStart: function (b) { if (!this.enabled) return !1; b.which = 1, b.preventDefault(), this._fillTouchEvent(b); var c = this, d = this._mouseDownEvent; this._mouseDown(b), d !== this._mouseDownEvent && (this._touchEndDelegate = function (a) { c._touchEnd(a) }, this._touchMoveDelegate = function (a) { c._touchMove(a) }, a(document).bind("touchmove." + this.widgetName, this._touchMoveDelegate).bind("touchend." + this.widgetName, this._touchEndDelegate)) }, _mouseDown: function (b) { return this.enabled ? a.ui.mouse.prototype._mouseDown.apply(this, [b]) : !1 }, _touchEnd: function (b) { this._fillTouchEvent(b), this._mouseUp(b), a(document).unbind("touchmove." + this.widgetName, this._touchMoveDelegate).unbind("touchend." + this.widgetName, this._touchEndDelegate), this._mouseDownEvent = !1, a(document).trigger("mouseup") }, _touchMove: function (a) { return a.preventDefault(), this._fillTouchEvent(a), this._mouseMove(a) }, _fillTouchEvent: function (a) { var b; b = "undefined" == typeof a.targetTouches && "undefined" == typeof a.changedTouches ? a.originalEvent.targetTouches[0] || a.originalEvent.changedTouches[0] : a.targetTouches[0] || a.changedTouches[0], a.pageX = b.pageX, a.pageY = b.pageY, a.which = 1 } }) } (jQuery), function (a) { "use strict"; a.widget("ui.rangeSliderDraggable", a.ui.rangeSliderMouseTouch, { cache: null, options: { containment: null }, _create: function () { a.ui.rangeSliderMouseTouch.prototype._create.apply(this), setTimeout(a.proxy(this._initElementIfNotDestroyed, this), 10) }, destroy: function () { this.cache = null, a.ui.rangeSliderMouseTouch.prototype.destroy.apply(this) }, _initElementIfNotDestroyed: function () { this._mouseInit && this._initElement() }, _initElement: function () { this._mouseInit(), this._cache() }, _setOption: function (b, c) { "containment" === b && (this.options.containment = null === c || 0 === a(c).length ? null : a(c)) }, _mouseStart: function (a) { return this._cache(), this.cache.click = { left: a.pageX, top: a.pageY }, this.cache.initialOffset = this.element.offset(), this._triggerMouseEvent("mousestart"), !0 }, _mouseDrag: function (a) { var b = a.pageX - this.cache.click.left; return b = this._constraintPosition(b + this.cache.initialOffset.left), this._applyPosition(b), this._triggerMouseEvent("sliderDrag"), !1 }, _mouseStop: function () { this._triggerMouseEvent("stop") }, _constraintPosition: function (a) { return 0 !== this.element.parent().length && null !== this.cache.parent.offset && (a = Math.min(a, this.cache.parent.offset.left + this.cache.parent.width - this.cache.width.outer), a = Math.max(a, this.cache.parent.offset.left)), a }, _applyPosition: function (a) { var b = { top: this.cache.offset.top, left: a }; this.element.offset({ left: a }), this.cache.offset = b }, _cacheIfNecessary: function () { null === this.cache && this._cache() }, _cache: function () { this.cache = {}, this._cacheMargins(), this._cacheParent(), this._cacheDimensions(), this.cache.offset = this.element.offset() }, _cacheMargins: function () { this.cache.margin = { left: this._parsePixels(this.element, "marginLeft"), right: this._parsePixels(this.element, "marginRight"), top: this._parsePixels(this.element, "marginTop"), bottom: this._parsePixels(this.element, "marginBottom")} }, _cacheParent: function () { if (null !== this.options.parent) { var a = this.element.parent(); this.cache.parent = { offset: a.offset(), width: a.width()} } else this.cache.parent = null }, _cacheDimensions: function () { this.cache.width = { outer: this.element.outerWidth(), inner: this.element.width()} }, _parsePixels: function (a, b) { return parseInt(a.css(b), 10) || 0 }, _triggerMouseEvent: function (a) { var b = this._prepareEventData(); this.element.trigger(a, b) }, _prepareEventData: function () { return { element: this.element, offset: this.cache.offset || null} } }) } (jQuery), function (a, b) { "use strict"; a.widget("ui.rangeSlider", { options: { bounds: { min: 0, max: 100 }, defaultValues: { min: 20, max: 50 }, wheelMode: null, wheelSpeed: 4, arrows: !0, valueLabels: "show", formatter: null, durationIn: 0, durationOut: 400, delayOut: 200, range: { min: !1, max: !1 }, step: !1, scales: !1, enabled: !0, symmetricPositionning: !1 }, _values: null, _valuesChanged: !1, _initialized: !1, bar: null, leftHandle: null, rightHandle: null, innerBar: null, container: null, arrows: null, labels: null, changing: { min: !1, max: !1 }, changed: { min: !1, max: !1 }, ruler: null, _create: function () { this._setDefaultValues(), this.labels = { left: null, right: null, leftDisplayed: !0, rightDisplayed: !0 }, this.arrows = { left: null, right: null }, this.changing = { min: !1, max: !1 }, this.changed = { min: !1, max: !1 }, this._createElements(), this._bindResize(), setTimeout(a.proxy(this.resize, this), 1), setTimeout(a.proxy(this._initValues, this), 1) }, _setDefaultValues: function () { this._values = { min: this.options.defaultValues.min, max: this.options.defaultValues.max} }, _bindResize: function () { var b = this; this._resizeProxy = function (a) { b.resize(a) }, a(window).resize(this._resizeProxy) }, _initWidth: function () { this.container.css("width", this.element.width() - this.container.outerWidth(!0) + this.container.width()), this.innerBar.css("width", this.container.width() - this.innerBar.outerWidth(!0) + this.innerBar.width()) }, _initValues: function () { this._initialized = !0, this.values(this._values.min, this._values.max) }, _setOption: function (a, b) { this._setWheelOption(a, b), this._setArrowsOption(a, b), this._setLabelsOption(a, b), this._setLabelsDurations(a, b), this._setFormatterOption(a, b), this._setBoundsOption(a, b), this._setRangeOption(a, b), this._setStepOption(a, b), this._setScalesOption(a, b), this._setEnabledOption(a, b), this._setPositionningOption(a, b) }, _validProperty: function (a, b, c) { return null === a || "undefined" == typeof a[b] ? c : a[b] }, _setStepOption: function (a, b) { "step" === a && (this.options.step = b, this._leftHandle("option", "step", b), this._rightHandle("option", "step", b), this._changed(!0)) }, _setScalesOption: function (a, b) { "scales" === a && (b === !1 || null === b ? (this.options.scales = !1, this._destroyRuler()) : b instanceof Array && (this.options.scales = b, this._updateRuler())) }, _setRangeOption: function (a, b) { "range" === a && (this._bar("option", "range", b), this.options.range = this._bar("option", "range"), this._changed(!0)) }, _setBoundsOption: function (a, b) { "bounds" === a && "undefined" != typeof b.min && "undefined" != typeof b.max && this.bounds(b.min, b.max) }, _setWheelOption: function (a, b) { ("wheelMode" === a || "wheelSpeed" === a) && (this._bar("option", a, b), this.options[a] = this._bar("option", a)) }, _setLabelsOption: function (a, b) { if ("valueLabels" === a) { if ("hide" !== b && "show" !== b && "change" !== b) return; this.options.valueLabels = b, "hide" !== b ? (this._createLabels(), this._leftLabel("update"), this._rightLabel("update")) : this._destroyLabels() } }, _setFormatterOption: function (a, b) { "formatter" === a && null !== b && "function" == typeof b && "hide" !== this.options.valueLabels && (this._leftLabel("option", "formatter", b), this.options.formatter = this._rightLabel("option", "formatter", b)) }, _setArrowsOption: function (a, b) { "arrows" !== a || b !== !0 && b !== !1 || b === this.options.arrows || (b === !0 ? (this.element.removeClass("ui-rangeSlider-noArrow").addClass("ui-rangeSlider-withArrows"), this.arrows.left.css("display", "block"), this.arrows.right.css("display", "block"), this.options.arrows = !0) : b === !1 && (this.element.addClass("ui-rangeSlider-noArrow").removeClass("ui-rangeSlider-withArrows"), this.arrows.left.css("display", "none"), this.arrows.right.css("display", "none"), this.options.arrows = !1), this._initWidth()) }, _setLabelsDurations: function (a, b) { if ("durationIn" === a || "durationOut" === a || "delayOut" === a) { if (parseInt(b, 10) !== b) return; null !== this.labels.left && this._leftLabel("option", a, b), null !== this.labels.right && this._rightLabel("option", a, b), this.options[a] = b } }, _setEnabledOption: function (a, b) { "enabled" === a && this.toggle(b) }, _setPositionningOption: function (a, b) { "symmetricPositionning" === a && (this._rightHandle("option", a, b), this.options[a] = this._leftHandle("option", a, b)) }, _createElements: function () { "absolute" !== this.element.css("position") && this.element.css("position", "relative"), this.element.addClass("ui-rangeSlider"), this.container = a("<div class='ui-rangeSlider-container' />").css("position", "absolute").appendTo(this.element), this.innerBar = a("<div class='ui-rangeSlider-innerBar' />").css("position", "absolute").css("top", 0).css("left", 0), this._createHandles(), this._createBar(), this.container.prepend(this.innerBar), this._createArrows(), "hide" !== this.options.valueLabels ? this._createLabels() : this._destroyLabels(), this._updateRuler(), this.options.enabled || this._toggle(this.options.enabled) }, _createHandle: function (b) { return a("<div />")[this._handleType()](b).bind("sliderDrag", a.proxy(this._changing, this)).bind("stop", a.proxy(this._changed, this)) }, _createHandles: function () { this.leftHandle = this._createHandle({ isLeft: !0, bounds: this.options.bounds, value: this._values.min, step: this.options.step, symmetricPositionning: this.options.symmetricPositionning }).appendTo(this.container), this.rightHandle = this._createHandle({ isLeft: !1, bounds: this.options.bounds, value: this._values.max, step: this.options.step, symmetricPositionning: this.options.symmetricPositionning }).appendTo(this.container) }, _createBar: function () { this.bar = a("<div />").prependTo(this.container).bind("sliderDrag scroll zoom", a.proxy(this._changing, this)).bind("stop", a.proxy(this._changed, this)), this._bar({ leftHandle: this.leftHandle, rightHandle: this.rightHandle, values: { min: this._values.min, max: this._values.max }, type: this._handleType(), range: this.options.range, wheelMode: this.options.wheelMode, wheelSpeed: this.options.wheelSpeed }), this.options.range = this._bar("option", "range"), this.options.wheelMode = this._bar("option", "wheelMode"), this.options.wheelSpeed = this._bar("option", "wheelSpeed") }, _createArrows: function () { this.arrows.left = this._createArrow("left"), this.arrows.right = this._createArrow("right"), this.options.arrows ? this.element.addClass("ui-rangeSlider-withArrows") : (this.arrows.left.css("display", "none"), this.arrows.right.css("display", "none"), this.element.addClass("ui-rangeSlider-noArrow")) }, _createArrow: function (b) { var c, d = a("<div class='ui-rangeSlider-arrow' />").append("<div class='ui-rangeSlider-arrow-inner' />").addClass("ui-rangeSlider-" + b + "Arrow").css("position", "absolute").css(b, 0).appendTo(this.element); return c = "right" === b ? a.proxy(this._scrollRightClick, this) : a.proxy(this._scrollLeftClick, this), d.bind("mousedown touchstart", c), d }, _proxy: function (a, b, c) { var d = Array.prototype.slice.call(c); return a && a[b] ? a[b].apply(a, d) : null }, _handleType: function () { return "rangeSliderHandle" }, _barType: function () { return "rangeSliderBar" }, _bar: function () { return this._proxy(this.bar, this._barType(), arguments) }, _labelType: function () { return "rangeSliderLabel" }, _leftLabel: function () { return this._proxy(this.labels.left, this._labelType(), arguments) }, _rightLabel: function () { return this._proxy(this.labels.right, this._labelType(), arguments) }, _leftHandle: function () { return this._proxy(this.leftHandle, this._handleType(), arguments) }, _rightHandle: function () { return this._proxy(this.rightHandle, this._handleType(), arguments) }, _getValue: function (a, b) { return b === this.rightHandle && (a -= b.outerWidth()), a * (this.options.bounds.max - this.options.bounds.min) / (this.container.innerWidth() - b.outerWidth(!0)) + this.options.bounds.min }, _trigger: function (a) { var b = this; setTimeout(function () { b.element.trigger(a, { label: b.element, values: b.values() }) }, 1) }, _changing: function () { this._updateValues() && (this._trigger("valuesChanging"), this._valuesChanged = !0) }, _deactivateLabels: function () { "change" === this.options.valueLabels && (this._leftLabel("option", "show", "hide"), this._rightLabel("option", "show", "hide")) }, _reactivateLabels: function () { "change" === this.options.valueLabels && (this._leftLabel("option", "show", "change"), this._rightLabel("option", "show", "change")) }, _changed: function (a) { a === !0 && this._deactivateLabels(), (this._updateValues() || this._valuesChanged) && (this._trigger("valuesChanged"), a !== !0 && this._trigger("userValuesChanged"), this._valuesChanged = !1), a === !0 && this._reactivateLabels() }, _updateValues: function () { var a = this._leftHandle("value"), b = this._rightHandle("value"), c = this._min(a, b), d = this._max(a, b), e = c !== this._values.min || d !== this._values.max; return this._values.min = this._min(a, b), this._values.max = this._max(a, b), e }, _min: function (a, b) { return Math.min(a, b) }, _max: function (a, b) { return Math.max(a, b) }, _createLabel: function (b, c) { var d; return null === b ? (d = this._getLabelConstructorParameters(b, c), b = a("<div />").appendTo(this.element)[this._labelType()](d)) : (d = this._getLabelRefreshParameters(b, c), b[this._labelType()](d)), b }, _getLabelConstructorParameters: function (a, b) { return { handle: b, handleType: this._handleType(), formatter: this._getFormatter(), show: this.options.valueLabels, durationIn: this.options.durationIn, durationOut: this.options.durationOut, delayOut: this.options.delayOut} }, _getLabelRefreshParameters: function () { return { formatter: this._getFormatter(), show: this.options.valueLabels, durationIn: this.options.durationIn, durationOut: this.options.durationOut, delayOut: this.options.delayOut} }, _getFormatter: function () { return this.options.formatter === !1 || null === this.options.formatter ? this._defaultFormatter : this.options.formatter }, _defaultFormatter: function (a) { return Math.round(a) }, _destroyLabel: function (a) { return null !== a && (a[this._labelType()]("destroy"), a.remove(), a = null), a }, _createLabels: function () { this.labels.left = this._createLabel(this.labels.left, this.leftHandle), this.labels.right = this._createLabel(this.labels.right, this.rightHandle), this._leftLabel("pair", this.labels.right) }, _destroyLabels: function () { this.labels.left = this._destroyLabel(this.labels.left), this.labels.right = this._destroyLabel(this.labels.right) }, _stepRatio: function () { return this._leftHandle("stepRatio") }, _scrollRightClick: function (a) { return this.options.enabled ? (a.preventDefault(), this._bar("startScroll"), this._bindStopScroll(), void this._continueScrolling("scrollRight", 4 * this._stepRatio(), 1)) : !1 }, _continueScrolling: function (a, b, c, d) { if (!this.options.enabled) return !1; this._bar(a, c), d = d || 5, d--; var e = this, f = 16, g = Math.max(1, 4 / this._stepRatio()); this._scrollTimeout = setTimeout(function () { 0 === d && (b > f ? b = Math.max(f, b / 1.5) : c = Math.min(g, 2 * c), d = 5), e._continueScrolling(a, b, c, d) }, b) }, _scrollLeftClick: function (a) { return this.options.enabled ? (a.preventDefault(), this._bar("startScroll"), this._bindStopScroll(), void this._continueScrolling("scrollLeft", 4 * this._stepRatio(), 1)) : !1 }, _bindStopScroll: function () { var b = this; this._stopScrollHandle = function (a) { a.preventDefault(), b._stopScroll() }, a(document).bind("mouseup touchend", this._stopScrollHandle) }, _stopScroll: function () { a(document).unbind("mouseup touchend", this._stopScrollHandle), this._stopScrollHandle = null, this._bar("stopScroll"), clearTimeout(this._scrollTimeout) }, _createRuler: function () { this.ruler = a("<div class='ui-rangeSlider-ruler' />").appendTo(this.innerBar) }, _setRulerParameters: function () { this.ruler.ruler({ min: this.options.bounds.min, max: this.options.bounds.max, scales: this.options.scales }) }, _destroyRuler: function () { null !== this.ruler && a.fn.ruler && (this.ruler.ruler("destroy"), this.ruler.remove(), this.ruler = null) }, _updateRuler: function () { this._destroyRuler(), this.options.scales !== !1 && a.fn.ruler && (this._createRuler(), this._setRulerParameters()) }, values: function (a, b) { var c; if ("undefined" != typeof a && "undefined" != typeof b) { if (!this._initialized) return this._values.min = a, this._values.max = b, this._values; this._deactivateLabels(), c = this._bar("values", a, b), this._changed(!0), this._reactivateLabels() } else c = this._bar("values", a, b); return c }, min: function (a) { return this._values.min = this.values(a, this._values.max).min, this._values.min }, max: function (a) { return this._values.max = this.values(this._values.min, a).max, this._values.max }, bounds: function (a, b) { return this._isValidValue(a) && this._isValidValue(b) && b > a && (this._setBounds(a, b), this._updateRuler(), this._changed(!0)), this.options.bounds }, _isValidValue: function (a) { return "undefined" != typeof a && parseFloat(a) === a }, _setBounds: function (a, b) { this.options.bounds = { min: a, max: b }, this._leftHandle("option", "bounds", this.options.bounds), this._rightHandle("option", "bounds", this.options.bounds), this._bar("option", "bounds", this.options.bounds) }, zoomIn: function (a) { this._bar("zoomIn", a) }, zoomOut: function (a) { this._bar("zoomOut", a) }, scrollLeft: function (a) { this._bar("startScroll"), this._bar("scrollLeft", a), this._bar("stopScroll") }, scrollRight: function (a) { this._bar("startScroll"), this._bar("scrollRight", a), this._bar("stopScroll") }, resize: function () { this._initWidth(), this._leftHandle("update"), this._rightHandle("update"), this._bar("update") }, enable: function () { this.toggle(!0) }, disable: function () { this.toggle(!1) }, toggle: function (a) { a === b && (a = !this.options.enabled), this.options.enabled !== a && this._toggle(a) }, _toggle: function (a) { this.options.enabled = a, this.element.toggleClass("ui-rangeSlider-disabled", !a); var b = a ? "enable" : "disable"; this._bar(b), this._leftHandle(b), this._rightHandle(b), this._leftLabel(b), this._rightLabel(b) }, destroy: function () { this.element.removeClass("ui-rangeSlider-withArrows ui-rangeSlider-noArrow ui-rangeSlider-disabled"), this._destroyWidgets(), this._destroyElements(), this.element.removeClass("ui-rangeSlider"), this.options = null, a(window).unbind("resize", this._resizeProxy), this._resizeProxy = null, this._bindResize = null, a.Widget.prototype.destroy.apply(this, arguments) }, _destroyWidget: function (a) { this["_" + a]("destroy"), this[a].remove(), this[a] = null }, _destroyWidgets: function () { this._destroyWidget("bar"), this._destroyWidget("leftHandle"), this._destroyWidget("rightHandle"), this._destroyRuler(), this._destroyLabels() }, _destroyElements: function () { this.container.remove(), this.container = null, this.innerBar.remove(), this.innerBar = null, this.arrows.left.remove(), this.arrows.right.remove(), this.arrows = null } }) } (jQuery), function (a) { "use strict"; a.widget("ui.rangeSliderHandle", a.ui.rangeSliderDraggable, { currentMove: null, margin: 0, parentElement: null, options: { isLeft: !0, bounds: { min: 0, max: 100 }, range: !1, value: 0, step: !1 }, _value: 0, _left: 0, _create: function () { a.ui.rangeSliderDraggable.prototype._create.apply(this), this.element.css("position", "absolute").css("top", 0).addClass("ui-rangeSlider-handle").toggleClass("ui-rangeSlider-leftHandle", this.options.isLeft).toggleClass("ui-rangeSlider-rightHandle", !this.options.isLeft), this.element.append("<div class='ui-rangeSlider-handle-inner' />"), this._value = this._constraintValue(this.options.value) }, destroy: function () { this.element.empty(), a.ui.rangeSliderDraggable.prototype.destroy.apply(this) }, _setOption: function (b, c) { "isLeft" !== b || c !== !0 && c !== !1 || c === this.options.isLeft ? "step" === b && this._checkStep(c) ? (this.options.step = c, this.update()) : "bounds" === b ? (this.options.bounds = c, this.update()) : "range" === b && this._checkRange(c) ? (this.options.range = c, this.update()) : "symmetricPositionning" === b && (this.options.symmetricPositionning = c === !0, this.update()) : (this.options.isLeft = c, this.element.toggleClass("ui-rangeSlider-leftHandle", this.options.isLeft).toggleClass("ui-rangeSlider-rightHandle", !this.options.isLeft), this._position(this._value), this.element.trigger("switch", this.options.isLeft)), a.ui.rangeSliderDraggable.prototype._setOption.apply(this, [b, c]) }, _checkRange: function (a) { return a === !1 || !this._isValidValue(a.min) && !this._isValidValue(a.max) }, _isValidValue: function (a) { return "undefined" != typeof a && a !== !1 && parseFloat(a) !== a }, _checkStep: function (a) { return a === !1 || parseFloat(a) === a }, _initElement: function () { a.ui.rangeSliderDraggable.prototype._initElement.apply(this), 0 === this.cache.parent.width || null === this.cache.parent.width ? setTimeout(a.proxy(this._initElementIfNotDestroyed, this), 500) : (this._position(this._value), this._triggerMouseEvent("initialize")) }, _bounds: function () { return this.options.bounds }, _cache: function () { a.ui.rangeSliderDraggable.prototype._cache.apply(this), this._cacheParent() }, _cacheParent: function () { var a = this.element.parent(); this.cache.parent = { element: a, offset: a.offset(), padding: { left: this._parsePixels(a, "paddingLeft") }, width: a.width()} }, _position: function (a) { var b = this._getPositionForValue(a); this._applyPosition(b) }, _constraintPosition: function (a) { var b = this._getValueForPosition(a); return this._getPositionForValue(b) }, _applyPosition: function (b) { a.ui.rangeSliderDraggable.prototype._applyPosition.apply(this, [b]), this._left = b, this._setValue(this._getValueForPosition(b)), this._triggerMouseEvent("moving") }, _prepareEventData: function () { var b = a.ui.rangeSliderDraggable.prototype._prepareEventData.apply(this); return b.value = this._value, b }, _setValue: function (a) { a !== this._value && (this._value = a) }, _constraintValue: function (a) { if (a = Math.min(a, this._bounds().max), a = Math.max(a, this._bounds().min), a = this._round(a), this.options.range !== !1) { var b = this.options.range.min || !1, c = this.options.range.max || !1; b !== !1 && (a = Math.max(a, this._round(b))), c !== !1 && (a = Math.min(a, this._round(c))), a = Math.min(a, this._bounds().max), a = Math.max(a, this._bounds().min) } return a }, _round: function (a) { return this.options.step !== !1 && this.options.step > 0 ? Math.round(a / this.options.step) * this.options.step : a }, _getPositionForValue: function (a) { if (!this.cache || !this.cache.parent || null === this.cache.parent.offset) return 0; a = this._constraintValue(a); var b = (a - this.options.bounds.min) / (this.options.bounds.max - this.options.bounds.min), c = this.cache.parent.width, d = this.cache.parent.offset.left, e = this.options.isLeft ? 0 : this.cache.width.outer; return this.options.symmetricPositionning ? b * (c - 2 * this.cache.width.outer) + d + e : b * c + d - e }, _getValueForPosition: function (a) { var b = this._getRawValueForPositionAndBounds(a, this.options.bounds.min, this.options.bounds.max); return this._constraintValue(b) }, _getRawValueForPositionAndBounds: function (a, b, c) { var d, e, f = null === this.cache.parent.offset ? 0 : this.cache.parent.offset.left; return this.options.symmetricPositionning ? (a -= this.options.isLeft ? 0 : this.cache.width.outer, d = this.cache.parent.width - 2 * this.cache.width.outer) : (a += this.options.isLeft ? 0 : this.cache.width.outer, d = this.cache.parent.width), 0 === d ? this._value : (e = (a - f) / d, e * (c - b) + b) }, value: function (a) { return "undefined" != typeof a && (this._cache(), a = this._constraintValue(a), this._position(a)), this._value }, update: function () { this._cache(); var a = this._constraintValue(this._value), b = this._getPositionForValue(a); a !== this._value ? (this._triggerMouseEvent("updating"), this._position(a), this._triggerMouseEvent("update")) : b !== this.cache.offset.left && (this._triggerMouseEvent("updating"), this._position(a), this._triggerMouseEvent("update")) }, position: function (a) { return "undefined" != typeof a && (this._cache(), a = this._constraintPosition(a), this._applyPosition(a)), this._left }, add: function (a, b) { return a + b }, substract: function (a, b) { return a - b }, stepsBetween: function (a, b) { return this.options.step === !1 ? b - a : (b - a) / this.options.step }, multiplyStep: function (a, b) { return a * b }, moveRight: function (a) { var b; return this.options.step === !1 ? (b = this._left, this.position(this._left + a), this._left - b) : (b = this._value, this.value(this.add(b, this.multiplyStep(this.options.step, a))), this.stepsBetween(b, this._value)) }, moveLeft: function (a) { return -this.moveRight(-a) }, stepRatio: function () { if (this.options.step === !1) return 1; var a = (this.options.bounds.max - this.options.bounds.min) / this.options.step; return this.cache.parent.width / a } }) } (jQuery), function (a) {
    "use strict"; function b(a, b) { return "undefined" == typeof a ? b || !1 : a } a.widget("ui.rangeSliderBar", a.ui.rangeSliderDraggable, { options: { leftHandle: null, rightHandle: null, bounds: { min: 0, max: 100 }, type: "rangeSliderHandle", range: !1, drag: function () { }, stop: function () { }, values: { min: 0, max: 20 }, wheelSpeed: 4, wheelMode: null }, _values: { min: 0, max: 20 }, _waitingToInit: 2, _wheelTimeout: !1, _create: function () { a.ui.rangeSliderDraggable.prototype._create.apply(this), this.element.css("position", "absolute").css("top", 0).addClass("ui-rangeSlider-bar"), this.options.leftHandle.bind("initialize", a.proxy(this._onInitialized, this)).bind("mousestart", a.proxy(this._cache, this)).bind("stop", a.proxy(this._onHandleStop, this)), this.options.rightHandle.bind("initialize", a.proxy(this._onInitialized, this)).bind("mousestart", a.proxy(this._cache, this)).bind("stop", a.proxy(this._onHandleStop, this)), this._bindHandles(), this._values = this.options.values, this._setWheelModeOption(this.options.wheelMode) }, destroy: function () { this.options.leftHandle.unbind(".bar"), this.options.rightHandle.unbind(".bar"), this.options = null, a.ui.rangeSliderDraggable.prototype.destroy.apply(this) }, _setOption: function (a, b) { "range" === a ? this._setRangeOption(b) : "wheelSpeed" === a ? this._setWheelSpeedOption(b) : "wheelMode" === a && this._setWheelModeOption(b) }, _setRangeOption: function (a) { if (("object" != typeof a || null === a) && (a = !1), a !== !1 || this.options.range !== !1) { if (a !== !1) { var c = b(a.min, this.options.range.min), d = b(a.max, this.options.range.max); this.options.range = { min: c, max: d} } else this.options.range = !1; this._setLeftRange(), this._setRightRange() } }, _setWheelSpeedOption: function (a) { "number" == typeof a && a > 0 && (this.options.wheelSpeed = a) }, _setWheelModeOption: function (a) { (null === a || a === !1 || "zoom" === a || "scroll" === a) && (this.options.wheelMode !== a && this.element.parent().unbind("mousewheel.bar"), this._bindMouseWheel(a), this.options.wheelMode = a) }, _bindMouseWheel: function (b) { "zoom" === b ? this.element.parent().bind("mousewheel.bar", a.proxy(this._mouseWheelZoom, this)) : "scroll" === b && this.element.parent().bind("mousewheel.bar", a.proxy(this._mouseWheelScroll, this)) }, _setLeftRange: function () { if (this.options.range === !1) return !1; var a = this._values.max, b = { min: !1, max: !1 }; b.max = "undefined" != typeof this.options.range.min && this.options.range.min !== !1 ? this._leftHandle("substract", a, this.options.range.min) : !1, b.min = "undefined" != typeof this.options.range.max && this.options.range.max !== !1 ? this._leftHandle("substract", a, this.options.range.max) : !1, this._leftHandle("option", "range", b) }, _setRightRange: function () { var a = this._values.min, b = { min: !1, max: !1 }; b.min = "undefined" != typeof this.options.range.min && this.options.range.min !== !1 ? this._rightHandle("add", a, this.options.range.min) : !1, b.max = "undefined" != typeof this.options.range.max && this.options.range.max !== !1 ? this._rightHandle("add", a, this.options.range.max) : !1, this._rightHandle("option", "range", b) }, _deactivateRange: function () { this._leftHandle("option", "range", !1), this._rightHandle("option", "range", !1) }, _reactivateRange: function () { this._setRangeOption(this.options.range) }, _onInitialized: function () { this._waitingToInit--, 0 === this._waitingToInit && this._initMe() }, _initMe: function () { this._cache(), this.min(this._values.min), this.max(this._values.max); var a = this._leftHandle("position"), b = this._rightHandle("position") + this.options.rightHandle.width(); this.element.offset({ left: a }), this.element.css("width", b - a) }, _leftHandle: function () { return this._handleProxy(this.options.leftHandle, arguments) }, _rightHandle: function () { return this._handleProxy(this.options.rightHandle, arguments) }, _handleProxy: function (a, b) { var c = Array.prototype.slice.call(b); return a[this.options.type].apply(a, c) }, _cache: function () { a.ui.rangeSliderDraggable.prototype._cache.apply(this), this._cacheHandles() }, _cacheHandles: function () { this.cache.rightHandle = {}, this.cache.rightHandle.width = this.options.rightHandle.width(), this.cache.rightHandle.offset = this.options.rightHandle.offset(), this.cache.leftHandle = {}, this.cache.leftHandle.offset = this.options.leftHandle.offset() }, _mouseStart: function (b) { a.ui.rangeSliderDraggable.prototype._mouseStart.apply(this, [b]), this._deactivateRange() }, _mouseStop: function (b) { a.ui.rangeSliderDraggable.prototype._mouseStop.apply(this, [b]), this._cacheHandles(), this._values.min = this._leftHandle("value"), this._values.max = this._rightHandle("value"), this._reactivateRange(), this._leftHandle().trigger("stop"), this._rightHandle().trigger("stop") }, _onDragLeftHandle: function (a, b) { if (this._cacheIfNecessary(), b.element[0] === this.options.leftHandle[0]) { if (this._switchedValues()) return this._switchHandles(), void this._onDragRightHandle(a, b); this._values.min = b.value, this.cache.offset.left = b.offset.left, this.cache.leftHandle.offset = b.offset, this._positionBar() } }, _onDragRightHandle: function (a, b) { if (this._cacheIfNecessary(), b.element[0] === this.options.rightHandle[0]) { if (this._switchedValues()) return this._switchHandles(), void this._onDragLeftHandle(a, b); this._values.max = b.value, this.cache.rightHandle.offset = b.offset, this._positionBar() } }, _positionBar: function () { var a = this.cache.rightHandle.offset.left + this.cache.rightHandle.width - this.cache.leftHandle.offset.left; this.cache.width.inner = a, this.element.css("width", a).offset({ left: this.cache.leftHandle.offset.left }) }, _onHandleStop: function () { this._setLeftRange(), this._setRightRange() }, _switchedValues: function () { if (this.min() > this.max()) { var a = this._values.min; return this._values.min = this._values.max, this._values.max = a, !0 } return !1 }, _switchHandles: function () { var a = this.options.leftHandle; this.options.leftHandle = this.options.rightHandle, this.options.rightHandle = a, this._leftHandle("option", "isLeft", !0), this._rightHandle("option", "isLeft", !1), this._bindHandles(), this._cacheHandles() }, _bindHandles: function () { this.options.leftHandle.unbind(".bar").bind("sliderDrag.bar update.bar moving.bar", a.proxy(this._onDragLeftHandle, this)), this.options.rightHandle.unbind(".bar").bind("sliderDrag.bar update.bar moving.bar", a.proxy(this._onDragRightHandle, this)) }, _constraintPosition: function (b) { var c, d = {}; return d.left = a.ui.rangeSliderDraggable.prototype._constraintPosition.apply(this, [b]), d.left = this._leftHandle("position", d.left), c = this._rightHandle("position", d.left + this.cache.width.outer - this.cache.rightHandle.width), d.width = c - d.left + this.cache.rightHandle.width, d }, _applyPosition: function (b) { a.ui.rangeSliderDraggable.prototype._applyPosition.apply(this, [b.left]), this.element.width(b.width) }, _mouseWheelZoom: function (b, c, d, e) { if (!this.enabled) return !1; var f = this._values.min + (this._values.max - this._values.min) / 2, g = {}, h = {}; return this.options.range === !1 || this.options.range.min === !1 ? (g.max = f, h.min = f) : (g.max = f - this.options.range.min / 2, h.min = f + this.options.range.min / 2), this.options.range !== !1 && this.options.range.max !== !1 && (g.min = f - this.options.range.max / 2, h.max = f + this.options.range.max / 2), this._leftHandle("option", "range", g), this._rightHandle("option", "range", h), clearTimeout(this._wheelTimeout), this._wheelTimeout = setTimeout(a.proxy(this._wheelStop, this), 200), this.zoomIn(e * this.options.wheelSpeed), !1 }, _mouseWheelScroll: function (b, c, d, e) { return this.enabled ? (this._wheelTimeout === !1 ? this.startScroll() : clearTimeout(this._wheelTimeout), this._wheelTimeout = setTimeout(a.proxy(this._wheelStop, this), 200), this.scrollLeft(e * this.options.wheelSpeed), !1) : !1 }, _wheelStop: function () { this.stopScroll(), this._wheelTimeout = !1 }, min: function (a) { return this._leftHandle("value", a) }, max: function (a) { return this._rightHandle("value", a) }, startScroll: function () { this._deactivateRange() }, stopScroll: function () { this._reactivateRange(), this._triggerMouseEvent("stop"), this._leftHandle().trigger("stop"), this._rightHandle().trigger("stop") }, scrollLeft: function (a) { return a = a || 1, 0 > a ? this.scrollRight(-a) : (a = this._leftHandle("moveLeft", a), this._rightHandle("moveLeft", a), this.update(), void this._triggerMouseEvent("scroll")) }, scrollRight: function (a) { return a = a || 1, 0 > a ? this.scrollLeft(-a) : (a = this._rightHandle("moveRight", a), this._leftHandle("moveRight", a), this.update(), void this._triggerMouseEvent("scroll")) }, zoomIn: function (a) { if (a = a || 1, 0 > a) return this.zoomOut(-a); var b = this._rightHandle("moveLeft", a); a > b && (b /= 2, this._rightHandle("moveRight", b)), this._leftHandle("moveRight", b), this.update(), this._triggerMouseEvent("zoom") }, zoomOut: function (a) { if (a = a || 1, 0 > a) return this.zoomIn(-a); var b = this._rightHandle("moveRight", a); a > b && (b /= 2, this._rightHandle("moveLeft", b)), this._leftHandle("moveLeft", b), this.update(), this._triggerMouseEvent("zoom") }, values: function (a, b) {
        if ("undefined" != typeof a && "undefined" != typeof b) {
            var c = Math.min(a, b), d = Math.max(a, b); this._deactivateRange(), this.options.leftHandle.unbind(".bar"), this.options.rightHandle.unbind(".bar"), this._values.min = this._leftHandle("value", c), this._values.max = this._rightHandle("value", d), this._bindHandles(), this._reactivateRange(), this.update()
        } return { min: this._values.min, max: this._values.max}
    }, update: function () { this._values.min = this.min(), this._values.max = this.max(), this._cache(), this._positionBar() } 
    })
} (jQuery), function (a) { "use strict"; function b(b, c, d, e) { this.label1 = b, this.label2 = c, this.type = d, this.options = e, this.handle1 = this.label1[this.type]("option", "handle"), this.handle2 = this.label2[this.type]("option", "handle"), this.cache = null, this.left = b, this.right = c, this.moving = !1, this.initialized = !1, this.updating = !1, this.Init = function () { this.BindHandle(this.handle1), this.BindHandle(this.handle2), "show" === this.options.show ? (setTimeout(a.proxy(this.PositionLabels, this), 1), this.initialized = !0) : setTimeout(a.proxy(this.AfterInit, this), 1e3), this._resizeProxy = a.proxy(this.onWindowResize, this), a(window).resize(this._resizeProxy) }, this.Destroy = function () { this._resizeProxy && (a(window).unbind("resize", this._resizeProxy), this._resizeProxy = null, this.handle1.unbind(".positionner"), this.handle1 = null, this.handle2.unbind(".positionner"), this.handle2 = null, this.label1 = null, this.label2 = null, this.left = null, this.right = null), this.cache = null }, this.AfterInit = function () { this.initialized = !0 }, this.Cache = function () { "none" !== this.label1.css("display") && (this.cache = {}, this.cache.label1 = {}, this.cache.label2 = {}, this.cache.handle1 = {}, this.cache.handle2 = {}, this.cache.offsetParent = {}, this.CacheElement(this.label1, this.cache.label1), this.CacheElement(this.label2, this.cache.label2), this.CacheElement(this.handle1, this.cache.handle1), this.CacheElement(this.handle2, this.cache.handle2), this.CacheElement(this.label1.offsetParent(), this.cache.offsetParent)) }, this.CacheIfNecessary = function () { null === this.cache ? this.Cache() : (this.CacheWidth(this.label1, this.cache.label1), this.CacheWidth(this.label2, this.cache.label2), this.CacheHeight(this.label1, this.cache.label1), this.CacheHeight(this.label2, this.cache.label2), this.CacheWidth(this.label1.offsetParent(), this.cache.offsetParent)) }, this.CacheElement = function (a, b) { this.CacheWidth(a, b), this.CacheHeight(a, b), b.offset = a.offset(), b.margin = { left: this.ParsePixels("marginLeft", a), right: this.ParsePixels("marginRight", a) }, b.border = { left: this.ParsePixels("borderLeftWidth", a), right: this.ParsePixels("borderRightWidth", a)} }, this.CacheWidth = function (a, b) { b.width = a.width(), b.outerWidth = a.outerWidth() }, this.CacheHeight = function (a, b) { b.outerHeightMargin = a.outerHeight(!0) }, this.ParsePixels = function (a, b) { return parseInt(b.css(a), 10) || 0 }, this.BindHandle = function (b) { b.bind("updating.positionner", a.proxy(this.onHandleUpdating, this)), b.bind("update.positionner", a.proxy(this.onHandleUpdated, this)), b.bind("moving.positionner", a.proxy(this.onHandleMoving, this)), b.bind("stop.positionner", a.proxy(this.onHandleStop, this)) }, this.PositionLabels = function () { if (this.CacheIfNecessary(), null !== this.cache) { var a = this.GetRawPosition(this.cache.label1, this.cache.handle1), b = this.GetRawPosition(this.cache.label2, this.cache.handle2); this.label1[d]("option", "isLeft") ? this.ConstraintPositions(a, b) : this.ConstraintPositions(b, a), this.PositionLabel(this.label1, a.left, this.cache.label1), this.PositionLabel(this.label2, b.left, this.cache.label2) } }, this.PositionLabel = function (a, b, c) { var d, e, f, g = this.cache.offsetParent.offset.left + this.cache.offsetParent.border.left; g - b >= 0 ? (a.css("right", ""), a.offset({ left: b })) : (d = g + this.cache.offsetParent.width, e = b + c.margin.left + c.outerWidth + c.margin.right, f = d - e, a.css("left", ""), a.css("right", f)) }, this.ConstraintPositions = function (a, b) { (a.center < b.center && a.outerRight > b.outerLeft || a.center > b.center && b.outerRight > a.outerLeft) && (a = this.getLeftPosition(a, b), b = this.getRightPosition(a, b)) }, this.getLeftPosition = function (a, b) { var c = (b.center + a.center) / 2, d = c - a.cache.outerWidth - a.cache.margin.right + a.cache.border.left; return a.left = d, a }, this.getRightPosition = function (a, b) { var c = (b.center + a.center) / 2; return b.left = c + b.cache.margin.left + b.cache.border.left, b }, this.ShowIfNecessary = function () { "show" === this.options.show || this.moving || !this.initialized || this.updating || (this.label1.stop(!0, !0).fadeIn(this.options.durationIn || 0), this.label2.stop(!0, !0).fadeIn(this.options.durationIn || 0), this.moving = !0) }, this.HideIfNeeded = function () { this.moving === !0 && (this.label1.stop(!0, !0).delay(this.options.delayOut || 0).fadeOut(this.options.durationOut || 0), this.label2.stop(!0, !0).delay(this.options.delayOut || 0).fadeOut(this.options.durationOut || 0), this.moving = !1) }, this.onHandleMoving = function (a, b) { this.ShowIfNecessary(), this.CacheIfNecessary(), this.UpdateHandlePosition(b), this.PositionLabels() }, this.onHandleUpdating = function () { this.updating = !0 }, this.onHandleUpdated = function () { this.updating = !1, this.cache = null }, this.onHandleStop = function () { this.HideIfNeeded() }, this.onWindowResize = function () { this.cache = null }, this.UpdateHandlePosition = function (a) { null !== this.cache && (a.element[0] === this.handle1[0] ? this.UpdatePosition(a, this.cache.handle1) : this.UpdatePosition(a, this.cache.handle2)) }, this.UpdatePosition = function (a, b) { b.offset = a.offset, b.value = a.value }, this.GetRawPosition = function (a, b) { var c = b.offset.left + b.outerWidth / 2, d = c - a.outerWidth / 2, e = d + a.outerWidth - a.border.left - a.border.right, f = d - a.margin.left - a.border.left, g = b.offset.top - a.outerHeightMargin; return { left: d, outerLeft: f, top: g, right: e, outerRight: f + a.outerWidth + a.margin.left + a.margin.right, cache: a, center: c} }, this.Init() } a.widget("ui.rangeSliderLabel", a.ui.rangeSliderMouseTouch, { options: { handle: null, formatter: !1, handleType: "rangeSliderHandle", show: "show", durationIn: 0, durationOut: 500, delayOut: 500, isLeft: !1 }, cache: null, _positionner: null, _valueContainer: null, _innerElement: null, _value: null, _create: function () { this.options.isLeft = this._handle("option", "isLeft"), this.element.addClass("ui-rangeSlider-label").css("position", "absolute").css("display", "block"), this._createElements(), this._toggleClass(), this.options.handle.bind("moving.label", a.proxy(this._onMoving, this)).bind("update.label", a.proxy(this._onUpdate, this)).bind("switch.label", a.proxy(this._onSwitch, this)), "show" !== this.options.show && this.element.hide(), this._mouseInit() }, destroy: function () { this.options.handle.unbind(".label"), this.options.handle = null, this._valueContainer = null, this._innerElement = null, this.element.empty(), this._positionner && (this._positionner.Destroy(), this._positionner = null), a.ui.rangeSliderMouseTouch.prototype.destroy.apply(this) }, _createElements: function () { this._valueContainer = a("<div class='ui-rangeSlider-label-value' />").appendTo(this.element), this._innerElement = a("<div class='ui-rangeSlider-label-inner' />").appendTo(this.element) }, _handle: function () { var a = Array.prototype.slice.apply(arguments); return this.options.handle[this.options.handleType].apply(this.options.handle, a) }, _setOption: function (a, b) { "show" === a ? this._updateShowOption(b) : ("durationIn" === a || "durationOut" === a || "delayOut" === a) && this._updateDurations(a, b), this._setFormatterOption(a, b) }, _setFormatterOption: function (a, b) { "formatter" === a && ("function" == typeof b || b === !1) && (this.options.formatter = b, this._display(this._value)) }, _updateShowOption: function (a) { this.options.show = a, "show" !== this.options.show ? (this.element.hide(), this._positionner.moving = !1) : (this.element.show(), this._display(this.options.handle[this.options.handleType]("value")), this._positionner.PositionLabels()), this._positionner.options.show = this.options.show }, _updateDurations: function (a, b) { parseInt(b, 10) === b && (this._positionner.options[a] = b, this.options[a] = b) }, _display: function (a) { this._displayText(this.options.formatter === !1 ? Math.round(a) : this.options.formatter(a)), this._value = a }, _displayText: function (a) { this._valueContainer.text(a) }, _toggleClass: function () { this.element.toggleClass("ui-rangeSlider-leftLabel", this.options.isLeft).toggleClass("ui-rangeSlider-rightLabel", !this.options.isLeft) }, _positionLabels: function () { this._positionner.PositionLabels() }, _mouseDown: function (a) { this.options.handle.trigger(a) }, _mouseUp: function (a) { this.options.handle.trigger(a) }, _mouseMove: function (a) { this.options.handle.trigger(a) }, _onMoving: function (a, b) { this._display(b.value) }, _onUpdate: function () { "show" === this.options.show && this.update() }, _onSwitch: function (a, b) { this.options.isLeft = b, this._toggleClass(), this._positionLabels() }, pair: function (a) { null === this._positionner && (this._positionner = new b(this.element, a, this.widgetName, { show: this.options.show, durationIn: this.options.durationIn, durationOut: this.options.durationOut, delayOut: this.options.delayOut }), a[this.widgetName]("positionner", this._positionner)) }, positionner: function (a) { return "undefined" != typeof a && (this._positionner = a), this._positionner }, update: function () { this._positionner.cache = null, this._display(this._handle("value")), "show" === this.options.show && this._positionLabels() } }) } (jQuery), function (a) { "use strict"; a.widget("ui.dateRangeSlider", a.ui.rangeSlider, { options: { bounds: { min: new Date(2010, 0, 1).valueOf(), max: new Date(2012, 0, 1).valueOf() }, defaultValues: { min: new Date(2010, 1, 11).valueOf(), max: new Date(2011, 1, 11).valueOf()} }, _create: function () { a.ui.rangeSlider.prototype._create.apply(this), this.element.addClass("ui-dateRangeSlider") }, destroy: function () { this.element.removeClass("ui-dateRangeSlider"), a.ui.rangeSlider.prototype.destroy.apply(this) }, _setDefaultValues: function () { this._values = { min: this.options.defaultValues.min.valueOf(), max: this.options.defaultValues.max.valueOf()} }, _setRulerParameters: function () { this.ruler.ruler({ min: new Date(this.options.bounds.min.valueOf()), max: new Date(this.options.bounds.max.valueOf()), scales: this.options.scales }) }, _setOption: function (b, c) { ("defaultValues" === b || "bounds" === b) && "undefined" != typeof c && null !== c && this._isValidDate(c.min) && this._isValidDate(c.max) ? a.ui.rangeSlider.prototype._setOption.apply(this, [b, { min: c.min.valueOf(), max: c.max.valueOf()}]) : a.ui.rangeSlider.prototype._setOption.apply(this, this._toArray(arguments)) }, _handleType: function () { return "dateRangeSliderHandle" }, option: function (b) { if ("bounds" === b || "defaultValues" === b) { var c = a.ui.rangeSlider.prototype.option.apply(this, arguments); return { min: new Date(c.min), max: new Date(c.max)} } return a.ui.rangeSlider.prototype.option.apply(this, this._toArray(arguments)) }, _defaultFormatter: function (a) { var b = a.getMonth() + 1, c = a.getDate(); return "" + a.getFullYear() + "-" + (10 > b ? "0" + b : b) + "-" + (10 > c ? "0" + c : c) }, _getFormatter: function () { var a = this.options.formatter; return (this.options.formatter === !1 || null === this.options.formatter) && (a = this._defaultFormatter), function (a) { return function (b) { return a(new Date(b)) } } (a) }, values: function (b, c) { var d = null; return d = this._isValidDate(b) && this._isValidDate(c) ? a.ui.rangeSlider.prototype.values.apply(this, [b.valueOf(), c.valueOf()]) : a.ui.rangeSlider.prototype.values.apply(this, this._toArray(arguments)), { min: new Date(d.min), max: new Date(d.max)} }, min: function (b) { return new Date(this._isValidDate(b) ? a.ui.rangeSlider.prototype.min.apply(this, [b.valueOf()]) : a.ui.rangeSlider.prototype.min.apply(this)) }, max: function (b) { return new Date(this._isValidDate(b) ? a.ui.rangeSlider.prototype.max.apply(this, [b.valueOf()]) : a.ui.rangeSlider.prototype.max.apply(this)) }, bounds: function (b, c) { var d; return d = this._isValidDate(b) && this._isValidDate(c) ? a.ui.rangeSlider.prototype.bounds.apply(this, [b.valueOf(), c.valueOf()]) : a.ui.rangeSlider.prototype.bounds.apply(this, this._toArray(arguments)), { min: new Date(d.min), max: new Date(d.max)} }, _isValidDate: function (a) { return "undefined" != typeof a && a instanceof Date }, _toArray: function (a) { return Array.prototype.slice.call(a) } }) } (jQuery), function (a) { "use strict"; a.widget("ui.dateRangeSliderHandle", a.ui.rangeSliderHandle, { _steps: !1, _boundsValues: {}, _create: function () { this._createBoundsValues(), a.ui.rangeSliderHandle.prototype._create.apply(this) }, _getValueForPosition: function (a) { var b = this._getRawValueForPositionAndBounds(a, this.options.bounds.min.valueOf(), this.options.bounds.max.valueOf()); return this._constraintValue(new Date(b)) }, _setOption: function (b, c) { return "step" === b ? (this.options.step = c, this._createSteps(), void this.update()) : (a.ui.rangeSliderHandle.prototype._setOption.apply(this, [b, c]), void ("bounds" === b && this._createBoundsValues())) }, _createBoundsValues: function () { this._boundsValues = { min: this.options.bounds.min.valueOf(), max: this.options.bounds.max.valueOf()} }, _bounds: function () { return this._boundsValues }, _createSteps: function () { if (this.options.step === !1 || !this._isValidStep()) return void (this._steps = !1); var a = new Date(this.options.bounds.min.valueOf()), b = new Date(this.options.bounds.max.valueOf()), c = a, d = 0, e = new Date; for (this._steps = []; b >= c && (1 === d || e.valueOf() !== c.valueOf()); ) e = c, this._steps.push(c.valueOf()), c = this._addStep(a, d, this.options.step), d++; e.valueOf() === c.valueOf() && (this._steps = !1) }, _isValidStep: function () { return "object" == typeof this.options.step }, _addStep: function (a, b, c) { var d = new Date(a.valueOf()); return d = this._addThing(d, "FullYear", b, c.years), d = this._addThing(d, "Month", b, c.months), d = this._addThing(d, "Date", b, 7 * c.weeks), d = this._addThing(d, "Date", b, c.days), d = this._addThing(d, "Hours", b, c.hours), d = this._addThing(d, "Minutes", b, c.minutes), d = this._addThing(d, "Seconds", b, c.seconds) }, _addThing: function (a, b, c, d) { return 0 === c || 0 === (d || 0) ? a : (a["set" + b](a["get" + b]() + c * (d || 0)), a) }, _round: function (a) { if (this._steps === !1) return a; for (var b, c, d = this.options.bounds.max.valueOf(), e = this.options.bounds.min.valueOf(), f = Math.max(0, (a - e) / (d - e)), g = Math.floor(this._steps.length * f); this._steps[g] > a; ) g--; for (; g + 1 < this._steps.length && this._steps[g + 1] <= a; ) g++; return g >= this._steps.length - 1 ? this._steps[this._steps.length - 1] : 0 === g ? this._steps[0] : (b = this._steps[g], c = this._steps[g + 1], c - a > a - b ? b : c) }, update: function () { this._createBoundsValues(), this._createSteps(), a.ui.rangeSliderHandle.prototype.update.apply(this) }, add: function (a, b) { return this._addStep(new Date(a), 1, b).valueOf() }, substract: function (a, b) { return this._addStep(new Date(a), -1, b).valueOf() }, stepsBetween: function (a, b) { if (this.options.step === !1) return b - a; var c = Math.min(a, b), d = Math.max(a, b), e = 0, f = !1, g = a > b; for (this.add(c, this.options.step) - c < 0 && (f = !0); d > c; ) f ? d = this.add(d, this.options.step) : c = this.add(c, this.options.step), e++; return g ? -e : e }, multiplyStep: function (a, b) { var c = {}; for (var d in a) a.hasOwnProperty(d) && (c[d] = a[d] * b); return c }, stepRatio: function () { if (this.options.step === !1) return 1; var a = this._steps.length; return this.cache.parent.width / a } }) } (jQuery), function (a) { "use strict"; a.widget("ui.editRangeSlider", a.ui.rangeSlider, { options: { type: "text", round: 1 }, _create: function () { a.ui.rangeSlider.prototype._create.apply(this), this.element.addClass("ui-editRangeSlider") }, destroy: function () { this.element.removeClass("ui-editRangeSlider"), a.ui.rangeSlider.prototype.destroy.apply(this) }, _setOption: function (b, c) { ("type" === b || "step" === b) && this._setLabelOption(b, c), "type" === b && (this.options[b] = null === this.labels.left ? c : this._leftLabel("option", b)), a.ui.rangeSlider.prototype._setOption.apply(this, [b, c]) }, _setLabelOption: function (a, b) { null !== this.labels.left && (this._leftLabel("option", a, b), this._rightLabel("option", a, b)) }, _labelType: function () { return "editRangeSliderLabel" }, _createLabel: function (b, c) { var d = a.ui.rangeSlider.prototype._createLabel.apply(this, [b, c]); return null === b && d.bind("valueChange", a.proxy(this._onValueChange, this)), d }, _addPropertiesToParameter: function (a) { return a.type = this.options.type, a.step = this.options.step, a.id = this.element.attr("id"), a }, _getLabelConstructorParameters: function (b, c) { var d = a.ui.rangeSlider.prototype._getLabelConstructorParameters.apply(this, [b, c]); return this._addPropertiesToParameter(d) }, _getLabelRefreshParameters: function (b, c) { var d = a.ui.rangeSlider.prototype._getLabelRefreshParameters.apply(this, [b, c]); return this._addPropertiesToParameter(d) }, _onValueChange: function (a, b) { var c = !1; c = b.isLeft ? this._values.min !== this.min(b.value) : this._values.max !== this.max(b.value), c && this._trigger("userValuesChanged") } }) } (jQuery), function (a) { "use strict"; a.widget("ui.editRangeSliderLabel", a.ui.rangeSliderLabel, { options: { type: "text", step: !1, id: "" }, _input: null, _text: "", _create: function () { a.ui.rangeSliderLabel.prototype._create.apply(this), this._createInput() }, _setOption: function (b, c) { "type" === b ? this._setTypeOption(c) : "step" === b && this._setStepOption(c), a.ui.rangeSliderLabel.prototype._setOption.apply(this, [b, c]) }, _createInput: function () { this._input = a("<input type='" + this.options.type + "' />").addClass("ui-editRangeSlider-inputValue").appendTo(this._valueContainer), this._setInputName(), this._input.bind("keyup", a.proxy(this._onKeyUp, this)), this._input.blur(a.proxy(this._onChange, this)), "number" === this.options.type && (this.options.step !== !1 && this._input.attr("step", this.options.step), this._input.click(a.proxy(this._onChange, this))), this._input.val(this._text) }, _setInputName: function () { var a = this.options.isLeft ? "left" : "right"; this._input.attr("name", this.options.id + a) }, _onSwitch: function (b, c) { a.ui.rangeSliderLabel.prototype._onSwitch.apply(this, [b, c]), this._setInputName() }, _destroyInput: function () { this._input.remove(), this._input = null }, _onKeyUp: function (a) { return 13 === a.which ? (this._onChange(a), !1) : void 0 }, _onChange: function () { var a = this._returnCheckedValue(this._input.val()); a !== !1 && this._triggerValue(a) }, _triggerValue: function (a) { var b = this.options.handle[this.options.handleType]("option", "isLeft"); this.element.trigger("valueChange", [{ isLeft: b, value: a}]) }, _returnCheckedValue: function (a) { var b = parseFloat(a); return isNaN(b) || isNaN(Number(a)) ? !1 : b }, _setTypeOption: function (a) { "text" !== a && "number" !== a || this.options.type === a || (this._destroyInput(), this.options.type = a, this._createInput()) }, _setStepOption: function (a) { this.options.step = a, "number" === this.options.type && this._input.attr("step", a !== !1 ? a : "any") }, _displayText: function (a) { this._input.val(a), this._text = a }, enable: function () { a.ui.rangeSliderLabel.prototype.enable.apply(this), this._input.attr("disabled", null) }, disable: function () { a.ui.rangeSliderLabel.prototype.disable.apply(this), this._input.attr("disabled", "disabled") } }) } (jQuery);
//END Trisept.UI.Web.Shell.jQAllRangeSliders-min.js
//START Trisept.UI.Web.Shell.jQAllRangeSliders_accessibility.js
//Functions to make JQRangeSlider accessible.  Call ApplySliderAccessibility() once after registering plugin and UpdateSliderAccessibility() after changing slider bounds.

function ApplySliderAccessibility(sliderId, sliderType, minLabelText, maxLabelText, largeStepSize) {
    var slider = $("#" + sliderId);

    //Hide draggable bar
    var bar = slider.find(".ui-rangeSlider-container");
    bar.attr("aria-hidden", "true");

    //Make handles accessible
    var minHandle = slider.find(".ui-rangeSlider-leftLabel");
    minHandle.attr("tabindex", 0);
    minHandle.attr("role", "slider");
    minHandle.attr("aria-orientation", "horizontal");
    minHandle.attr("aria-label", minLabelText);

    var maxHandle = slider.find(".ui-rangeSlider-rightLabel");
    maxHandle.attr("tabindex", 0);
    maxHandle.attr("role", "slider");
    maxHandle.attr("aria-orientation", "horizontal");
    maxHandle.attr("aria-label", maxLabelText);

    //Add key handling
    minHandle.on("keydown", function (e) {
        HandleSliderKeyDown(e, slider, sliderType, minHandle, "min", largeStepSize);
    });
    minHandle.on("keyup", function (e) {
        HandleSliderKeyUp(e, sliderType);
    });    
    maxHandle.on("keydown", function (e) {
        HandleSliderKeyDown(e, slider, sliderType, maxHandle, "max", largeStepSize);
    });
    maxHandle.on("keyup", function (e) {
        HandleSliderKeyUp(e, sliderType);
    });

    UpdateSliderAccessibility(slider, sliderType);  //Start with updated ARIA
    slider.on("valuesChanged", function (e, data) {
        UpdateSliderAccessibility(slider, sliderType);  //Keep ARIA updated when values change
    }); 
}

//Update ARIA attributes for slider to match current values and bounds.
function UpdateSliderAccessibility(slider, sliderType) {

    var minHandle = slider.find(".ui-rangeSlider-leftLabel");
    minHandle.attr("aria-valuemin", slider.rangeSlider("bounds").min);
    minHandle.attr("aria-valuemax", slider.rangeSlider("values").max - slider.rangeSlider("option", "step"));
    minHandle.attr("aria-valuenow", slider.rangeSlider("values").min);
    minHandle.attr("aria-valuetext", minHandle.find(".ui-rangeSlider-label-value").html());

    var maxHandle = slider.find(".ui-rangeSlider-rightLabel");
    maxHandle.attr("aria-valuemin", slider.rangeSlider("values").min + slider.rangeSlider("option", "step"));
    maxHandle.attr("aria-valuemax", slider.rangeSlider("bounds").max);
    maxHandle.attr("aria-valuenow", slider.rangeSlider("values").max);
    maxHandle.attr("aria-valuetext", maxHandle.find(".ui-rangeSlider-label-value").html());
}

//Handle slider movement based on key
function HandleSliderKeyDown(e, slider, sliderType, handle, handleType, largeStepSize) {
    var keyCode = e.keyCode || e.which;
    if (keyCode >= 33 && keyCode <= 40) {
        e.preventDefault();

        var oldValue;
        if (handleType == "min") {
            oldValue = slider.rangeSlider("values").min;
        }
        else {
            oldValue = slider.rangeSlider("values").max;
        }

        var newValue;
        if (keyCode == 39 || keyCode == 40) {  //Right/Down
            newValue = oldValue + slider.rangeSlider("option", "step");
        }
        if (keyCode == 37 || keyCode == 38) {  //Left/Up
            newValue = oldValue - slider.rangeSlider("option", "step");
        }
        if (keyCode == 34) {	//PgDn
            newValue = oldValue + largeStepSize;
        }
        if (keyCode == 33) {	//PgUp
            newValue = oldValue - largeStepSize;
        }
        if (keyCode == 36) {	//Home
            if (handleType == "min") {
                newValue = slider.rangeSlider("bounds").min;
            }
            else {
                newValue = slider.rangeSlider("values").min + slider.rangeSlider("option", "step");
            }
        }
        if (keyCode == 35) {	//End
            if (handleType == "min") {
                newValue = slider.rangeSlider("values").max - slider.rangeSlider("option", "step");
            }
            else {
                newValue = slider.rangeSlider("bounds").max;
            }
        }

        if (handleType == "min") {
            slider.rangeSlider("values", newValue, slider.rangeSlider("values").max);
            handle.attr("aria-valuenow", slider.rangeSlider("values").min);
        }
        else {
            if (newValue == slider.rangeSlider("values").min) {
                newValue = newValue + slider.rangeSlider("option", "step");   
            }
            slider.rangeSlider("values", slider.rangeSlider("values").min, newValue);
            handle.attr("aria-valuenow", slider.rangeSlider("values").max);
        }

        if (sliderType == "price") {
            if (typeof (availDisplay.PriceSliderValuesChanging) == "function") {
                availDisplay.PriceSliderValuesChanging();
            }
        }
        else if (sliderType == "landmark") {
            if (typeof (availDisplay.LandmarkSliderValuesChanging) == "function") {
                availDisplay.LandmarkSliderValuesChanging();
            }
        }
    }
}

//Update appropriate filters when slider key released.
function HandleSliderKeyUp(e, sliderType) {
    var keyCode = e.keyCode || e.which;
    if (keyCode >= 33 && keyCode <= 40) {
        if (sliderType == "price") {
            availDisplay.PriceSliderValuesChanged();
        }
        else if (sliderType == "landmark") {
            availDisplay.LandmarkSliderValuesChanged();
        }
    }
}
//END Trisept.UI.Web.Shell.jQAllRangeSliders_accessibility.js
//START Trisept.UI.Web.Shell.jquery.number.min.js
/*! jQuery number 2.1.3 (c) github.com/teamdf/jquery-number | opensource.teamdf.com/license */
(function (h) {
    function r(f, a) { if (this.createTextRange) { var c = this.createTextRange(); c.collapse(true); c.moveStart("character", f); c.moveEnd("character", a - f); c.select() } else if (this.setSelectionRange) { this.focus(); this.setSelectionRange(f, a) } } function s(f) {
        var a = this.value.length; f = f.toLowerCase() == "start" ? "Start" : "End"; if (document.selection) {
            a = document.selection.createRange(); var c; c = a.duplicate(); c.expand("textedit"); c.setEndPoint("EndToEnd", a); c = c.text.length - a.text.length; a = c + a.text.length; return f ==
"Start" ? c : a
        } else if (typeof this["selection" + f] != "undefined") a = this["selection" + f]; return a
    } var q = { codes: { 188: 44, 109: 45, 190: 46, 191: 47, 192: 96, 220: 92, 222: 39, 221: 93, 219: 91, 173: 45, 187: 61, 186: 59, 189: 45, 110: 46 }, shifts: { 96: "~", 49: "!", 50: "@", 51: "#", 52: "$", 53: "%", 54: "^", 55: "&", 56: "*", 57: "(", 48: ")", 45: "_", 61: "+", 91: "{", 93: "}", 92: "|", 59: ":", 39: '"', 44: "<", 46: ">", 47: "?"} }; h.fn.number = function (f, a, c, k) {
        k = typeof k === "undefined" ? "," : k; c = typeof c === "undefined" ? "." : c; a = typeof a === "undefined" ? 0 : a; var j = "\\u" + ("0000" +
c.charCodeAt(0).toString(16)).slice(-4), o = RegExp("[^" + j + "0-9]", "g"), p = RegExp(j, "g"); if (f === true) return this.is("input:text") ? this.on({ "keydown.format": function (b) {
    var d = h(this), e = d.data("numFormat"), g = b.keyCode ? b.keyCode : b.which, m = "", i = s.apply(this, ["start"]), n = s.apply(this, ["end"]), l = ""; l = false; if (q.codes.hasOwnProperty(g)) g = q.codes[g]; if (!b.shiftKey && g >= 65 && g <= 90) g += 32; else if (!b.shiftKey && g >= 69 && g <= 105) g -= 48; else if (b.shiftKey && q.shifts.hasOwnProperty(g)) m = q.shifts[g]; if (m == "") m = String.fromCharCode(g);
    if (g !== 8 && m != c && !m.match(/[0-9]/)) { d = b.keyCode ? b.keyCode : b.which; if (d == 46 || d == 8 || d == 9 || d == 27 || d == 13 || (d == 65 || d == 82) && (b.ctrlKey || b.metaKey) === true || (d == 86 || d == 67) && (b.ctrlKey || b.metaKey) === true || d >= 35 && d <= 39) return; b.preventDefault(); return false } if (i == 0 && n == this.value.length || d.val() == 0) if (g === 8) { i = n = 1; this.value = ""; e.init = a > 0 ? -1 : 0; e.c = a > 0 ? -(a + 1) : 0; r.apply(this, [0, 0]) } else if (m === c) { i = n = 1; this.value = "0" + c + Array(a + 1).join("0"); e.init = a > 0 ? 1 : 0; e.c = a > 0 ? -(a + 1) : 0 } else {
        if (this.value.length === 0) {
            e.init =
a > 0 ? -1 : 0; e.c = a > 0 ? -a : 0
        } 
    } else e.c = n - this.value.length; if (a > 0 && m == c && i == this.value.length - a - 1) { e.c++; e.init = Math.max(0, e.init); b.preventDefault(); l = this.value.length + e.c } else if (m == c) { e.init = Math.max(0, e.init); b.preventDefault() } else if (a > 0 && g == 8 && i == this.value.length - a) { b.preventDefault(); e.c--; l = this.value.length + e.c } else if (a > 0 && g == 8 && i > this.value.length - a) {
        if (this.value === "") return; if (this.value.slice(i - 1, i) != "0") {
            l = this.value.slice(0, i - 1) + "0" + this.value.slice(i); d.val(l.replace(o, "").replace(p,
c))
        } b.preventDefault(); e.c--; l = this.value.length + e.c
    } else if (g == 8 && this.value.slice(i - 1, i) == k) { b.preventDefault(); e.c--; l = this.value.length + e.c } else if (a > 0 && i == n && this.value.length > a + 1 && i > this.value.length - a - 1 && isFinite(+m) && !b.metaKey && !b.ctrlKey && !b.altKey && m.length === 1) { this.value = l = n === this.value.length ? this.value.slice(0, i - 1) : this.value.slice(0, i) + this.value.slice(i + 1); l = i } l !== false && r.apply(this, [l, l]); d.data("numFormat", e)
}, "keyup.format": function (b) {
    var d = h(this), e = d.data("numFormat"); b = b.keyCode ?
b.keyCode : b.which; var g = s.apply(this, ["start"]); if (!(this.value === "" || (b < 48 || b > 57) && (b < 96 || b > 105) && b !== 8)) { d.val(d.val()); if (a > 0) if (e.init < 1) { g = this.value.length - a - (e.init < 0 ? 1 : 0); e.c = g - this.value.length; e.init = 1; d.data("numFormat", e) } else if (g > this.value.length - a && b != 8) { e.c++; d.data("numFormat", e) } d = this.value.length + e.c; r.apply(this, [d, d]) } 
}, "paste.format": function (b) {
    var d = h(this), e = b.originalEvent, g = null; if (window.clipboardData && window.clipboardData.getData) g = window.clipboardData.getData("Text");
    else if (e.clipboardData && e.clipboardData.getData) g = e.clipboardData.getData("text/plain"); d.val(g); b.preventDefault(); return false
} 
}).each(function () { var b = h(this).data("numFormat", { c: -(a + 1), decimals: a, thousands_sep: k, dec_point: c, regex_dec_num: o, regex_dec: p, init: false }); this.value !== "" && b.val(b.val()) }) : this.each(function () { var b = h(this), d = +b.text().replace(o, "").replace(p, "."); b.number(!isFinite(d) ? 0 : +d, a, c, k) }); return this.text(h.number.apply(window, arguments))
    }; var t = null, u = null; if (h.isPlainObject(h.valHooks.text)) {
        if (h.isFunction(h.valHooks.text.get)) t =
h.valHooks.text.get; if (h.isFunction(h.valHooks.text.set)) u = h.valHooks.text.set
    } else h.valHooks.text = {}; h.valHooks.text.get = function (f) { var a = h(f).data("numFormat"); if (a) { if (f.value === "") return ""; f = +f.value.replace(a.regex_dec_num, "").replace(a.regex_dec, "."); return "" + (isFinite(f) ? f : 0) } else if (h.isFunction(t)) return t(f) }; h.valHooks.text.set = function (f, a) { var c = h(f).data("numFormat"); if (c) return f.value = h.number(a, c.decimals, c.dec_point, c.thousands_sep); else if (h.isFunction(u)) return u(f, a) }; h.number =
function (f, a, c, k) {
    k = typeof k === "undefined" ? "," : k; c = typeof c === "undefined" ? "." : c; a = !isFinite(+a) ? 0 : Math.abs(a); var j = "\\u" + ("0000" + c.charCodeAt(0).toString(16)).slice(-4), o = "\\u" + ("0000" + k.charCodeAt(0).toString(16)).slice(-4); f = (f + "").replace(".", c).replace(RegExp(o, "g"), "").replace(RegExp(j, "g"), ".").replace(RegExp("[^0-9+-Ee.]", "g"), ""); f = !isFinite(+f) ? 0 : +f; j = ""; j = function (p, b) { var d = Math.pow(10, b); return "" + Math.round(p * d) / d }; j = (a ? j(f, a) : "" + Math.round(f)).split("."); if (j[0].length > 3) j[0] = j[0].replace(/\B(?=(?:\d{3})+(?!\d))/g,
k); if ((j[1] || "").length < a) { j[1] = j[1] || ""; j[1] += Array(a - j[1].length + 1).join("0") } return j.join(c)
} 
})(jQuery);
//END Trisept.UI.Web.Shell.jquery.number.min.js
//START Trisept.UI.Web.Shell.mbox_trisept.js
var mboxCopyright = "Copyright 1996-2011. Adobe Systems Incorporated. All rights reserved."; mboxUrlBuilder = function (a, b) { this.a = a; this.b = b; this.c = new Array(); this.d = function (e) { return e; }; this.f = null; }; mboxUrlBuilder.prototype.addParameter = function (g, h) { var i = new RegExp('(\'|")'); if (i.exec(g)) { throw "Parameter '" + g + "' contains invalid characters"; } for (var j = 0; j < this.c.length; j++) { var k = this.c[j]; if (k.name == g) { k.value = h; return this; } } var l = new Object(); l.name = g; l.value = h; this.c[this.c.length] = l; return this; }; mboxUrlBuilder.prototype.addParameters = function (c) { if (!c) { return this; } for (var j = 0; j < c.length; j++) { var m = c[j].indexOf('='); if (m == -1 || m == 0) { continue; } this.addParameter(c[j].substring(0, m), c[j].substring(m + 1, c[j].length)); } return this; }; mboxUrlBuilder.prototype.setServerType = function (n) { this.o = n; }; mboxUrlBuilder.prototype.setBasePath = function (f) { this.f = f; }; mboxUrlBuilder.prototype.setUrlProcessAction = function (p) { this.d = p; }; mboxUrlBuilder.prototype.buildUrl = function () { var q = this.f ? this.f : '/m2/' + this.b + '/mbox/' + this.o; var r = document.location.protocol == 'file:' ? 'http:' : document.location.protocol; var e = r + "//" + this.a + q; var s = e.indexOf('?') != -1 ? '&' : '?'; for (var j = 0; j < this.c.length; j++) { var k = this.c[j]; e += s + encodeURIComponent(k.name) + '=' + encodeURIComponent(k.value); s = '&'; } return this.t(this.d(e)); }; mboxUrlBuilder.prototype.getParameters = function () { return this.c; }; mboxUrlBuilder.prototype.setParameters = function (c) { this.c = c; }; mboxUrlBuilder.prototype.clone = function () { var u = new mboxUrlBuilder(this.a, this.b); u.setServerType(this.o); u.setBasePath(this.f); u.setUrlProcessAction(this.d); for (var j = 0; j < this.c.length; j++) { u.addParameter(this.c[j].name, this.c[j].value); } return u; }; mboxUrlBuilder.prototype.t = function (v) { return v.replace(/\"/g, '&quot;').replace(/>/g, '&gt;'); }; mboxStandardFetcher = function () { }; mboxStandardFetcher.prototype.getType = function () { return 'standard'; }; mboxStandardFetcher.prototype.fetch = function (w) { w.setServerType(this.getType()); document.write('<' + 'scr' + 'ipt src="' + w.buildUrl() + '" language="JavaScript"><' + '\/scr' + 'ipt>'); }; mboxStandardFetcher.prototype.cancel = function () { }; mboxAjaxFetcher = function () { }; mboxAjaxFetcher.prototype.getType = function () { return 'ajax'; }; mboxAjaxFetcher.prototype.fetch = function (w) { w.setServerType(this.getType()); var e = w.buildUrl(); this.x = document.createElement('script'); this.x.src = e; document.body.appendChild(this.x); }; mboxAjaxFetcher.prototype.cancel = function () { }; mboxMap = function () { this.y = new Object(); this.z = new Array(); }; mboxMap.prototype.put = function (A, h) { if (!this.y[A]) { this.z[this.z.length] = A; } this.y[A] = h; }; mboxMap.prototype.get = function (A) { return this.y[A]; }; mboxMap.prototype.remove = function (A) { this.y[A] = undefined; }; mboxMap.prototype.each = function (p) { for (var j = 0; j < this.z.length; j++) { var A = this.z[j]; var h = this.y[A]; if (h) { var B = p(A, h); if (B === false) { break; } } } }; mboxFactory = function (C, b, D) { this.E = false; this.C = C; this.D = D; this.F = new mboxList(); mboxFactories.put(D, this); this.G = typeof document.createElement('div').replaceChild != 'undefined' && (function () { return true; })() && typeof document.getElementById != 'undefined' && typeof (window.attachEvent || document.addEventListener || window.addEventListener) != 'undefined' && typeof encodeURIComponent != 'undefined'; this.H = this.G && mboxGetPageParameter('mboxDisable') == null; var I = D == 'default'; this.J = new mboxCookieManager('mbox' + (I ? '' : ('-' + D)), (function () { return mboxCookiePageDomain(); })()); this.H = this.H && this.J.isEnabled() && (this.J.getCookie('disable') == null); if (this.isAdmin()) { this.enable(); } this.K(); this.L = mboxGenerateId(); this.M = mboxScreenHeight(); this.N = mboxScreenWidth(); this.O = mboxBrowserWidth(); this.P = mboxBrowserHeight(); this.Q = mboxScreenColorDepth(); this.R = mboxBrowserTimeOffset(); this.S = new mboxSession(this.L, 'mboxSession', 'session', 31 * 60, this.J); this.T = new mboxPC('PC', 1209600, this.J); this.w = new mboxUrlBuilder(C, b); this.U(this.w, I); this.V = new Date().getTime(); this.W = this.V; var X = this; this.addOnLoad(function () { X.W = new Date().getTime(); }); if (this.G) { this.addOnLoad(function () { X.E = true; X.getMboxes().each(function (Y) { Y.setFetcher(new mboxAjaxFetcher()); Y.finalize(); }); }); this.limitTraffic(100, 10368000); if (this.H) { this.Z(); this._ = new mboxSignaler(function (ab, c) { return X.create(ab, c); }, this.J); } } }; mboxFactory.prototype.isEnabled = function () { return this.H; }; mboxFactory.prototype.getDisableReason = function () { return this.J.getCookie('disable'); }; mboxFactory.prototype.isSupported = function () { return this.G; }; mboxFactory.prototype.disable = function (bb, cb) { if (typeof bb == 'undefined') { bb = 60 * 60; } if (typeof cb == 'undefined') { cb = 'unspecified'; } if (!this.isAdmin()) { this.H = false; this.J.setCookie('disable', cb, bb); } }; mboxFactory.prototype.enable = function () { this.H = true; this.J.deleteCookie('disable'); }; mboxFactory.prototype.isAdmin = function () { return document.location.href.indexOf('mboxEnv') != -1; }; mboxFactory.prototype.limitTraffic = function (db, bb) { }; mboxFactory.prototype.addOnLoad = function (eb) { if (this.isDomLoaded()) { eb(); } else { var fb = false; var gb = function () { if (fb) { return; } fb = true; eb(); }; this.hb.push(gb); if (this.isDomLoaded() && !fb) { gb(); } } }; mboxFactory.prototype.getEllapsedTime = function () { return this.W - this.V; }; mboxFactory.prototype.getEllapsedTimeUntil = function (ib) { return ib - this.V; }; mboxFactory.prototype.getMboxes = function () { return this.F; }; mboxFactory.prototype.get = function (ab, jb) { return this.F.get(ab).getById(jb || 0); }; mboxFactory.prototype.update = function (ab, c) { if (!this.isEnabled()) { return; } if (!this.isDomLoaded()) { var X = this; this.addOnLoad(function () { X.update(ab, c); }); return; } if (this.F.get(ab).length() == 0) { throw "Mbox " + ab + " is not defined"; } this.F.get(ab).each(function (Y) { Y.getUrlBuilder().addParameter('mboxPage', mboxGenerateId()); Y.load(c); }); }; mboxFactory.prototype.create = function (ab, c, kb) { if (!this.isSupported()) { return null; } var e = this.w.clone(); e.addParameter('mboxCount', this.F.length() + 1); e.addParameters(c); var jb = this.F.get(ab).length(); var lb = this.D + '-' + ab + '-' + jb; var mb; if (kb) { mb = new mboxLocatorNode(kb); } else { if (this.E) { throw 'The page has already been loaded, can\'t write marker'; } mb = new mboxLocatorDefault(lb); } try { var X = this; var nb = 'mboxImported-' + lb; var Y = new mbox(ab, jb, e, mb, nb); if (this.H) { Y.setFetcher(this.E ? new mboxAjaxFetcher() : new mboxStandardFetcher()); } Y.setOnError(function (ob, n) { Y.setMessage(ob); Y.activate(); if (!Y.isActivated()) { X.disable(60 * 60, ob); window.location.reload(false); } }); this.F.add(Y); } catch (pb) { this.disable(); throw 'Failed creating mbox "' + ab + '", the error was: ' + pb; } var qb = new Date(); e.addParameter('mboxTime', qb.getTime() - (qb.getTimezoneOffset() * 60000)); return Y; }; mboxFactory.prototype.getCookieManager = function () { return this.J; }; mboxFactory.prototype.getPageId = function () { return this.L; }; mboxFactory.prototype.getPCId = function () { return this.T; }; mboxFactory.prototype.getSessionId = function () { return this.S; }; mboxFactory.prototype.getSignaler = function () { return this._; }; mboxFactory.prototype.getUrlBuilder = function () { return this.w; }; mboxFactory.prototype.U = function (e, I) { e.addParameter('mboxHost', document.location.hostname).addParameter('mboxSession', this.S.getId()); if (!I) { e.addParameter('mboxFactoryId', this.D); } if (this.T.getId() != null) { e.addParameter('mboxPC', this.T.getId()); } e.addParameter('mboxPage', this.L); e.addParameter('screenHeight', this.M); e.addParameter('screenWidth', this.N); e.addParameter('browserWidth', this.O); e.addParameter('browserHeight', this.P); e.addParameter('browserTimeOffset', this.R); e.addParameter('colorDepth', this.Q); e.setUrlProcessAction(function (e) { e += '&mboxURL=' + encodeURIComponent(document.location); var rb = encodeURIComponent(document.referrer); if (e.length + rb.length < 2000) { e += '&mboxReferrer=' + rb; } e += '&mboxVersion=' + mboxVersion; return e; }); }; mboxFactory.prototype.sb = function () { return ""; }; mboxFactory.prototype.Z = function () { document.write('<style>.' + 'mboxDefault' + ' { visibility:hidden; }</style>'); }; mboxFactory.prototype.isDomLoaded = function () { return this.E; }; mboxFactory.prototype.K = function () { if (this.hb != null) { return; } this.hb = new Array(); var X = this; (function () { var tb = document.addEventListener ? "DOMContentLoaded" : "onreadystatechange"; var ub = false; var vb = function () { if (ub) { return; } ub = true; for (var i = 0; i < X.hb.length; ++i) { X.hb[i](); } }; if (document.addEventListener) { document.addEventListener(tb, function () { document.removeEventListener(tb, arguments.callee, false); vb(); }, false); window.addEventListener("load", function () { document.removeEventListener("load", arguments.callee, false); vb(); }, false); } else if (document.attachEvent) { if (self !== self.top) { document.attachEvent(tb, function () { if (document.readyState === 'complete') { document.detachEvent(tb, arguments.callee); vb(); } }); } else { var wb = function () { try { document.documentElement.doScroll('left'); vb(); } catch (xb) { setTimeout(wb, 13); } }; wb(); } } if (document.readyState === "complete") { vb(); } })(); }; mboxSignaler = function (yb, J) { this.J = J; var zb = J.getCookieNames('signal-'); for (var j = 0; j < zb.length; j++) { var Ab = zb[j]; var Bb = J.getCookie(Ab).split('&'); var Y = yb(Bb[0], Bb); Y.load(); J.deleteCookie(Ab); } }; mboxSignaler.prototype.signal = function (Cb, ab) { this.J.setCookie('signal-' + Cb, mboxShiftArray(arguments).join('&'), 45 * 60); }; mboxList = function () { this.F = new Array(); }; mboxList.prototype.add = function (Y) { if (Y != null) { this.F[this.F.length] = Y; } }; mboxList.prototype.get = function (ab) { var B = new mboxList(); for (var j = 0; j < this.F.length; j++) { var Y = this.F[j]; if (Y.getName() == ab) { B.add(Y); } } return B; }; mboxList.prototype.getById = function (Db) { return this.F[Db]; }; mboxList.prototype.length = function () { return this.F.length; }; mboxList.prototype.each = function (p) { if (typeof p != 'function') { throw 'Action must be a function, was: ' + typeof (p); } for (var j = 0; j < this.F.length; j++) { p(this.F[j]); } }; mboxLocatorDefault = function (g) { this.g = 'mboxMarker-' + g; document.write('<div id="' + this.g + '" style="visibility:hidden;display:none">&nbsp;</div>'); }; mboxLocatorDefault.prototype.locate = function () { var Eb = document.getElementById(this.g); while (Eb != null) { if (Eb.nodeType == 1) { if (Eb.className == 'mboxDefault') { return Eb; } } Eb = Eb.previousSibling; } return null; }; mboxLocatorDefault.prototype.force = function () { var Fb = document.createElement('div'); Fb.className = 'mboxDefault'; var Gb = document.getElementById(this.g); Gb.parentNode.insertBefore(Fb, Gb); return Fb; }; mboxLocatorNode = function (Hb) { this.Eb = Hb; }; mboxLocatorNode.prototype.locate = function () { return typeof this.Eb == 'string' ? document.getElementById(this.Eb) : this.Eb; }; mboxLocatorNode.prototype.force = function () { return null; }; mboxCreate = function (ab) { var Y = mboxFactoryDefault.create(ab, mboxShiftArray(arguments)); if (Y) { Y.load(); } return Y; }; mboxDefine = function (kb, ab) { var Y = mboxFactoryDefault.create(ab, mboxShiftArray(mboxShiftArray(arguments)), kb); return Y; }; mboxUpdate = function (ab) { mboxFactoryDefault.update(ab, mboxShiftArray(arguments)); }; mbox = function (g, Ib, w, Jb, nb) { this.Kb = null; this.Lb = 0; this.mb = Jb; this.nb = nb; this.Mb = null; this.Nb = new mboxOfferContent(); this.Fb = null; this.w = w; this.message = ''; this.Ob = new Object(); this.Pb = 0; this.Ib = Ib; this.g = g; this.Qb(); w.addParameter('mbox', g).addParameter('mboxId', Ib); this.Rb = function () { }; this.Sb = function () { }; this.Tb = null; }; mbox.prototype.getId = function () { return this.Ib; }; mbox.prototype.Qb = function () { if (this.g.length > 250) { throw "Mbox Name " + this.g + " exceeds max length of " + "250 characters."; } else if (this.g.match(/^\s+|\s+$/g)) { throw "Mbox Name " + this.g + " has leading/trailing whitespace(s)."; } }; mbox.prototype.getName = function () { return this.g; }; mbox.prototype.getParameters = function () { var c = this.w.getParameters(); var B = new Array(); for (var j = 0; j < c.length; j++) { if (c[j].name.indexOf('mbox') != 0) { B[B.length] = c[j].name + '=' + c[j].value; } } return B; }; mbox.prototype.setOnLoad = function (p) { this.Sb = p; return this; }; mbox.prototype.setMessage = function (ob) { this.message = ob; return this; }; mbox.prototype.setOnError = function (Rb) { this.Rb = Rb; return this; }; mbox.prototype.setFetcher = function (Ub) { if (this.Mb) { this.Mb.cancel(); } this.Mb = Ub; return this; }; mbox.prototype.getFetcher = function () { return this.Mb; }; mbox.prototype.load = function (c) { if (this.Mb == null) { return this; } this.setEventTime("load.start"); this.cancelTimeout(); this.Lb = 0; var w = (c && c.length > 0) ? this.w.clone().addParameters(c) : this.w; this.Mb.fetch(w); var X = this; this.Vb = setTimeout(function () { X.Rb('browser timeout', X.Mb.getType()); }, 15000); this.setEventTime("load.end"); return this; }; mbox.prototype.loaded = function () { this.cancelTimeout(); if (!this.activate()) { var X = this; setTimeout(function () { X.loaded(); }, 100); } }; mbox.prototype.activate = function () { if (this.Lb) { return this.Lb; } this.setEventTime('activate' + ++this.Pb + '.start'); if (this.show()) { this.cancelTimeout(); this.Lb = 1; } this.setEventTime('activate' + this.Pb + '.end'); return this.Lb; }; mbox.prototype.isActivated = function () { return this.Lb; }; mbox.prototype.setOffer = function (Nb) { if (Nb && Nb.show && Nb.setOnLoad) { this.Nb = Nb; } else { throw 'Invalid offer'; } return this; }; mbox.prototype.getOffer = function () { return this.Nb; }; mbox.prototype.show = function () { this.setEventTime('show.start'); var B = this.Nb.show(this); this.setEventTime(B == 1 ? "show.end.ok" : "show.end"); return B; }; mbox.prototype.showContent = function (Wb) { if (Wb == null) { return 0; } if (this.Fb == null || !this.Fb.parentNode) { this.Fb = this.getDefaultDiv(); if (this.Fb == null) { return 0; } } if (this.Fb != Wb) { this.Xb(this.Fb); this.Fb.parentNode.replaceChild(Wb, this.Fb); this.Fb = Wb; } this.Yb(Wb); this.Sb(); return 1; }; mbox.prototype.hide = function () { this.setEventTime('hide.start'); var B = this.showContent(this.getDefaultDiv()); this.setEventTime(B == 1 ? 'hide.end.ok' : 'hide.end.fail'); return B; }; mbox.prototype.finalize = function () { this.setEventTime('finalize.start'); this.cancelTimeout(); if (this.getDefaultDiv() == null) { if (this.mb.force() != null) { this.setMessage('No default content, an empty one has been added'); } else { this.setMessage('Unable to locate mbox'); } } if (!this.activate()) { this.hide(); this.setEventTime('finalize.end.hide'); } this.setEventTime('finalize.end.ok'); }; mbox.prototype.cancelTimeout = function () { if (this.Vb) { clearTimeout(this.Vb); } if (this.Mb != null) { this.Mb.cancel(); } }; mbox.prototype.getDiv = function () { return this.Fb; }; mbox.prototype.getDefaultDiv = function () { if (this.Tb == null) { this.Tb = this.mb.locate(); } return this.Tb; }; mbox.prototype.setEventTime = function (Zb) { this.Ob[Zb] = (new Date()).getTime(); }; mbox.prototype.getEventTimes = function () { return this.Ob; }; mbox.prototype.getImportName = function () { return this.nb; }; mbox.prototype.getURL = function () { return this.w.buildUrl(); }; mbox.prototype.getUrlBuilder = function () { return this.w; }; mbox.prototype._b = function (Fb) { return Fb.style.display != 'none'; }; mbox.prototype.Yb = function (Fb) { this.ac(Fb, true); }; mbox.prototype.Xb = function (Fb) { this.ac(Fb, false); }; mbox.prototype.ac = function (Fb, bc) { Fb.style.visibility = bc ? "visible" : "hidden"; Fb.style.display = bc ? "block" : "none"; }; mboxOfferContent = function () { this.Sb = function () { }; }; mboxOfferContent.prototype.show = function (Y) { var B = Y.showContent(document.getElementById(Y.getImportName())); if (B == 1) { this.Sb(); } return B; }; mboxOfferContent.prototype.setOnLoad = function (Sb) { this.Sb = Sb; }; mboxOfferAjax = function (Wb) { this.Wb = Wb; this.Sb = function () { }; }; mboxOfferAjax.prototype.setOnLoad = function (Sb) { this.Sb = Sb; }; mboxOfferAjax.prototype.show = function (Y) { var cc = document.createElement('div'); cc.id = Y.getImportName(); cc.innerHTML = this.Wb; var B = Y.showContent(cc); if (B == 1) { this.Sb(); } return B; }; mboxOfferDefault = function () { this.Sb = function () { }; }; mboxOfferDefault.prototype.setOnLoad = function (Sb) { this.Sb = Sb; }; mboxOfferDefault.prototype.show = function (Y) { var B = Y.hide(); if (B == 1) { this.Sb(); } return B; }; mboxCookieManager = function mboxCookieManager(g, dc) { this.g = g; this.dc = dc == '' || dc.indexOf('.') == -1 ? '' : '; domain=' + dc; this.ec = new mboxMap(); this.loadCookies(); }; mboxCookieManager.prototype.isEnabled = function () { this.setCookie('check', 'true', 60); this.loadCookies(); return this.getCookie('check') == 'true'; }; mboxCookieManager.prototype.setCookie = function (g, h, bb) { if (typeof g != 'undefined' && typeof h != 'undefined' && typeof bb != 'undefined') { var fc = new Object(); fc.name = g; fc.value = escape(h); fc.expireOn = Math.ceil(bb + new Date().getTime() / 1000); this.ec.put(g, fc); this.saveCookies(); } }; mboxCookieManager.prototype.getCookie = function (g) { var fc = this.ec.get(g); return fc ? unescape(fc.value) : null; }; mboxCookieManager.prototype.deleteCookie = function (g) { this.ec.remove(g); this.saveCookies(); }; mboxCookieManager.prototype.getCookieNames = function (gc) { var hc = new Array(); this.ec.each(function (g, fc) { if (g.indexOf(gc) == 0) { hc[hc.length] = g; } }); return hc; }; mboxCookieManager.prototype.saveCookies = function () { var ic = new Array(); var jc = 0; this.ec.each(function (g, fc) { ic[ic.length] = g + '#' + fc.value + '#' + fc.expireOn; if (jc < fc.expireOn) { jc = fc.expireOn; } }); var kc = new Date(jc * 1000); document.cookie = this.g + '=' + ic.join('|') + '; expires=' + kc.toGMTString() + '; path=/' + this.dc; }; mboxCookieManager.prototype.loadCookies = function () { this.ec = new mboxMap(); var lc = document.cookie.indexOf(this.g + '='); if (lc != -1) { var mc = document.cookie.indexOf(';', lc); if (mc == -1) { mc = document.cookie.indexOf(',', lc); if (mc == -1) { mc = document.cookie.length; } } var nc = document.cookie.substring(lc + this.g.length + 1, mc).split('|'); var oc = Math.ceil(new Date().getTime() / 1000); for (var j = 0; j < nc.length; j++) { var fc = nc[j].split('#'); if (oc <= fc[2]) { var pc = new Object(); pc.name = fc[0]; pc.value = fc[1]; pc.expireOn = fc[2]; this.ec.put(pc.name, pc); } } } }; mboxSession = function (qc, rc, Ab, sc, J) { this.rc = rc; this.Ab = Ab; this.sc = sc; this.J = J; this.tc = false; this.Ib = typeof mboxForceSessionId != 'undefined' ? mboxForceSessionId : mboxGetPageParameter(this.rc); if (this.Ib == null || this.Ib.length == 0) { this.Ib = J.getCookie(Ab); if (this.Ib == null || this.Ib.length == 0) { this.Ib = qc; this.tc = true; } } J.setCookie(Ab, this.Ib, sc); }; mboxSession.prototype.getId = function () { return this.Ib; }; mboxSession.prototype.forceId = function (uc) { this.Ib = uc; this.J.setCookie(this.Ab, this.Ib, this.sc); }; mboxPC = function (Ab, sc, J) { this.Ab = Ab; this.sc = sc; this.J = J; this.Ib = typeof mboxForcePCId != 'undefined' ? mboxForcePCId : J.getCookie(Ab); if (this.Ib != null) { J.setCookie(Ab, this.Ib, sc); } }; mboxPC.prototype.getId = function () { return this.Ib; }; mboxPC.prototype.forceId = function (uc) { if (this.Ib != uc) { this.Ib = uc; this.J.setCookie(this.Ab, this.Ib, this.sc); return true; } return false; }; mboxGetPageParameter = function (g) { var B = null; var vc = new RegExp(g + "=([^\&]*)"); var wc = vc.exec(document.location); if (wc != null && wc.length >= 2) { B = wc[1]; } return B; }; mboxSetCookie = function (g, h, bb) { return mboxFactoryDefault.getCookieManager().setCookie(g, h, bb); }; mboxGetCookie = function (g) { return mboxFactoryDefault.getCookieManager().getCookie(g); }; mboxCookiePageDomain = function () { var dc = (/([^:]*)(:[0-9]{0,5})?/).exec(document.location.host)[1]; var xc = /[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}/; if (!xc.exec(dc)) { var yc = (/([^\.]+\.[^\.]{3}|[^\.]+\.[^\.]+\.[^\.]{2})$/).exec(dc); if (yc) { dc = yc[0]; } } return dc ? dc : ""; }; mboxShiftArray = function (zc) { var B = new Array(); for (var j = 1; j < zc.length; j++) { B[B.length] = zc[j]; } return B; }; mboxGenerateId = function () { return (new Date()).getTime() + "-" + Math.floor(Math.random() * 999999); }; mboxScreenHeight = function () { return screen.height; }; mboxScreenWidth = function () { return screen.width; }; mboxBrowserWidth = function () { return (window.innerWidth) ? window.innerWidth : document.documentElement ? document.documentElement.clientWidth : document.body.clientWidth; }; mboxBrowserHeight = function () { return (window.innerHeight) ? window.innerHeight : document.documentElement ? document.documentElement.clientHeight : document.body.clientHeight; }; mboxBrowserTimeOffset = function () { return -new Date().getTimezoneOffset(); }; mboxScreenColorDepth = function () { return screen.pixelDepth; }; if (typeof mboxVersion == 'undefined') { var mboxVersion = 40; var mboxFactories = new mboxMap(); var mboxFactoryDefault = new mboxFactory('trisepttechnologyllc.tt.omtrdc.net', 'trisepttechnologyllc', 'default'); }; if (mboxGetPageParameter("mboxDebug") != null || mboxFactoryDefault.getCookieManager().getCookie("debug") != null) { setTimeout(function () { if (typeof mboxDebugLoaded == 'undefined') { alert('Could not load the remote debug.\nPlease check your connection' + ' to Test&amp;Target servers'); } }, 60 * 60); document.write('<' + 'scr' + 'ipt language="Javascript1.2" src=' + '"http://admin6.testandtarget.omniture.com/admin/mbox/mbox_debug.jsp?mboxServerHost=trisepttechnologyllc.tt.omtrdc.net' + '&clientCode=trisepttechnologyllc"><' + '\/scr' + 'ipt>'); }; mboxScPluginFetcher = function (b, Ac) { this.b = b; this.Ac = Ac; }; mboxScPluginFetcher.prototype.Bc = function (w) { w.setBasePath('/m2/' + this.b + '/sc/standard'); this.Cc(w); var e = w.buildUrl(); e += '&scPluginVersion=1'; return e; }; mboxScPluginFetcher.prototype.Cc = function (w) { var Dc = ["dynamicVariablePrefix", "visitorID", "vmk", "ppu", "charSet", "visitorNamespace", "cookieDomainPeriods", "cookieLifetime", "pageName", "currencyCode", "variableProvider", "channel", "server", "pageType", "transactionID", "purchaseID", "campaign", "state", "zip", "events", "products", "linkName", "linkType", "resolution", "colorDepth", "javascriptVersion", "javaEnabled", "cookiesEnabled", "browserWidth", "browserHeight", "connectionType", "homepage", "pe", "pev1", "pev2", "pev3", "visitorSampling", "visitorSamplingGroup", "dynamicAccountSelection", "dynamicAccountList", "dynamicAccountMatch", "trackDownloadLinks", "trackExternalLinks", "trackInlineStats", "linkLeaveQueryString", "linkDownloadFileTypes", "linkExternalFilters", "linkInternalFilters", "linkTrackVars", "linkTrackEvents", "linkNames", "lnk", "eo"]; for (var j = 0; j < Dc.length; j++) { this.Ec(Dc[j], w); } for (var j = 1; j <= 75; j++) { this.Ec('prop' + j, w); this.Ec('eVar' + j, w); this.Ec('hier' + j, w); } }; mboxScPluginFetcher.prototype.Ec = function (g, w) { var h = this.Ac[g]; if (typeof (h) === 'undefined' || h === null || h === '') { return; } w.addParameter(g, h); }; mboxScPluginFetcher.prototype.cancel = function () { }; mboxStandardScPluginFetcher = function (b, Ac) { mboxScPluginFetcher.call(this, b, Ac); }; mboxStandardScPluginFetcher.prototype = new mboxScPluginFetcher; mboxStandardScPluginFetcher.prototype.getType = function () { return 'standard'; }; mboxStandardScPluginFetcher.prototype.fetch = function (w) { w.setServerType(this.getType()); var e = this.Bc(w); document.write('<' + 'scr' + 'ipt src="' + e + '" language="JavaScript"><' + '\/scr' + 'ipt>'); }; mboxAjaxScPluginFetcher = function (b, Ac) { mboxScPluginFetcher.call(this, b, Ac); }; mboxAjaxScPluginFetcher.prototype = new mboxScPluginFetcher; mboxAjaxScPluginFetcher.prototype.fetch = function (w) { w.setServerType(this.getType()); var e = this.Bc(w); this.x = document.createElement('script'); this.x.src = e; document.body.appendChild(this.x); }; mboxAjaxScPluginFetcher.prototype.getType = function () { return 'ajax'; }; function mboxLoadSCPlugin(Ac) { if (!Ac) { return null; } Ac.m_tt = function (Ac) { var Fc = Ac.m_i('tt'); Fc.H = true; Fc.b = 'trisepttechnologyllc'; Fc['_t'] = function () { if (!this.isEnabled()) { return; } var Y = this.Hc(); if (Y) { var Ub = mboxFactoryDefault.isDomLoaded() ? new mboxAjaxScPluginFetcher(this.b, this.s) : new mboxStandardScPluginFetcher(this.b, this.s); Y.setFetcher(Ub); Y.load(); } }; Fc.isEnabled = function () { return this.H && mboxFactoryDefault.isEnabled(); }; Fc.Hc = function () { var ab = this.Ic(); var Fb = document.createElement('DIV'); return mboxFactoryDefault.create(ab, new Array(), Fb); }; Fc.Ic = function () { var Jc = this.s.events && this.s.events.indexOf('purchase') != -1; return 'SiteCatalyst: ' + (Jc ? 'purchase' : 'event'); }; }; return Ac.loadModule('tt'); };
//END Trisept.UI.Web.Shell.mbox_trisept.js
//START Trisept.UI.Web.Shell.jquery.ui.i18n-1.11.2.min.js
/*! jQuery UI - v1.11.2 - 2014-10-16
* http://jqueryui.com
* Includes: datepicker-af.js, datepicker-ar-DZ.js, datepicker-ar.js, datepicker-az.js, datepicker-be.js, datepicker-bg.js, datepicker-bs.js, datepicker-ca.js, datepicker-cs.js, datepicker-cy-GB.js, datepicker-da.js, datepicker-de.js, datepicker-el.js, datepicker-en-AU.js, datepicker-en-GB.js, datepicker-en-NZ.js, datepicker-eo.js, datepicker-es.js, datepicker-et.js, datepicker-eu.js, datepicker-fa.js, datepicker-fi.js, datepicker-fo.js, datepicker-fr-CA.js, datepicker-fr-CH.js, datepicker-fr.js, datepicker-gl.js, datepicker-he.js, datepicker-hi.js, datepicker-hr.js, datepicker-hu.js, datepicker-hy.js, datepicker-id.js, datepicker-is.js, datepicker-it-CH.js, datepicker-it.js, datepicker-ja.js, datepicker-ka.js, datepicker-kk.js, datepicker-km.js, datepicker-ko.js, datepicker-ky.js, datepicker-lb.js, datepicker-lt.js, datepicker-lv.js, datepicker-mk.js, datepicker-ml.js, datepicker-ms.js, datepicker-nb.js, datepicker-nl-BE.js, datepicker-nl.js, datepicker-nn.js, datepicker-no.js, datepicker-pl.js, datepicker-pt-BR.js, datepicker-pt.js, datepicker-rm.js, datepicker-ro.js, datepicker-ru.js, datepicker-sk.js, datepicker-sl.js, datepicker-sq.js, datepicker-sr-SR.js, datepicker-sr.js, datepicker-sv.js, datepicker-ta.js, datepicker-th.js, datepicker-tj.js, datepicker-tr.js, datepicker-uk.js, datepicker-vi.js, datepicker-zh-CN.js, datepicker-zh-HK.js, datepicker-zh-TW.js
* Copyright 2014 jQuery Foundation and other contributors; Licensed MIT */

(function(e){"function"==typeof define&&define.amd?define(["jquery"],e):e(jQuery)})(function(e){var t=e.datepicker;t.regional.af={closeText:"Selekteer",prevText:"Vorige",nextText:"Volgende",currentText:"Vandag",monthNames:["Januarie","Februarie","Maart","April","Mei","Junie","Julie","Augustus","September","Oktober","November","Desember"],monthNamesShort:["Jan","Feb","Mrt","Apr","Mei","Jun","Jul","Aug","Sep","Okt","Nov","Des"],dayNames:["Sondag","Maandag","Dinsdag","Woensdag","Donderdag","Vrydag","Saterdag"],dayNamesShort:["Son","Maa","Din","Woe","Don","Vry","Sat"],dayNamesMin:["So","Ma","Di","Wo","Do","Vr","Sa"],weekHeader:"Wk",dateFormat:"dd/mm/yy",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""},t.setDefaults(t.regional.af),t.regional.af,t.regional["ar-DZ"]={closeText:"إغلاق",prevText:"&#x3C;السابق",nextText:"التالي&#x3E;",currentText:"اليوم",monthNames:["جانفي","فيفري","مارس","أفريل","ماي","جوان","جويلية","أوت","سبتمبر","أكتوبر","نوفمبر","ديسمبر"],monthNamesShort:["1","2","3","4","5","6","7","8","9","10","11","12"],dayNames:["الأحد","الاثنين","الثلاثاء","الأربعاء","الخميس","الجمعة","السبت"],dayNamesShort:["الأحد","الاثنين","الثلاثاء","الأربعاء","الخميس","الجمعة","السبت"],dayNamesMin:["الأحد","الاثنين","الثلاثاء","الأربعاء","الخميس","الجمعة","السبت"],weekHeader:"أسبوع",dateFormat:"dd/mm/yy",firstDay:6,isRTL:!0,showMonthAfterYear:!1,yearSuffix:""},t.setDefaults(t.regional["ar-DZ"]),t.regional["ar-DZ"],t.regional.ar={closeText:"إغلاق",prevText:"&#x3C;السابق",nextText:"التالي&#x3E;",currentText:"اليوم",monthNames:["كانون الثاني","شباط","آذار","نيسان","مايو","حزيران","تموز","آب","أيلول","تشرين الأول","تشرين الثاني","كانون الأول"],monthNamesShort:["1","2","3","4","5","6","7","8","9","10","11","12"],dayNames:["الأحد","الاثنين","الثلاثاء","الأربعاء","الخميس","الجمعة","السبت"],dayNamesShort:["الأحد","الاثنين","الثلاثاء","الأربعاء","الخميس","الجمعة","السبت"],dayNamesMin:["ح","ن","ث","ر","خ","ج","س"],weekHeader:"أسبوع",dateFormat:"dd/mm/yy",firstDay:6,isRTL:!0,showMonthAfterYear:!1,yearSuffix:""},t.setDefaults(t.regional.ar),t.regional.ar,t.regional.az={closeText:"Bağla",prevText:"&#x3C;Geri",nextText:"İrəli&#x3E;",currentText:"Bugün",monthNames:["Yanvar","Fevral","Mart","Aprel","May","İyun","İyul","Avqust","Sentyabr","Oktyabr","Noyabr","Dekabr"],monthNamesShort:["Yan","Fev","Mar","Apr","May","İyun","İyul","Avq","Sen","Okt","Noy","Dek"],dayNames:["Bazar","Bazar ertəsi","Çərşənbə axşamı","Çərşənbə","Cümə axşamı","Cümə","Şənbə"],dayNamesShort:["B","Be","Ça","Ç","Ca","C","Ş"],dayNamesMin:["B","B","Ç","С","Ç","C","Ş"],weekHeader:"Hf",dateFormat:"dd.mm.yy",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""},t.setDefaults(t.regional.az),t.regional.az,t.regional.be={closeText:"Зачыніць",prevText:"&larr;Папяр.",nextText:"Наст.&rarr;",currentText:"Сёньня",monthNames:["Студзень","Люты","Сакавік","Красавік","Травень","Чэрвень","Ліпень","Жнівень","Верасень","Кастрычнік","Лістапад","Сьнежань"],monthNamesShort:["Сту","Лют","Сак","Кра","Тра","Чэр","Ліп","Жні","Вер","Кас","Ліс","Сьн"],dayNames:["нядзеля","панядзелак","аўторак","серада","чацьвер","пятніца","субота"],dayNamesShort:["ндз","пнд","аўт","срд","чцв","птн","сбт"],dayNamesMin:["Нд","Пн","Аў","Ср","Чц","Пт","Сб"],weekHeader:"Тд",dateFormat:"dd.mm.yy",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""},t.setDefaults(t.regional.be),t.regional.be,t.regional.bg={closeText:"затвори",prevText:"&#x3C;назад",nextText:"напред&#x3E;",nextBigText:"&#x3E;&#x3E;",currentText:"днес",monthNames:["Януари","Февруари","Март","Април","Май","Юни","Юли","Август","Септември","Октомври","Ноември","Декември"],monthNamesShort:["Яну","Фев","Мар","Апр","Май","Юни","Юли","Авг","Сеп","Окт","Нов","Дек"],dayNames:["Неделя","Понеделник","Вторник","Сряда","Четвъртък","Петък","Събота"],dayNamesShort:["Нед","Пон","Вто","Сря","Чет","Пет","Съб"],dayNamesMin:["Не","По","Вт","Ср","Че","Пе","Съ"],weekHeader:"Wk",dateFormat:"dd.mm.yy",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""},t.setDefaults(t.regional.bg),t.regional.bg,t.regional.bs={closeText:"Zatvori",prevText:"&#x3C;",nextText:"&#x3E;",currentText:"Danas",monthNames:["Januar","Februar","Mart","April","Maj","Juni","Juli","August","Septembar","Oktobar","Novembar","Decembar"],monthNamesShort:["Jan","Feb","Mar","Apr","Maj","Jun","Jul","Aug","Sep","Okt","Nov","Dec"],dayNames:["Nedelja","Ponedeljak","Utorak","Srijeda","Četvrtak","Petak","Subota"],dayNamesShort:["Ned","Pon","Uto","Sri","Čet","Pet","Sub"],dayNamesMin:["Ne","Po","Ut","Sr","Če","Pe","Su"],weekHeader:"Wk",dateFormat:"dd.mm.yy",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""},t.setDefaults(t.regional.bs),t.regional.bs,t.regional.ca={closeText:"Tanca",prevText:"Anterior",nextText:"Següent",currentText:"Avui",monthNames:["gener","febrer","març","abril","maig","juny","juliol","agost","setembre","octubre","novembre","desembre"],monthNamesShort:["gen","feb","març","abr","maig","juny","jul","ag","set","oct","nov","des"],dayNames:["diumenge","dilluns","dimarts","dimecres","dijous","divendres","dissabte"],dayNamesShort:["dg","dl","dt","dc","dj","dv","ds"],dayNamesMin:["dg","dl","dt","dc","dj","dv","ds"],weekHeader:"Set",dateFormat:"dd/mm/yy",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""},t.setDefaults(t.regional.ca),t.regional.ca,t.regional.cs={closeText:"Zavřít",prevText:"&#x3C;Dříve",nextText:"Později&#x3E;",currentText:"Nyní",monthNames:["leden","únor","březen","duben","květen","červen","červenec","srpen","září","říjen","listopad","prosinec"],monthNamesShort:["led","úno","bře","dub","kvě","čer","čvc","srp","zář","říj","lis","pro"],dayNames:["neděle","pondělí","úterý","středa","čtvrtek","pátek","sobota"],dayNamesShort:["ne","po","út","st","čt","pá","so"],dayNamesMin:["ne","po","út","st","čt","pá","so"],weekHeader:"Týd",dateFormat:"dd.mm.yy",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""},t.setDefaults(t.regional.cs),t.regional.cs,t.regional["cy-GB"]={closeText:"Done",prevText:"Prev",nextText:"Next",currentText:"Today",monthNames:["Ionawr","Chwefror","Mawrth","Ebrill","Mai","Mehefin","Gorffennaf","Awst","Medi","Hydref","Tachwedd","Rhagfyr"],monthNamesShort:["Ion","Chw","Maw","Ebr","Mai","Meh","Gor","Aws","Med","Hyd","Tac","Rha"],dayNames:["Dydd Sul","Dydd Llun","Dydd Mawrth","Dydd Mercher","Dydd Iau","Dydd Gwener","Dydd Sadwrn"],dayNamesShort:["Sul","Llu","Maw","Mer","Iau","Gwe","Sad"],dayNamesMin:["Su","Ll","Ma","Me","Ia","Gw","Sa"],weekHeader:"Wy",dateFormat:"dd/mm/yy",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""},t.setDefaults(t.regional["cy-GB"]),t.regional["cy-GB"],t.regional.da={closeText:"Luk",prevText:"&#x3C;Forrige",nextText:"Næste&#x3E;",currentText:"Idag",monthNames:["Januar","Februar","Marts","April","Maj","Juni","Juli","August","September","Oktober","November","December"],monthNamesShort:["Jan","Feb","Mar","Apr","Maj","Jun","Jul","Aug","Sep","Okt","Nov","Dec"],dayNames:["Søndag","Mandag","Tirsdag","Onsdag","Torsdag","Fredag","Lørdag"],dayNamesShort:["Søn","Man","Tir","Ons","Tor","Fre","Lør"],dayNamesMin:["Sø","Ma","Ti","On","To","Fr","Lø"],weekHeader:"Uge",dateFormat:"dd-mm-yy",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""},t.setDefaults(t.regional.da),t.regional.da,t.regional.de={closeText:"Schließen",prevText:"&#x3C;Zurück",nextText:"Vor&#x3E;",currentText:"Heute",monthNames:["Januar","Februar","März","April","Mai","Juni","Juli","August","September","Oktober","November","Dezember"],monthNamesShort:["Jan","Feb","Mär","Apr","Mai","Jun","Jul","Aug","Sep","Okt","Nov","Dez"],dayNames:["Sonntag","Montag","Dienstag","Mittwoch","Donnerstag","Freitag","Samstag"],dayNamesShort:["So","Mo","Di","Mi","Do","Fr","Sa"],dayNamesMin:["So","Mo","Di","Mi","Do","Fr","Sa"],weekHeader:"KW",dateFormat:"dd.mm.yy",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""},t.setDefaults(t.regional.de),t.regional.de,t.regional.el={closeText:"Κλείσιμο",prevText:"Προηγούμενος",nextText:"Επόμενος",currentText:"Σήμερα",monthNames:["Ιανουάριος","Φεβρουάριος","Μάρτιος","Απρίλιος","Μάιος","Ιούνιος","Ιούλιος","Αύγουστος","Σεπτέμβριος","Οκτώβριος","Νοέμβριος","Δεκέμβριος"],monthNamesShort:["Ιαν","Φεβ","Μαρ","Απρ","Μαι","Ιουν","Ιουλ","Αυγ","Σεπ","Οκτ","Νοε","Δεκ"],dayNames:["Κυριακή","Δευτέρα","Τρίτη","Τετάρτη","Πέμπτη","Παρασκευή","Σάββατο"],dayNamesShort:["Κυρ","Δευ","Τρι","Τετ","Πεμ","Παρ","Σαβ"],dayNamesMin:["Κυ","Δε","Τρ","Τε","Πε","Πα","Σα"],weekHeader:"Εβδ",dateFormat:"dd/mm/yy",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""},t.setDefaults(t.regional.el),t.regional.el,t.regional["en-AU"]={closeText:"Done",prevText:"Prev",nextText:"Next",currentText:"Today",monthNames:["January","February","March","April","May","June","July","August","September","October","November","December"],monthNamesShort:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],dayNames:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],dayNamesShort:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],dayNamesMin:["Su","Mo","Tu","We","Th","Fr","Sa"],weekHeader:"Wk",dateFormat:"dd/mm/yy",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""},t.setDefaults(t.regional["en-AU"]),t.regional["en-AU"],t.regional["en-GB"]={closeText:"Done",prevText:"Prev",nextText:"Next",currentText:"Today",monthNames:["January","February","March","April","May","June","July","August","September","October","November","December"],monthNamesShort:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],dayNames:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],dayNamesShort:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],dayNamesMin:["Su","Mo","Tu","We","Th","Fr","Sa"],weekHeader:"Wk",dateFormat:"dd/mm/yy",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""},t.setDefaults(t.regional["en-GB"]),t.regional["en-GB"],t.regional["en-NZ"]={closeText:"Done",prevText:"Prev",nextText:"Next",currentText:"Today",monthNames:["January","February","March","April","May","June","July","August","September","October","November","December"],monthNamesShort:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],dayNames:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],dayNamesShort:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],dayNamesMin:["Su","Mo","Tu","We","Th","Fr","Sa"],weekHeader:"Wk",dateFormat:"dd/mm/yy",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""},t.setDefaults(t.regional["en-NZ"]),t.regional["en-NZ"],t.regional.eo={closeText:"Fermi",prevText:"&#x3C;Anta",nextText:"Sekv&#x3E;",currentText:"Nuna",monthNames:["Januaro","Februaro","Marto","Aprilo","Majo","Junio","Julio","Aŭgusto","Septembro","Oktobro","Novembro","Decembro"],monthNamesShort:["Jan","Feb","Mar","Apr","Maj","Jun","Jul","Aŭg","Sep","Okt","Nov","Dec"],dayNames:["Dimanĉo","Lundo","Mardo","Merkredo","Ĵaŭdo","Vendredo","Sabato"],dayNamesShort:["Dim","Lun","Mar","Mer","Ĵaŭ","Ven","Sab"],dayNamesMin:["Di","Lu","Ma","Me","Ĵa","Ve","Sa"],weekHeader:"Sb",dateFormat:"dd/mm/yy",firstDay:0,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""},t.setDefaults(t.regional.eo),t.regional.eo,t.regional.es={closeText:"Cerrar",prevText:"&#x3C;Ant",nextText:"Sig&#x3E;",currentText:"Hoy",monthNames:["enero","febrero","marzo","abril","mayo","junio","julio","agosto","septiembre","octubre","noviembre","diciembre"],monthNamesShort:["ene","feb","mar","abr","may","jun","jul","ago","sep","oct","nov","dic"],dayNames:["domingo","lunes","martes","miércoles","jueves","viernes","sábado"],dayNamesShort:["dom","lun","mar","mié","jue","vie","sáb"],dayNamesMin:["D","L","M","X","J","V","S"],weekHeader:"Sm",dateFormat:"dd/mm/yy",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""},t.setDefaults(t.regional.es),t.regional.es,t.regional.et={closeText:"Sulge",prevText:"Eelnev",nextText:"Järgnev",currentText:"Täna",monthNames:["Jaanuar","Veebruar","Märts","Aprill","Mai","Juuni","Juuli","August","September","Oktoober","November","Detsember"],monthNamesShort:["Jaan","Veebr","Märts","Apr","Mai","Juuni","Juuli","Aug","Sept","Okt","Nov","Dets"],dayNames:["Pühapäev","Esmaspäev","Teisipäev","Kolmapäev","Neljapäev","Reede","Laupäev"],dayNamesShort:["Pühap","Esmasp","Teisip","Kolmap","Neljap","Reede","Laup"],dayNamesMin:["P","E","T","K","N","R","L"],weekHeader:"näd",dateFormat:"dd.mm.yy",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""},t.setDefaults(t.regional.et),t.regional.et,t.regional.eu={closeText:"Egina",prevText:"&#x3C;Aur",nextText:"Hur&#x3E;",currentText:"Gaur",monthNames:["urtarrila","otsaila","martxoa","apirila","maiatza","ekaina","uztaila","abuztua","iraila","urria","azaroa","abendua"],monthNamesShort:["urt.","ots.","mar.","api.","mai.","eka.","uzt.","abu.","ira.","urr.","aza.","abe."],dayNames:["igandea","astelehena","asteartea","asteazkena","osteguna","ostirala","larunbata"],dayNamesShort:["ig.","al.","ar.","az.","og.","ol.","lr."],dayNamesMin:["ig","al","ar","az","og","ol","lr"],weekHeader:"As",dateFormat:"yy-mm-dd",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""},t.setDefaults(t.regional.eu),t.regional.eu,t.regional.fa={closeText:"بستن",prevText:"&#x3C;قبلی",nextText:"بعدی&#x3E;",currentText:"امروز",monthNames:["ژانویه","فوریه","مارس","آوریل","مه","ژوئن","ژوئیه","اوت","سپتامبر","اکتبر","نوامبر","دسامبر"],monthNamesShort:["1","2","3","4","5","6","7","8","9","10","11","12"],dayNames:["يکشنبه","دوشنبه","سه‌شنبه","چهارشنبه","پنجشنبه","جمعه","شنبه"],dayNamesShort:["ی","د","س","چ","پ","ج","ش"],dayNamesMin:["ی","د","س","چ","پ","ج","ش"],weekHeader:"هف",dateFormat:"yy/mm/dd",firstDay:6,isRTL:!0,showMonthAfterYear:!1,yearSuffix:""},t.setDefaults(t.regional.fa),t.regional.fa,t.regional.fi={closeText:"Sulje",prevText:"&#xAB;Edellinen",nextText:"Seuraava&#xBB;",currentText:"Tänään",monthNames:["Tammikuu","Helmikuu","Maaliskuu","Huhtikuu","Toukokuu","Kesäkuu","Heinäkuu","Elokuu","Syyskuu","Lokakuu","Marraskuu","Joulukuu"],monthNamesShort:["Tammi","Helmi","Maalis","Huhti","Touko","Kesä","Heinä","Elo","Syys","Loka","Marras","Joulu"],dayNamesShort:["Su","Ma","Ti","Ke","To","Pe","La"],dayNames:["Sunnuntai","Maanantai","Tiistai","Keskiviikko","Torstai","Perjantai","Lauantai"],dayNamesMin:["Su","Ma","Ti","Ke","To","Pe","La"],weekHeader:"Vk",dateFormat:"d.m.yy",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""},t.setDefaults(t.regional.fi),t.regional.fi,t.regional.fo={closeText:"Lat aftur",prevText:"&#x3C;Fyrra",nextText:"Næsta&#x3E;",currentText:"Í dag",monthNames:["Januar","Februar","Mars","Apríl","Mei","Juni","Juli","August","September","Oktober","November","Desember"],monthNamesShort:["Jan","Feb","Mar","Apr","Mei","Jun","Jul","Aug","Sep","Okt","Nov","Des"],dayNames:["Sunnudagur","Mánadagur","Týsdagur","Mikudagur","Hósdagur","Fríggjadagur","Leyardagur"],dayNamesShort:["Sun","Mán","Týs","Mik","Hós","Frí","Ley"],dayNamesMin:["Su","Má","Tý","Mi","Hó","Fr","Le"],weekHeader:"Vk",dateFormat:"dd-mm-yy",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""},t.setDefaults(t.regional.fo),t.regional.fo,t.regional["fr-CA"]={closeText:"Fermer",prevText:"Précédent",nextText:"Suivant",currentText:"Aujourd'hui",monthNames:["janvier","février","mars","avril","mai","juin","juillet","août","septembre","octobre","novembre","décembre"],monthNamesShort:["janv.","févr.","mars","avr.","mai","juin","juil.","août","sept.","oct.","nov.","déc."],dayNames:["dimanche","lundi","mardi","mercredi","jeudi","vendredi","samedi"],dayNamesShort:["dim.","lun.","mar.","mer.","jeu.","ven.","sam."],dayNamesMin:["D","L","M","M","J","V","S"],weekHeader:"Sem.",dateFormat:"yy-mm-dd",firstDay:0,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""},t.setDefaults(t.regional["fr-CA"]),t.regional["fr-CA"],t.regional["fr-CH"]={closeText:"Fermer",prevText:"&#x3C;Préc",nextText:"Suiv&#x3E;",currentText:"Courant",monthNames:["janvier","février","mars","avril","mai","juin","juillet","août","septembre","octobre","novembre","décembre"],monthNamesShort:["janv.","févr.","mars","avr.","mai","juin","juil.","août","sept.","oct.","nov.","déc."],dayNames:["dimanche","lundi","mardi","mercredi","jeudi","vendredi","samedi"],dayNamesShort:["dim.","lun.","mar.","mer.","jeu.","ven.","sam."],dayNamesMin:["D","L","M","M","J","V","S"],weekHeader:"Sm",dateFormat:"dd.mm.yy",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""},t.setDefaults(t.regional["fr-CH"]),t.regional["fr-CH"],t.regional.fr={closeText:"Fermer",prevText:"Précédent",nextText:"Suivant",currentText:"Aujourd'hui",monthNames:["janvier","février","mars","avril","mai","juin","juillet","août","septembre","octobre","novembre","décembre"],monthNamesShort:["janv.","févr.","mars","avr.","mai","juin","juil.","août","sept.","oct.","nov.","déc."],dayNames:["dimanche","lundi","mardi","mercredi","jeudi","vendredi","samedi"],dayNamesShort:["dim.","lun.","mar.","mer.","jeu.","ven.","sam."],dayNamesMin:["D","L","M","M","J","V","S"],weekHeader:"Sem.",dateFormat:"dd/mm/yy",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""},t.setDefaults(t.regional.fr),t.regional.fr,t.regional.gl={closeText:"Pechar",prevText:"&#x3C;Ant",nextText:"Seg&#x3E;",currentText:"Hoxe",monthNames:["Xaneiro","Febreiro","Marzo","Abril","Maio","Xuño","Xullo","Agosto","Setembro","Outubro","Novembro","Decembro"],monthNamesShort:["Xan","Feb","Mar","Abr","Mai","Xuñ","Xul","Ago","Set","Out","Nov","Dec"],dayNames:["Domingo","Luns","Martes","Mércores","Xoves","Venres","Sábado"],dayNamesShort:["Dom","Lun","Mar","Mér","Xov","Ven","Sáb"],dayNamesMin:["Do","Lu","Ma","Mé","Xo","Ve","Sá"],weekHeader:"Sm",dateFormat:"dd/mm/yy",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""},t.setDefaults(t.regional.gl),t.regional.gl,t.regional.he={closeText:"סגור",prevText:"&#x3C;הקודם",nextText:"הבא&#x3E;",currentText:"היום",monthNames:["ינואר","פברואר","מרץ","אפריל","מאי","יוני","יולי","אוגוסט","ספטמבר","אוקטובר","נובמבר","דצמבר"],monthNamesShort:["ינו","פבר","מרץ","אפר","מאי","יוני","יולי","אוג","ספט","אוק","נוב","דצמ"],dayNames:["ראשון","שני","שלישי","רביעי","חמישי","שישי","שבת"],dayNamesShort:["א'","ב'","ג'","ד'","ה'","ו'","שבת"],dayNamesMin:["א'","ב'","ג'","ד'","ה'","ו'","שבת"],weekHeader:"Wk",dateFormat:"dd/mm/yy",firstDay:0,isRTL:!0,showMonthAfterYear:!1,yearSuffix:""},t.setDefaults(t.regional.he),t.regional.he,t.regional.hi={closeText:"बंद",prevText:"पिछला",nextText:"अगला",currentText:"आज",monthNames:["जनवरी ","फरवरी","मार्च","अप्रेल","मई","जून","जूलाई","अगस्त ","सितम्बर","अक्टूबर","नवम्बर","दिसम्बर"],monthNamesShort:["जन","फर","मार्च","अप्रेल","मई","जून","जूलाई","अग","सित","अक्ट","नव","दि"],dayNames:["रविवार","सोमवार","मंगलवार","बुधवार","गुरुवार","शुक्रवार","शनिवार"],dayNamesShort:["रवि","सोम","मंगल","बुध","गुरु","शुक्र","शनि"],dayNamesMin:["रवि","सोम","मंगल","बुध","गुरु","शुक्र","शनि"],weekHeader:"हफ्ता",dateFormat:"dd/mm/yy",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""},t.setDefaults(t.regional.hi),t.regional.hi,t.regional.hr={closeText:"Zatvori",prevText:"&#x3C;",nextText:"&#x3E;",currentText:"Danas",monthNames:["Siječanj","Veljača","Ožujak","Travanj","Svibanj","Lipanj","Srpanj","Kolovoz","Rujan","Listopad","Studeni","Prosinac"],monthNamesShort:["Sij","Velj","Ožu","Tra","Svi","Lip","Srp","Kol","Ruj","Lis","Stu","Pro"],dayNames:["Nedjelja","Ponedjeljak","Utorak","Srijeda","Četvrtak","Petak","Subota"],dayNamesShort:["Ned","Pon","Uto","Sri","Čet","Pet","Sub"],dayNamesMin:["Ne","Po","Ut","Sr","Če","Pe","Su"],weekHeader:"Tje",dateFormat:"dd.mm.yy.",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""},t.setDefaults(t.regional.hr),t.regional.hr,t.regional.hu={closeText:"bezár",prevText:"vissza",nextText:"előre",currentText:"ma",monthNames:["Január","Február","Március","Április","Május","Június","Július","Augusztus","Szeptember","Október","November","December"],monthNamesShort:["Jan","Feb","Már","Ápr","Máj","Jún","Júl","Aug","Szep","Okt","Nov","Dec"],dayNames:["Vasárnap","Hétfő","Kedd","Szerda","Csütörtök","Péntek","Szombat"],dayNamesShort:["Vas","Hét","Ked","Sze","Csü","Pén","Szo"],dayNamesMin:["V","H","K","Sze","Cs","P","Szo"],weekHeader:"Hét",dateFormat:"yy.mm.dd.",firstDay:1,isRTL:!1,showMonthAfterYear:!0,yearSuffix:""},t.setDefaults(t.regional.hu),t.regional.hu,t.regional.hy={closeText:"Փակել",prevText:"&#x3C;Նախ.",nextText:"Հաջ.&#x3E;",currentText:"Այսօր",monthNames:["Հունվար","Փետրվար","Մարտ","Ապրիլ","Մայիս","Հունիս","Հուլիս","Օգոստոս","Սեպտեմբեր","Հոկտեմբեր","Նոյեմբեր","Դեկտեմբեր"],monthNamesShort:["Հունվ","Փետր","Մարտ","Ապր","Մայիս","Հունիս","Հուլ","Օգս","Սեպ","Հոկ","Նոյ","Դեկ"],dayNames:["կիրակի","եկուշաբթի","երեքշաբթի","չորեքշաբթի","հինգշաբթի","ուրբաթ","շաբաթ"],dayNamesShort:["կիր","երկ","երք","չրք","հնգ","ուրբ","շբթ"],dayNamesMin:["կիր","երկ","երք","չրք","հնգ","ուրբ","շբթ"],weekHeader:"ՇԲՏ",dateFormat:"dd.mm.yy",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""},t.setDefaults(t.regional.hy),t.regional.hy,t.regional.id={closeText:"Tutup",prevText:"&#x3C;mundur",nextText:"maju&#x3E;",currentText:"hari ini",monthNames:["Januari","Februari","Maret","April","Mei","Juni","Juli","Agustus","September","Oktober","Nopember","Desember"],monthNamesShort:["Jan","Feb","Mar","Apr","Mei","Jun","Jul","Agus","Sep","Okt","Nop","Des"],dayNames:["Minggu","Senin","Selasa","Rabu","Kamis","Jumat","Sabtu"],dayNamesShort:["Min","Sen","Sel","Rab","kam","Jum","Sab"],dayNamesMin:["Mg","Sn","Sl","Rb","Km","jm","Sb"],weekHeader:"Mg",dateFormat:"dd/mm/yy",firstDay:0,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""},t.setDefaults(t.regional.id),t.regional.id,t.regional.is={closeText:"Loka",prevText:"&#x3C; Fyrri",nextText:"Næsti &#x3E;",currentText:"Í dag",monthNames:["Janúar","Febrúar","Mars","Apríl","Maí","Júní","Júlí","Ágúst","September","Október","Nóvember","Desember"],monthNamesShort:["Jan","Feb","Mar","Apr","Maí","Jún","Júl","Ágú","Sep","Okt","Nóv","Des"],dayNames:["Sunnudagur","Mánudagur","Þriðjudagur","Miðvikudagur","Fimmtudagur","Föstudagur","Laugardagur"],dayNamesShort:["Sun","Mán","Þri","Mið","Fim","Fös","Lau"],dayNamesMin:["Su","Má","Þr","Mi","Fi","Fö","La"],weekHeader:"Vika",dateFormat:"dd.mm.yy",firstDay:0,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""},t.setDefaults(t.regional.is),t.regional.is,t.regional["it-CH"]={closeText:"Chiudi",prevText:"&#x3C;Prec",nextText:"Succ&#x3E;",currentText:"Oggi",monthNames:["Gennaio","Febbraio","Marzo","Aprile","Maggio","Giugno","Luglio","Agosto","Settembre","Ottobre","Novembre","Dicembre"],monthNamesShort:["Gen","Feb","Mar","Apr","Mag","Giu","Lug","Ago","Set","Ott","Nov","Dic"],dayNames:["Domenica","Lunedì","Martedì","Mercoledì","Giovedì","Venerdì","Sabato"],dayNamesShort:["Dom","Lun","Mar","Mer","Gio","Ven","Sab"],dayNamesMin:["Do","Lu","Ma","Me","Gi","Ve","Sa"],weekHeader:"Sm",dateFormat:"dd.mm.yy",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""},t.setDefaults(t.regional["it-CH"]),t.regional["it-CH"],t.regional.it={closeText:"Chiudi",prevText:"&#x3C;Prec",nextText:"Succ&#x3E;",currentText:"Oggi",monthNames:["Gennaio","Febbraio","Marzo","Aprile","Maggio","Giugno","Luglio","Agosto","Settembre","Ottobre","Novembre","Dicembre"],monthNamesShort:["Gen","Feb","Mar","Apr","Mag","Giu","Lug","Ago","Set","Ott","Nov","Dic"],dayNames:["Domenica","Lunedì","Martedì","Mercoledì","Giovedì","Venerdì","Sabato"],dayNamesShort:["Dom","Lun","Mar","Mer","Gio","Ven","Sab"],dayNamesMin:["Do","Lu","Ma","Me","Gi","Ve","Sa"],weekHeader:"Sm",dateFormat:"dd/mm/yy",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""},t.setDefaults(t.regional.it),t.regional.it,t.regional.ja={closeText:"閉じる",prevText:"&#x3C;前",nextText:"次&#x3E;",currentText:"今日",monthNames:["1月","2月","3月","4月","5月","6月","7月","8月","9月","10月","11月","12月"],monthNamesShort:["1月","2月","3月","4月","5月","6月","7月","8月","9月","10月","11月","12月"],dayNames:["日曜日","月曜日","火曜日","水曜日","木曜日","金曜日","土曜日"],dayNamesShort:["日","月","火","水","木","金","土"],dayNamesMin:["日","月","火","水","木","金","土"],weekHeader:"週",dateFormat:"yy/mm/dd",firstDay:0,isRTL:!1,showMonthAfterYear:!0,yearSuffix:"年"},t.setDefaults(t.regional.ja),t.regional.ja,t.regional.ka={closeText:"დახურვა",prevText:"&#x3c; წინა",nextText:"შემდეგი &#x3e;",currentText:"დღეს",monthNames:["იანვარი","თებერვალი","მარტი","აპრილი","მაისი","ივნისი","ივლისი","აგვისტო","სექტემბერი","ოქტომბერი","ნოემბერი","დეკემბერი"],monthNamesShort:["იან","თებ","მარ","აპრ","მაი","ივნ","ივლ","აგვ","სექ","ოქტ","ნოე","დეკ"],dayNames:["კვირა","ორშაბათი","სამშაბათი","ოთხშაბათი","ხუთშაბათი","პარასკევი","შაბათი"],dayNamesShort:["კვ","ორშ","სამ","ოთხ","ხუთ","პარ","შაბ"],dayNamesMin:["კვ","ორშ","სამ","ოთხ","ხუთ","პარ","შაბ"],weekHeader:"კვირა",dateFormat:"dd-mm-yy",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""},t.setDefaults(t.regional.ka),t.regional.ka,t.regional.kk={closeText:"Жабу",prevText:"&#x3C;Алдыңғы",nextText:"Келесі&#x3E;",currentText:"Бүгін",monthNames:["Қаңтар","Ақпан","Наурыз","Сәуір","Мамыр","Маусым","Шілде","Тамыз","Қыркүйек","Қазан","Қараша","Желтоқсан"],monthNamesShort:["Қаң","Ақп","Нау","Сәу","Мам","Мау","Шіл","Там","Қыр","Қаз","Қар","Жел"],dayNames:["Жексенбі","Дүйсенбі","Сейсенбі","Сәрсенбі","Бейсенбі","Жұма","Сенбі"],dayNamesShort:["жкс","дсн","ссн","срс","бсн","жма","снб"],dayNamesMin:["Жк","Дс","Сс","Ср","Бс","Жм","Сн"],weekHeader:"Не",dateFormat:"dd.mm.yy",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""},t.setDefaults(t.regional.kk),t.regional.kk,t.regional.km={closeText:"ធ្វើ​រួច",prevText:"មុន",nextText:"បន្ទាប់",currentText:"ថ្ងៃ​នេះ",monthNames:["មករា","កុម្ភៈ","មីនា","មេសា","ឧសភា","មិថុនា","កក្កដា","សីហា","កញ្ញា","តុលា","វិច្ឆិកា","ធ្នូ"],monthNamesShort:["មករា","កុម្ភៈ","មីនា","មេសា","ឧសភា","មិថុនា","កក្កដា","សីហា","កញ្ញា","តុលា","វិច្ឆិកា","ធ្នូ"],dayNames:["អាទិត្យ","ចន្ទ","អង្គារ","ពុធ","ព្រហស្បតិ៍","សុក្រ","សៅរ៍"],dayNamesShort:["អា","ច","អ","ពុ","ព្រហ","សុ","សៅ"],dayNamesMin:["អា","ច","អ","ពុ","ព្រហ","សុ","សៅ"],weekHeader:"សប្ដាហ៍",dateFormat:"dd-mm-yy",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""},t.setDefaults(t.regional.km),t.regional.km,t.regional.ko={closeText:"닫기",prevText:"이전달",nextText:"다음달",currentText:"오늘",monthNames:["1월","2월","3월","4월","5월","6월","7월","8월","9월","10월","11월","12월"],monthNamesShort:["1월","2월","3월","4월","5월","6월","7월","8월","9월","10월","11월","12월"],dayNames:["일요일","월요일","화요일","수요일","목요일","금요일","토요일"],dayNamesShort:["일","월","화","수","목","금","토"],dayNamesMin:["일","월","화","수","목","금","토"],weekHeader:"Wk",dateFormat:"yy-mm-dd",firstDay:0,isRTL:!1,showMonthAfterYear:!0,yearSuffix:"년"},t.setDefaults(t.regional.ko),t.regional.ko,t.regional.ky={closeText:"Жабуу",prevText:"&#x3c;Мур",nextText:"Кий&#x3e;",currentText:"Бүгүн",monthNames:["Январь","Февраль","Март","Апрель","Май","Июнь","Июль","Август","Сентябрь","Октябрь","Ноябрь","Декабрь"],monthNamesShort:["Янв","Фев","Мар","Апр","Май","Июн","Июл","Авг","Сен","Окт","Ноя","Дек"],dayNames:["жекшемби","дүйшөмбү","шейшемби","шаршемби","бейшемби","жума","ишемби"],dayNamesShort:["жек","дүй","шей","шар","бей","жум","ише"],dayNamesMin:["Жк","Дш","Шш","Шр","Бш","Жм","Иш"],weekHeader:"Жум",dateFormat:"dd.mm.yy",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""},t.setDefaults(t.regional.ky),t.regional.ky,t.regional.lb={closeText:"Fäerdeg",prevText:"Zréck",nextText:"Weider",currentText:"Haut",monthNames:["Januar","Februar","Mäerz","Abrëll","Mee","Juni","Juli","August","September","Oktober","November","Dezember"],monthNamesShort:["Jan","Feb","Mäe","Abr","Mee","Jun","Jul","Aug","Sep","Okt","Nov","Dez"],dayNames:["Sonndeg","Méindeg","Dënschdeg","Mëttwoch","Donneschdeg","Freideg","Samschdeg"],dayNamesShort:["Son","Méi","Dën","Mët","Don","Fre","Sam"],dayNamesMin:["So","Mé","Dë","Më","Do","Fr","Sa"],weekHeader:"W",dateFormat:"dd.mm.yy",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""},t.setDefaults(t.regional.lb),t.regional.lb,t.regional.lt={closeText:"Uždaryti",prevText:"&#x3C;Atgal",nextText:"Pirmyn&#x3E;",currentText:"Šiandien",monthNames:["Sausis","Vasaris","Kovas","Balandis","Gegužė","Birželis","Liepa","Rugpjūtis","Rugsėjis","Spalis","Lapkritis","Gruodis"],monthNamesShort:["Sau","Vas","Kov","Bal","Geg","Bir","Lie","Rugp","Rugs","Spa","Lap","Gru"],dayNames:["sekmadienis","pirmadienis","antradienis","trečiadienis","ketvirtadienis","penktadienis","šeštadienis"],dayNamesShort:["sek","pir","ant","tre","ket","pen","šeš"],dayNamesMin:["Se","Pr","An","Tr","Ke","Pe","Še"],weekHeader:"SAV",dateFormat:"yy-mm-dd",firstDay:1,isRTL:!1,showMonthAfterYear:!0,yearSuffix:""},t.setDefaults(t.regional.lt),t.regional.lt,t.regional.lv={closeText:"Aizvērt",prevText:"Iepr.",nextText:"Nāk.",currentText:"Šodien",monthNames:["Janvāris","Februāris","Marts","Aprīlis","Maijs","Jūnijs","Jūlijs","Augusts","Septembris","Oktobris","Novembris","Decembris"],monthNamesShort:["Jan","Feb","Mar","Apr","Mai","Jūn","Jūl","Aug","Sep","Okt","Nov","Dec"],dayNames:["svētdiena","pirmdiena","otrdiena","trešdiena","ceturtdiena","piektdiena","sestdiena"],dayNamesShort:["svt","prm","otr","tre","ctr","pkt","sst"],dayNamesMin:["Sv","Pr","Ot","Tr","Ct","Pk","Ss"],weekHeader:"Ned.",dateFormat:"dd.mm.yy",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""},t.setDefaults(t.regional.lv),t.regional.lv,t.regional.mk={closeText:"Затвори",prevText:"&#x3C;",nextText:"&#x3E;",currentText:"Денес",monthNames:["Јануари","Февруари","Март","Април","Мај","Јуни","Јули","Август","Септември","Октомври","Ноември","Декември"],monthNamesShort:["Јан","Фев","Мар","Апр","Мај","Јун","Јул","Авг","Сеп","Окт","Ное","Дек"],dayNames:["Недела","Понеделник","Вторник","Среда","Четврток","Петок","Сабота"],dayNamesShort:["Нед","Пон","Вто","Сре","Чет","Пет","Саб"],dayNamesMin:["Не","По","Вт","Ср","Че","Пе","Са"],weekHeader:"Сед",dateFormat:"dd.mm.yy",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""},t.setDefaults(t.regional.mk),t.regional.mk,t.regional.ml={closeText:"ശരി",prevText:"മുന്നത്തെ",nextText:"അടുത്തത് ",currentText:"ഇന്ന്",monthNames:["ജനുവരി","ഫെബ്രുവരി","മാര്‍ച്ച്","ഏപ്രില്‍","മേയ്","ജൂണ്‍","ജൂലൈ","ആഗസ്റ്റ്","സെപ്റ്റംബര്‍","ഒക്ടോബര്‍","നവംബര്‍","ഡിസംബര്‍"],monthNamesShort:["ജനു","ഫെബ്","മാര്‍","ഏപ്രി","മേയ്","ജൂണ്‍","ജൂലാ","ആഗ","സെപ്","ഒക്ടോ","നവം","ഡിസ"],dayNames:["ഞായര്‍","തിങ്കള്‍","ചൊവ്വ","ബുധന്‍","വ്യാഴം","വെള്ളി","ശനി"],dayNamesShort:["ഞായ","തിങ്ക","ചൊവ്വ","ബുധ","വ്യാഴം","വെള്ളി","ശനി"],dayNamesMin:["ഞാ","തി","ചൊ","ബു","വ്യാ","വെ","ശ"],weekHeader:"ആ",dateFormat:"dd/mm/yy",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""},t.setDefaults(t.regional.ml),t.regional.ml,t.regional.ms={closeText:"Tutup",prevText:"&#x3C;Sebelum",nextText:"Selepas&#x3E;",currentText:"hari ini",monthNames:["Januari","Februari","Mac","April","Mei","Jun","Julai","Ogos","September","Oktober","November","Disember"],monthNamesShort:["Jan","Feb","Mac","Apr","Mei","Jun","Jul","Ogo","Sep","Okt","Nov","Dis"],dayNames:["Ahad","Isnin","Selasa","Rabu","Khamis","Jumaat","Sabtu"],dayNamesShort:["Aha","Isn","Sel","Rab","kha","Jum","Sab"],dayNamesMin:["Ah","Is","Se","Ra","Kh","Ju","Sa"],weekHeader:"Mg",dateFormat:"dd/mm/yy",firstDay:0,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""},t.setDefaults(t.regional.ms),t.regional.ms,t.regional.nb={closeText:"Lukk",prevText:"&#xAB;Forrige",nextText:"Neste&#xBB;",currentText:"I dag",monthNames:["januar","februar","mars","april","mai","juni","juli","august","september","oktober","november","desember"],monthNamesShort:["jan","feb","mar","apr","mai","jun","jul","aug","sep","okt","nov","des"],dayNamesShort:["søn","man","tir","ons","tor","fre","lør"],dayNames:["søndag","mandag","tirsdag","onsdag","torsdag","fredag","lørdag"],dayNamesMin:["sø","ma","ti","on","to","fr","lø"],weekHeader:"Uke",dateFormat:"dd.mm.yy",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""},t.setDefaults(t.regional.nb),t.regional.nb,t.regional["nl-BE"]={closeText:"Sluiten",prevText:"←",nextText:"→",currentText:"Vandaag",monthNames:["januari","februari","maart","april","mei","juni","juli","augustus","september","oktober","november","december"],monthNamesShort:["jan","feb","mrt","apr","mei","jun","jul","aug","sep","okt","nov","dec"],dayNames:["zondag","maandag","dinsdag","woensdag","donderdag","vrijdag","zaterdag"],dayNamesShort:["zon","maa","din","woe","don","vri","zat"],dayNamesMin:["zo","ma","di","wo","do","vr","za"],weekHeader:"Wk",dateFormat:"dd/mm/yy",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""},t.setDefaults(t.regional["nl-BE"]),t.regional["nl-BE"],t.regional.nl={closeText:"Sluiten",prevText:"←",nextText:"→",currentText:"Vandaag",monthNames:["januari","februari","maart","april","mei","juni","juli","augustus","september","oktober","november","december"],monthNamesShort:["jan","feb","mrt","apr","mei","jun","jul","aug","sep","okt","nov","dec"],dayNames:["zondag","maandag","dinsdag","woensdag","donderdag","vrijdag","zaterdag"],dayNamesShort:["zon","maa","din","woe","don","vri","zat"],dayNamesMin:["zo","ma","di","wo","do","vr","za"],weekHeader:"Wk",dateFormat:"dd-mm-yy",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""},t.setDefaults(t.regional.nl),t.regional.nl,t.regional.nn={closeText:"Lukk",prevText:"&#xAB;Førre",nextText:"Neste&#xBB;",currentText:"I dag",monthNames:["januar","februar","mars","april","mai","juni","juli","august","september","oktober","november","desember"],monthNamesShort:["jan","feb","mar","apr","mai","jun","jul","aug","sep","okt","nov","des"],dayNamesShort:["sun","mån","tys","ons","tor","fre","lau"],dayNames:["sundag","måndag","tysdag","onsdag","torsdag","fredag","laurdag"],dayNamesMin:["su","må","ty","on","to","fr","la"],weekHeader:"Veke",dateFormat:"dd.mm.yy",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""},t.setDefaults(t.regional.nn),t.regional.nn,t.regional.no={closeText:"Lukk",prevText:"&#xAB;Forrige",nextText:"Neste&#xBB;",currentText:"I dag",monthNames:["januar","februar","mars","april","mai","juni","juli","august","september","oktober","november","desember"],monthNamesShort:["jan","feb","mar","apr","mai","jun","jul","aug","sep","okt","nov","des"],dayNamesShort:["søn","man","tir","ons","tor","fre","lør"],dayNames:["søndag","mandag","tirsdag","onsdag","torsdag","fredag","lørdag"],dayNamesMin:["sø","ma","ti","on","to","fr","lø"],weekHeader:"Uke",dateFormat:"dd.mm.yy",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""},t.setDefaults(t.regional.no),t.regional.no,t.regional.pl={closeText:"Zamknij",prevText:"&#x3C;Poprzedni",nextText:"Następny&#x3E;",currentText:"Dziś",monthNames:["Styczeń","Luty","Marzec","Kwiecień","Maj","Czerwiec","Lipiec","Sierpień","Wrzesień","Październik","Listopad","Grudzień"],monthNamesShort:["Sty","Lu","Mar","Kw","Maj","Cze","Lip","Sie","Wrz","Pa","Lis","Gru"],dayNames:["Niedziela","Poniedziałek","Wtorek","Środa","Czwartek","Piątek","Sobota"],dayNamesShort:["Nie","Pn","Wt","Śr","Czw","Pt","So"],dayNamesMin:["N","Pn","Wt","Śr","Cz","Pt","So"],weekHeader:"Tydz",dateFormat:"dd.mm.yy",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""},t.setDefaults(t.regional.pl),t.regional.pl,t.regional["pt-BR"]={closeText:"Fechar",prevText:"&#x3C;Anterior",nextText:"Próximo&#x3E;",currentText:"Hoje",monthNames:["Janeiro","Fevereiro","Março","Abril","Maio","Junho","Julho","Agosto","Setembro","Outubro","Novembro","Dezembro"],monthNamesShort:["Jan","Fev","Mar","Abr","Mai","Jun","Jul","Ago","Set","Out","Nov","Dez"],dayNames:["Domingo","Segunda-feira","Terça-feira","Quarta-feira","Quinta-feira","Sexta-feira","Sábado"],dayNamesShort:["Dom","Seg","Ter","Qua","Qui","Sex","Sáb"],dayNamesMin:["Dom","Seg","Ter","Qua","Qui","Sex","Sáb"],weekHeader:"Sm",dateFormat:"dd/mm/yy",firstDay:0,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""},t.setDefaults(t.regional["pt-BR"]),t.regional["pt-BR"],t.regional.pt={closeText:"Fechar",prevText:"Anterior",nextText:"Seguinte",currentText:"Hoje",monthNames:["Janeiro","Fevereiro","Março","Abril","Maio","Junho","Julho","Agosto","Setembro","Outubro","Novembro","Dezembro"],monthNamesShort:["Jan","Fev","Mar","Abr","Mai","Jun","Jul","Ago","Set","Out","Nov","Dez"],dayNames:["Domingo","Segunda-feira","Terça-feira","Quarta-feira","Quinta-feira","Sexta-feira","Sábado"],dayNamesShort:["Dom","Seg","Ter","Qua","Qui","Sex","Sáb"],dayNamesMin:["Dom","Seg","Ter","Qua","Qui","Sex","Sáb"],weekHeader:"Sem",dateFormat:"dd/mm/yy",firstDay:0,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""},t.setDefaults(t.regional.pt),t.regional.pt,t.regional.rm={closeText:"Serrar",prevText:"&#x3C;Suandant",nextText:"Precedent&#x3E;",currentText:"Actual",monthNames:["Schaner","Favrer","Mars","Avrigl","Matg","Zercladur","Fanadur","Avust","Settember","October","November","December"],monthNamesShort:["Scha","Fev","Mar","Avr","Matg","Zer","Fan","Avu","Sett","Oct","Nov","Dec"],dayNames:["Dumengia","Glindesdi","Mardi","Mesemna","Gievgia","Venderdi","Sonda"],dayNamesShort:["Dum","Gli","Mar","Mes","Gie","Ven","Som"],dayNamesMin:["Du","Gl","Ma","Me","Gi","Ve","So"],weekHeader:"emna",dateFormat:"dd/mm/yy",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""},t.setDefaults(t.regional.rm),t.regional.rm,t.regional.ro={closeText:"Închide",prevText:"&#xAB; Luna precedentă",nextText:"Luna următoare &#xBB;",currentText:"Azi",monthNames:["Ianuarie","Februarie","Martie","Aprilie","Mai","Iunie","Iulie","August","Septembrie","Octombrie","Noiembrie","Decembrie"],monthNamesShort:["Ian","Feb","Mar","Apr","Mai","Iun","Iul","Aug","Sep","Oct","Nov","Dec"],dayNames:["Duminică","Luni","Marţi","Miercuri","Joi","Vineri","Sâmbătă"],dayNamesShort:["Dum","Lun","Mar","Mie","Joi","Vin","Sâm"],dayNamesMin:["Du","Lu","Ma","Mi","Jo","Vi","Sâ"],weekHeader:"Săpt",dateFormat:"dd.mm.yy",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""},t.setDefaults(t.regional.ro),t.regional.ro,t.regional.ru={closeText:"Закрыть",prevText:"&#x3C;Пред",nextText:"След&#x3E;",currentText:"Сегодня",monthNames:["Январь","Февраль","Март","Апрель","Май","Июнь","Июль","Август","Сентябрь","Октябрь","Ноябрь","Декабрь"],monthNamesShort:["Янв","Фев","Мар","Апр","Май","Июн","Июл","Авг","Сен","Окт","Ноя","Дек"],dayNames:["воскресенье","понедельник","вторник","среда","четверг","пятница","суббота"],dayNamesShort:["вск","пнд","втр","срд","чтв","птн","сбт"],dayNamesMin:["Вс","Пн","Вт","Ср","Чт","Пт","Сб"],weekHeader:"Нед",dateFormat:"dd.mm.yy",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""},t.setDefaults(t.regional.ru),t.regional.ru,t.regional.sk={closeText:"Zavrieť",prevText:"&#x3C;Predchádzajúci",nextText:"Nasledujúci&#x3E;",currentText:"Dnes",monthNames:["január","február","marec","apríl","máj","jún","júl","august","september","október","november","december"],monthNamesShort:["Jan","Feb","Mar","Apr","Máj","Jún","Júl","Aug","Sep","Okt","Nov","Dec"],dayNames:["nedeľa","pondelok","utorok","streda","štvrtok","piatok","sobota"],dayNamesShort:["Ned","Pon","Uto","Str","Štv","Pia","Sob"],dayNamesMin:["Ne","Po","Ut","St","Št","Pia","So"],weekHeader:"Ty",dateFormat:"dd.mm.yy",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""},t.setDefaults(t.regional.sk),t.regional.sk,t.regional.sl={closeText:"Zapri",prevText:"&#x3C;Prejšnji",nextText:"Naslednji&#x3E;",currentText:"Trenutni",monthNames:["Januar","Februar","Marec","April","Maj","Junij","Julij","Avgust","September","Oktober","November","December"],monthNamesShort:["Jan","Feb","Mar","Apr","Maj","Jun","Jul","Avg","Sep","Okt","Nov","Dec"],dayNames:["Nedelja","Ponedeljek","Torek","Sreda","Četrtek","Petek","Sobota"],dayNamesShort:["Ned","Pon","Tor","Sre","Čet","Pet","Sob"],dayNamesMin:["Ne","Po","To","Sr","Če","Pe","So"],weekHeader:"Teden",dateFormat:"dd.mm.yy",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""},t.setDefaults(t.regional.sl),t.regional.sl,t.regional.sq={closeText:"mbylle",prevText:"&#x3C;mbrapa",nextText:"Përpara&#x3E;",currentText:"sot",monthNames:["Janar","Shkurt","Mars","Prill","Maj","Qershor","Korrik","Gusht","Shtator","Tetor","Nëntor","Dhjetor"],monthNamesShort:["Jan","Shk","Mar","Pri","Maj","Qer","Kor","Gus","Sht","Tet","Nën","Dhj"],dayNames:["E Diel","E Hënë","E Martë","E Mërkurë","E Enjte","E Premte","E Shtune"],dayNamesShort:["Di","Hë","Ma","Më","En","Pr","Sh"],dayNamesMin:["Di","Hë","Ma","Më","En","Pr","Sh"],weekHeader:"Ja",dateFormat:"dd.mm.yy",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""},t.setDefaults(t.regional.sq),t.regional.sq,t.regional["sr-SR"]={closeText:"Zatvori",prevText:"&#x3C;",nextText:"&#x3E;",currentText:"Danas",monthNames:["Januar","Februar","Mart","April","Maj","Jun","Jul","Avgust","Septembar","Oktobar","Novembar","Decembar"],monthNamesShort:["Jan","Feb","Mar","Apr","Maj","Jun","Jul","Avg","Sep","Okt","Nov","Dec"],dayNames:["Nedelja","Ponedeljak","Utorak","Sreda","Četvrtak","Petak","Subota"],dayNamesShort:["Ned","Pon","Uto","Sre","Čet","Pet","Sub"],dayNamesMin:["Ne","Po","Ut","Sr","Če","Pe","Su"],weekHeader:"Sed",dateFormat:"dd.mm.yy",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""},t.setDefaults(t.regional["sr-SR"]),t.regional["sr-SR"],t.regional.sr={closeText:"Затвори",prevText:"&#x3C;",nextText:"&#x3E;",currentText:"Данас",monthNames:["Јануар","Фебруар","Март","Април","Мај","Јун","Јул","Август","Септембар","Октобар","Новембар","Децембар"],monthNamesShort:["Јан","Феб","Мар","Апр","Мај","Јун","Јул","Авг","Сеп","Окт","Нов","Дец"],dayNames:["Недеља","Понедељак","Уторак","Среда","Четвртак","Петак","Субота"],dayNamesShort:["Нед","Пон","Уто","Сре","Чет","Пет","Суб"],dayNamesMin:["Не","По","Ут","Ср","Че","Пе","Су"],weekHeader:"Сед",dateFormat:"dd.mm.yy",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""},t.setDefaults(t.regional.sr),t.regional.sr,t.regional.sv={closeText:"Stäng",prevText:"&#xAB;Förra",nextText:"Nästa&#xBB;",currentText:"Idag",monthNames:["Januari","Februari","Mars","April","Maj","Juni","Juli","Augusti","September","Oktober","November","December"],monthNamesShort:["Jan","Feb","Mar","Apr","Maj","Jun","Jul","Aug","Sep","Okt","Nov","Dec"],dayNamesShort:["Sön","Mån","Tis","Ons","Tor","Fre","Lör"],dayNames:["Söndag","Måndag","Tisdag","Onsdag","Torsdag","Fredag","Lördag"],dayNamesMin:["Sö","Må","Ti","On","To","Fr","Lö"],weekHeader:"Ve",dateFormat:"yy-mm-dd",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""},t.setDefaults(t.regional.sv),t.regional.sv,t.regional.ta={closeText:"மூடு",prevText:"முன்னையது",nextText:"அடுத்தது",currentText:"இன்று",monthNames:["தை","மாசி","பங்குனி","சித்திரை","வைகாசி","ஆனி","ஆடி","ஆவணி","புரட்டாசி","ஐப்பசி","கார்த்திகை","மார்கழி"],monthNamesShort:["தை","மாசி","பங்","சித்","வைகா","ஆனி","ஆடி","ஆவ","புர","ஐப்","கார்","மார்"],dayNames:["ஞாயிற்றுக்கிழமை","திங்கட்கிழமை","செவ்வாய்க்கிழமை","புதன்கிழமை","வியாழக்கிழமை","வெள்ளிக்கிழமை","சனிக்கிழமை"],dayNamesShort:["ஞாயிறு","திங்கள்","செவ்வாய்","புதன்","வியாழன்","வெள்ளி","சனி"],dayNamesMin:["ஞா","தி","செ","பு","வி","வெ","ச"],weekHeader:"Не",dateFormat:"dd/mm/yy",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""},t.setDefaults(t.regional.ta),t.regional.ta,t.regional.th={closeText:"ปิด",prevText:"&#xAB;&#xA0;ย้อน",nextText:"ถัดไป&#xA0;&#xBB;",currentText:"วันนี้",monthNames:["มกราคม","กุมภาพันธ์","มีนาคม","เมษายน","พฤษภาคม","มิถุนายน","กรกฎาคม","สิงหาคม","กันยายน","ตุลาคม","พฤศจิกายน","ธันวาคม"],monthNamesShort:["ม.ค.","ก.พ.","มี.ค.","เม.ย.","พ.ค.","มิ.ย.","ก.ค.","ส.ค.","ก.ย.","ต.ค.","พ.ย.","ธ.ค."],dayNames:["อาทิตย์","จันทร์","อังคาร","พุธ","พฤหัสบดี","ศุกร์","เสาร์"],dayNamesShort:["อา.","จ.","อ.","พ.","พฤ.","ศ.","ส."],dayNamesMin:["อา.","จ.","อ.","พ.","พฤ.","ศ.","ส."],weekHeader:"Wk",dateFormat:"dd/mm/yy",firstDay:0,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""},t.setDefaults(t.regional.th),t.regional.th,t.regional.tj={closeText:"Идома",prevText:"&#x3c;Қафо",nextText:"Пеш&#x3e;",currentText:"Имрӯз",monthNames:["Январ","Феврал","Март","Апрел","Май","Июн","Июл","Август","Сентябр","Октябр","Ноябр","Декабр"],monthNamesShort:["Янв","Фев","Мар","Апр","Май","Июн","Июл","Авг","Сен","Окт","Ноя","Дек"],dayNames:["якшанбе","душанбе","сешанбе","чоршанбе","панҷшанбе","ҷумъа","шанбе"],dayNamesShort:["якш","душ","сеш","чор","пан","ҷум","шан"],dayNamesMin:["Як","Дш","Сш","Чш","Пш","Ҷм","Шн"],weekHeader:"Хф",dateFormat:"dd.mm.yy",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""},t.setDefaults(t.regional.tj),t.regional.tj,t.regional.tr={closeText:"kapat",prevText:"&#x3C;geri",nextText:"ileri&#x3e",currentText:"bugün",monthNames:["Ocak","Şubat","Mart","Nisan","Mayıs","Haziran","Temmuz","Ağustos","Eylül","Ekim","Kasım","Aralık"],monthNamesShort:["Oca","Şub","Mar","Nis","May","Haz","Tem","Ağu","Eyl","Eki","Kas","Ara"],dayNames:["Pazar","Pazartesi","Salı","Çarşamba","Perşembe","Cuma","Cumartesi"],dayNamesShort:["Pz","Pt","Sa","Ça","Pe","Cu","Ct"],dayNamesMin:["Pz","Pt","Sa","Ça","Pe","Cu","Ct"],weekHeader:"Hf",dateFormat:"dd.mm.yy",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""},t.setDefaults(t.regional.tr),t.regional.tr,t.regional.uk={closeText:"Закрити",prevText:"&#x3C;",nextText:"&#x3E;",currentText:"Сьогодні",monthNames:["Січень","Лютий","Березень","Квітень","Травень","Червень","Липень","Серпень","Вересень","Жовтень","Листопад","Грудень"],monthNamesShort:["Січ","Лют","Бер","Кві","Тра","Чер","Лип","Сер","Вер","Жов","Лис","Гру"],dayNames:["неділя","понеділок","вівторок","середа","четвер","п’ятниця","субота"],dayNamesShort:["нед","пнд","вів","срд","чтв","птн","сбт"],dayNamesMin:["Нд","Пн","Вт","Ср","Чт","Пт","Сб"],weekHeader:"Тиж",dateFormat:"dd.mm.yy",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""},t.setDefaults(t.regional.uk),t.regional.uk,t.regional.vi={closeText:"Đóng",prevText:"&#x3C;Trước",nextText:"Tiếp&#x3E;",currentText:"Hôm nay",monthNames:["Tháng Một","Tháng Hai","Tháng Ba","Tháng Tư","Tháng Năm","Tháng Sáu","Tháng Bảy","Tháng Tám","Tháng Chín","Tháng Mười","Tháng Mười Một","Tháng Mười Hai"],monthNamesShort:["Tháng 1","Tháng 2","Tháng 3","Tháng 4","Tháng 5","Tháng 6","Tháng 7","Tháng 8","Tháng 9","Tháng 10","Tháng 11","Tháng 12"],dayNames:["Chủ Nhật","Thứ Hai","Thứ Ba","Thứ Tư","Thứ Năm","Thứ Sáu","Thứ Bảy"],dayNamesShort:["CN","T2","T3","T4","T5","T6","T7"],dayNamesMin:["CN","T2","T3","T4","T5","T6","T7"],weekHeader:"Tu",dateFormat:"dd/mm/yy",firstDay:0,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""},t.setDefaults(t.regional.vi),t.regional.vi,t.regional["zh-CN"]={closeText:"关闭",prevText:"&#x3C;上月",nextText:"下月&#x3E;",currentText:"今天",monthNames:["一月","二月","三月","四月","五月","六月","七月","八月","九月","十月","十一月","十二月"],monthNamesShort:["一月","二月","三月","四月","五月","六月","七月","八月","九月","十月","十一月","十二月"],dayNames:["星期日","星期一","星期二","星期三","星期四","星期五","星期六"],dayNamesShort:["周日","周一","周二","周三","周四","周五","周六"],dayNamesMin:["日","一","二","三","四","五","六"],weekHeader:"周",dateFormat:"yy-mm-dd",firstDay:1,isRTL:!1,showMonthAfterYear:!0,yearSuffix:"年"},t.setDefaults(t.regional["zh-CN"]),t.regional["zh-CN"],t.regional["zh-HK"]={closeText:"關閉",prevText:"&#x3C;上月",nextText:"下月&#x3E;",currentText:"今天",monthNames:["一月","二月","三月","四月","五月","六月","七月","八月","九月","十月","十一月","十二月"],monthNamesShort:["一月","二月","三月","四月","五月","六月","七月","八月","九月","十月","十一月","十二月"],dayNames:["星期日","星期一","星期二","星期三","星期四","星期五","星期六"],dayNamesShort:["周日","周一","周二","周三","周四","周五","周六"],dayNamesMin:["日","一","二","三","四","五","六"],weekHeader:"周",dateFormat:"dd-mm-yy",firstDay:0,isRTL:!1,showMonthAfterYear:!0,yearSuffix:"年"},t.setDefaults(t.regional["zh-HK"]),t.regional["zh-HK"],t.regional["zh-TW"]={closeText:"關閉",prevText:"&#x3C;上月",nextText:"下月&#x3E;",currentText:"今天",monthNames:["一月","二月","三月","四月","五月","六月","七月","八月","九月","十月","十一月","十二月"],monthNamesShort:["一月","二月","三月","四月","五月","六月","七月","八月","九月","十月","十一月","十二月"],dayNames:["星期日","星期一","星期二","星期三","星期四","星期五","星期六"],dayNamesShort:["周日","周一","周二","周三","周四","周五","周六"],dayNamesMin:["日","一","二","三","四","五","六"],weekHeader:"周",dateFormat:"yy/mm/dd",firstDay:1,isRTL:!1,showMonthAfterYear:!0,yearSuffix:"年"},t.setDefaults(t.regional["zh-TW"]),t.regional["zh-TW"]
});
//END Trisept.UI.Web.Shell.jquery.ui.i18n-1.11.2.min.js
//START Trisept.UI.Web.Shell.DatePicker.js
//Creates a set of valid date range data based on the given pipe-delimited low date (e.g. "7/12/2015|7/26/2015|8/16/2015"), high date (e.g. "7/14/2015|8/4/2015|8/26/2015"), and dayOfWeekMask strings (e.g. "YYYNNNN|YYYNNNN|YYYYNNY")
function CreateValidDateRangesFromPipeStrings(validDateData) {
    var validDateRanges = null;
            
    if (validDateData != null) {
        //Create a collection of objects with valid date ranges and day-of-week masks that the datepicker can use
        var minDates = validDateData.LowDates.split("|");
        var maxDates = validDateData.HighDates.split("|");
        var dowMasks = validDateData.DowMasks.split("|");
        validDateRanges = [];
        for (i = 0; i < minDates.length; i++) {
                var validDateRange = {
	            "MinDate":minDates[i],
	            "MaxDate":maxDates[i],
	            "DowMask":dowMasks[i]
            };
            validDateRanges.push(validDateRange);
        }
    }

    return validDateRanges;
}

//Creates a set of valid date range data based on given start date and length of stay data (which is typically generated by OnSale as "onSaleDates")
function CreateValidDateRangesFromDurationData(selectedStartDate, startDatesAndDurations) {
    var validEndDates = [];
                        
    //Determine valid end dates based on duration values for the specified start date.
    for (i = 0; i < startDatesAndDurations.length; i++) { 
        if (Date.parse(startDatesAndDurations[i].traveldate) == selectedStartDate) {
            var validEndDate = new Date(startDatesAndDurations[i].traveldate);
            validEndDate.setDate(validEndDate.getDate() + startDatesAndDurations[i].numofnights);
            validEndDates.push(validEndDate);
        }
    }

    if (validEndDates != null) {
        //Create a collection of objects with valid date ranges and day-of-week masks that the datepicker can use
        var validDateRanges = [];
        for (i = 0; i < validEndDates.length; i++) { 
                var validDateRange = {
	            "MinDate":validEndDates[i],
	            "MaxDate":validEndDates[i],
	            "DowMask":"YYYYYYY"
            };
            validDateRanges.push(validDateRange);
        }

        return validDateRanges;
    }
}
        
//Determine whether the given date is selectable based on the given valid date range / day-of-week data
function IsDateSelectable(theDate, validDateRanges) {
    var result = true;
    if (validDateRanges != null) {
        result = false;

        for (i = 0; i < validDateRanges.length; i++) {

            if (DateMatchesDowMask(theDate, validDateRanges[i].DowMask)) {
                
                if (validDateRanges[i].MinDate != null && validDateRanges[i].MaxDate != null) {
                    //Check full range
                    if (theDate >= Date.parse(validDateRanges[i].MinDate) && theDate <= Date.parse(validDateRanges[i].MaxDate)) {
                        result = true;
                        break;
                    }
                }
                else if (validDateRanges[i].MinDate != null && validDateRanges[i].MaxDate == null) {
                    //Only check start of range
                    if (theDate >= Date.parse(validDateRanges[i].MinDate)) {
                        result = true;
                        break;
                    }
                }
                else if (validDateRanges[i].MinDate == null && validDateRanges[i].MaxDate != null) {
                    //Only check end of range
                    if (theDate <= Date.parse(validDateRanges[i].MaxDate)) {
                        result = true;
                        break;
                    }
                }
                else {
                    //No date restrictions
                    result = true;
                    break;
                }
            }
        }
    }
    return result;
}
        
//Determine whether the given date is valid for the given day-of-week mask (e.g. "YNYYNYY")
function DateMatchesDowMask(theDate, dowMask) {
    var result = false;
    var dow = theDate.getDay();
    var dowMaskValues = dowMask.split("");
    if (dowMaskValues.length >= 7) {
        if (dowMaskValues[dow].toUpperCase() == "Y") {
            result = true;
        }
    }
    return result;
}

//Get the highest max date from the set of valid date ranges
function GetHighestMaxDate(validDateRanges) {
    var highestMaxDate = null;
    for (i = 0; i < validDateRanges.length; i++) {
        if (validDateRanges[i].MaxDate != null) {
            var maxDate = Date.parse(validDateRanges[i].MaxDate);
            if (highestMaxDate == null || maxDate > highestMaxDate) {
                highestMaxDate = maxDate;
            }
        }
    }
    if (highestMaxDate != null) {
        return new Date(highestMaxDate);
    }
    else {
        return highestMaxDate;
    }
}

function SetDatePickerCulture() {
    var jQueryCulture = Sys.CultureInfo.CurrentCulture.name;    //Try full code

    if ($.datepicker.regional[jQueryCulture] == undefined) {
        var jQueryCultureParts = jQueryCulture.split('-');
        if ($.datepicker.regional[jQueryCultureParts[0]] != undefined) {
            jQueryCulture = jQueryCultureParts[0];  //Or just language code
        }
        else {
            jQueryCulture = "en"    //Or English fallback
        }
    }

    $.datepicker.setDefaults($.datepicker.regional[jQueryCulture]);
}

//Update the datepicker's max date.  Will use overall max date out of given valid ranges (to prevent paging through months with no selectable dates), plus
//extra months depending on number of visible months (to prevent keyboard navigation bug with months at end of valid date range on multi-month datepickers).
function SetDatePickerMaxValidDate(inputId, validDateRanges) {
    var highestMaxDate = GetHighestMaxDate(validDateRanges);
    if (highestMaxDate != null) {
        highestMaxDate.setMonth(highestMaxDate.getMonth() + ($('#' + inputId).datepicker('option', 'numberOfMonths') - 1));
        $('#' + inputId).datepicker('option', 'maxDate', highestMaxDate);
    }
}

//Update live region so highlighted date is read
function UpdateAriaHighlightedDate (e, input, unselectableDateLabel, highlightedDateLabel) {
    var evtobj = window.event ? event : e;

    //When navigating via keyboard ([Ctrl/Command] + [Left/Up/Right/Down/End/Home] or PageUp or PageDown)...
    if ( ((evtobj.ctrlKey || e.metaKey) && ( evtobj.keyCode == '37' || evtobj.keyCode == '38' || evtobj.keyCode == '39' || evtobj.keyCode == '40' || evtobj.keyCode == '35' || evtobj.keyCode == '36')) || evtobj.keyCode == '33' || evtobj.keyCode == '34') {
        var message = '';
        var currentCell = $('.ui-datepicker-days-cell-over');
        if (currentCell.hasClass('ui-datepicker-unselectable') == true) {
            message += unselectableDateLabel + ': ';    //Add a label to unselectable dates for screen readers
        }

        //If month dropdown enabled, use selected short month (e.g. "OCT") to find corresponding long month (e.g. "October").  Otherwise, use month text displayed in heading area.
        var monthLong = '';
        var monthIndex = -1;
        if (input.datepicker('option', 'changeMonth') == true) {
            var monthShort = $('.ui-datepicker-month option:selected').text();
            monthIndex = $.inArray(monthShort, input.datepicker('option', 'monthNamesShort'));
            if (monthIndex != -1) {
                monthLong = input.datepicker('option', 'monthNames')[monthIndex];
            }
            else {
                monthLong = monthShort;
            }
        }
        else {
            monthLong = $('.ui-datepicker-month').html();
            monthIndex = input.datepicker('option', 'monthNames').indexOf(monthLong);
        }

        //If year dropdown enabled, use selected value.  Otherwise, use year text displayed in heading area.
        var year = '';
        if (input.datepicker('option', 'changeYear') == true) {
            year = $('.ui-datepicker-year option:selected').text();
        }
        else {
            year = $('.ui-datepicker-year').html();
        }

        //Date
        var dayNum = currentCell.children().first().html();

        //Day of week
        var dayName = '';
        try {
            dayName = new Date(year, monthIndex, dayNum).localeFormat('dddd');
        }
        catch (error) {
        }

        var dateText = highlightedDateLabel;
        dateText = dateText.replace('{dayName}', dayName).replace('{dayNumber}', dayNum).replace('{month}', monthLong).replace('{year}', year);

        message += dateText;

        //Create/update live region
        var ariaHighlightedDate = $('#ariaHighlightedDate');
        if (ariaHighlightedDate.length == 0) {
            ariaHighlightedDate = $('body').append("<span id='ariaHighlightedDate' aria-live='assertive' aria-atomic='true' class='aria-only'></span>");
        }
        setTimeout(function() {
            $('#ariaHighlightedDate').html(message);
        }, 0);
    }
}
//END Trisept.UI.Web.Shell.DatePicker.js
//START Trisept.UI.Web.Shell.TrackingVariables.js
Type.registerNamespace("Analytics");

// This is the first version of this object. For the project that needed this work done, the only thing necessary was having the event ids included. This object was created to allow for extension of whatever
// data will need to be included in the future; not only for Omniture tracking, but all analytics platforms we support.

Analytics.TrackingVariables = function (eventIds) {

    this.EventIds = eventIds; //The event ids that will be associated with this tracking call.

}

Analytics.TrackingVariables.registerClass("Analytics.TrackingVariables", null);

if (typeof (Sys) !== "undefined") Sys.Application.notifyScriptLoaded();

//END Trisept.UI.Web.Shell.TrackingVariables.js
//START Trisept.UI.Web.Shell.ContinueFlow.js

    function ContinueFlow(component, itin, stop, leg, flow) {

        Trisept.UI.Web.Availability.Components.AvailabilityAddItemComponent.ContinueAvailabilityFlow(component, itin, stop, leg, flow, window["OnCompleteAddItem" + flow]);
        ShowContinueFlowWait();

    }

    function ShowContinueFlowWait() {

        if (typeof (StartWaitScreenRotator) === 'function') {
            StartWaitScreenRotator();
        }
        
        showModal("ContinueFlowWaitScreen", "modalWaitScreenPopup", 3, -1, -1, "", 600, 400, '', false, '', true);    
    }
//END Trisept.UI.Web.Shell.ContinueFlow.js
//START Trisept.UI.Web.Shell.AriaUpdateProgress.js
function ReadUpdateProgress() {
    try {
        var element = $("#AriaUpdateProgress");
        if (element.length > 0) {
            element.html(element.html());
        }
    }
    catch (ex) {

    }
}

Sys.Application.add_load(
    function () {
        try {
            var prm = Sys.WebForms.PageRequestManager.getInstance();
            if (!prm.get_isInAsyncPostBack()) {
                prm.add_beginRequest(ReadUpdateProgress);
            };
        }
        catch (ex) {

        }
    }
);
Sys.Application.add_unload(
    function () {
        try {
            var prm = Sys.WebForms.PageRequestManager.getInstance();
            prm.remove_beginRequest(ReadUpdateProgress);
        }
        catch (ex) {

        }
    }
);
//END Trisept.UI.Web.Shell.AriaUpdateProgress.js
if(typeof(Sys)!=='undefined')Sys.Application.notifyScriptLoaded();
(function() {var fn = function() {$get('ctl00_ctl01_ContentPlaceHolder_ContentPlaceHolder_sm_HiddenField').value += ';;AjaxControlToolkit, Version=3.0.20820.100, Culture=neutral, PublicKeyToken=28f01b0e84b6d53e:en-US:cedfb177-46ef-4a78-ab4b-3aec1486c8b6:865923e8:91bd373d:8e72a662:411fea1c:acd642d2:596d588c:77c58d20:14b56adc:269a19ae;Trisept.UI.Web.Availability:en-US:1b69c727-baf4-45d7-8395-fd8178a81289:ab5336c4:5ff8d736:141eea26:2b02cb1c:88152930:98c31e20:b0e16fc6:6a03ffd4:d52c6f4b:8ccc6c16:c1442b04:c63f5834:c2e86f1b:1a865b00:da758d42:390e4a9a:829344d6:958c98eb:c97d7dc8:46b0d83c:f3acc007:1dac7ee5:88977310:c37d84f6:85b45cae:3b0ddd3c:3afde646:c5a69f61:b0e13c28:e6e06b3b:421b60a2:b9ecb13b:5b6ff908:8be06220:e1d0035a:f56fba8f;Trisept.UI.Web.Booking:en-US:bb11b4c2-34ec-4060-aa5f-2a89cdbe26f5:29340ba5;Trisept.UI.Web.Resources.Consumer.CSI.Search:en-US:ce98f9f7-73e3-48fa-9a6b-f3ad1b564694:f67f31d9;Trisept.UI.Web.Resources.Consumer.CSI.Shell:en-US:215bbc0a-174a-48e3-bccb-1050280e0377:9682d590;Trisept.UI.Web.Search:en-US:d8eef44c-abcc-449e-8cb8-5db71a8c1eb0:3d1c7b90:bcf3dfc1:c9a4579a;Trisept.UI.Web.Shell:en-US:aec34920-9d9d-490a-9d61-a1f3c182d3a9:8a6a926b:80023f75:e37a19f8:4e089d68:f093364b:e74db435:c78a629c:1304c1d1:d2fb630c:21ad33e6:55680658:4c326bfd:929741d6:53482884:baba344c:682c6da3:e4770b2c:190ffc5f:920b14cf:eebc0339:22d2ecd:c7ef14f5:3aa688ce:c33c6e43:22c00c4c:dcdb9682:dfa8dc1:315e00d0:a67286d4:a4cd58d0:aa92e3ca:a7cdbe6f;Trisept.UI.Web.Shell.Foundation:en-US:2f177349-f100-4883-ac97-67d7d0605456:b56c8777';Sys.Application.remove_load(fn);};Sys.Application.add_load(fn);})();
